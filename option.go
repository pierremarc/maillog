// Code generated by go generate - 2018-03-24 06:57:09.293829754 +0000 UTC
package main

import "database/sql"

// interfaces

// Error
type OptionError interface {
	Map(func(error))
	FoldF(func(), func(error))

	MapError(func(error) error) OptionError
	FoldError(error, func(error) error) error
	FoldErrorF(func() error, func(error) error) error

	MapInt(func(error) int) OptionInt
	FoldInt(int, func(error) int) int
	FoldIntF(func() int, func(error) int) int

	MapNode(func(error) Node) OptionNode
	FoldNode(Node, func(error) Node) Node
	FoldNodeF(func() Node, func(error) Node) Node

	MapSqlDB(func(error) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(error) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(error) *sql.DB) *sql.DB

	MapString(func(error) string) OptionString
	FoldString(string, func(error) string) string
	FoldStringF(func() string, func(error) string) string

	MapUint64(func(error) uint64) OptionUint64
	FoldUint64(uint64, func(error) uint64) uint64
	FoldUint64F(func() uint64, func(error) uint64) uint64
}

// Int
type OptionInt interface {
	Map(func(int))
	FoldF(func(), func(int))

	MapError(func(int) error) OptionError
	FoldError(error, func(int) error) error
	FoldErrorF(func() error, func(int) error) error

	MapInt(func(int) int) OptionInt
	FoldInt(int, func(int) int) int
	FoldIntF(func() int, func(int) int) int

	MapNode(func(int) Node) OptionNode
	FoldNode(Node, func(int) Node) Node
	FoldNodeF(func() Node, func(int) Node) Node

	MapSqlDB(func(int) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(int) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(int) *sql.DB) *sql.DB

	MapString(func(int) string) OptionString
	FoldString(string, func(int) string) string
	FoldStringF(func() string, func(int) string) string

	MapUint64(func(int) uint64) OptionUint64
	FoldUint64(uint64, func(int) uint64) uint64
	FoldUint64F(func() uint64, func(int) uint64) uint64
}

// Node
type OptionNode interface {
	Map(func(Node))
	FoldF(func(), func(Node))

	MapError(func(Node) error) OptionError
	FoldError(error, func(Node) error) error
	FoldErrorF(func() error, func(Node) error) error

	MapInt(func(Node) int) OptionInt
	FoldInt(int, func(Node) int) int
	FoldIntF(func() int, func(Node) int) int

	MapNode(func(Node) Node) OptionNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func() Node, func(Node) Node) Node

	MapSqlDB(func(Node) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(Node) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(Node) *sql.DB) *sql.DB

	MapString(func(Node) string) OptionString
	FoldString(string, func(Node) string) string
	FoldStringF(func() string, func(Node) string) string

	MapUint64(func(Node) uint64) OptionUint64
	FoldUint64(uint64, func(Node) uint64) uint64
	FoldUint64F(func() uint64, func(Node) uint64) uint64
}

// SqlDB
type OptionSqlDB interface {
	Map(func(*sql.DB))
	FoldF(func(), func(*sql.DB))

	MapError(func(*sql.DB) error) OptionError
	FoldError(error, func(*sql.DB) error) error
	FoldErrorF(func() error, func(*sql.DB) error) error

	MapInt(func(*sql.DB) int) OptionInt
	FoldInt(int, func(*sql.DB) int) int
	FoldIntF(func() int, func(*sql.DB) int) int

	MapNode(func(*sql.DB) Node) OptionNode
	FoldNode(Node, func(*sql.DB) Node) Node
	FoldNodeF(func() Node, func(*sql.DB) Node) Node

	MapSqlDB(func(*sql.DB) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(*sql.DB) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(*sql.DB) *sql.DB) *sql.DB

	MapString(func(*sql.DB) string) OptionString
	FoldString(string, func(*sql.DB) string) string
	FoldStringF(func() string, func(*sql.DB) string) string

	MapUint64(func(*sql.DB) uint64) OptionUint64
	FoldUint64(uint64, func(*sql.DB) uint64) uint64
	FoldUint64F(func() uint64, func(*sql.DB) uint64) uint64
}

// String
type OptionString interface {
	Map(func(string))
	FoldF(func(), func(string))

	MapError(func(string) error) OptionError
	FoldError(error, func(string) error) error
	FoldErrorF(func() error, func(string) error) error

	MapInt(func(string) int) OptionInt
	FoldInt(int, func(string) int) int
	FoldIntF(func() int, func(string) int) int

	MapNode(func(string) Node) OptionNode
	FoldNode(Node, func(string) Node) Node
	FoldNodeF(func() Node, func(string) Node) Node

	MapSqlDB(func(string) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(string) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(string) *sql.DB) *sql.DB

	MapString(func(string) string) OptionString
	FoldString(string, func(string) string) string
	FoldStringF(func() string, func(string) string) string

	MapUint64(func(string) uint64) OptionUint64
	FoldUint64(uint64, func(string) uint64) uint64
	FoldUint64F(func() uint64, func(string) uint64) uint64
}

// Uint64
type OptionUint64 interface {
	Map(func(uint64))
	FoldF(func(), func(uint64))

	MapError(func(uint64) error) OptionError
	FoldError(error, func(uint64) error) error
	FoldErrorF(func() error, func(uint64) error) error

	MapInt(func(uint64) int) OptionInt
	FoldInt(int, func(uint64) int) int
	FoldIntF(func() int, func(uint64) int) int

	MapNode(func(uint64) Node) OptionNode
	FoldNode(Node, func(uint64) Node) Node
	FoldNodeF(func() Node, func(uint64) Node) Node

	MapSqlDB(func(uint64) *sql.DB) OptionSqlDB
	FoldSqlDB(*sql.DB, func(uint64) *sql.DB) *sql.DB
	FoldSqlDBF(func() *sql.DB, func(uint64) *sql.DB) *sql.DB

	MapString(func(uint64) string) OptionString
	FoldString(string, func(uint64) string) string
	FoldStringF(func() string, func(uint64) string) string

	MapUint64(func(uint64) uint64) OptionUint64
	FoldUint64(uint64, func(uint64) uint64) uint64
	FoldUint64F(func() uint64, func(uint64) uint64) uint64
}

// functions

func IdError(v error) error { return v }
func FromErrorError(v error, err error) OptionError {
	if err != nil {
		return NoneError()
	}
	return SomeError(v)
}

func IdInt(v int) int { return v }
func FromIntError(v int, err error) OptionInt {
	if err != nil {
		return NoneInt()
	}
	return SomeInt(v)
}

func IdNode(v Node) Node { return v }
func FromNodeError(v Node, err error) OptionNode {
	if err != nil {
		return NoneNode()
	}
	return SomeNode(v)
}

func IdSqlDB(v *sql.DB) *sql.DB { return v }
func FromSqlDBError(v *sql.DB, err error) OptionSqlDB {
	if err != nil {
		return NoneSqlDB()
	}
	return SomeSqlDB(v)
}

func IdString(v string) string { return v }
func FromStringError(v string, err error) OptionString {
	if err != nil {
		return NoneString()
	}
	return SomeString(v)
}

func IdUint64(v uint64) uint64 { return v }
func FromUint64Error(v uint64, err error) OptionUint64 {
	if err != nil {
		return NoneUint64()
	}
	return SomeUint64(v)
}

// none
type noneError struct{}

func NoneError() OptionError {
	return noneError{}
}

// map NoneError
func (n noneError) Map(f func(error))             {}
func (n noneError) FoldF(l func(), r func(error)) { l() }

// map NoneError => OptionError
func (n noneError) MapError(f func(v error) error) OptionError {
	return noneError{}
}

// fold NoneError => Optionerror
func (n noneError) FoldError(a error, f func(v error) error) error {
	return a
}
func (n noneError) FoldErrorF(a func() error, f func(v error) error) error {
	return a()
}

// map NoneError => OptionInt
func (n noneError) MapInt(f func(v error) int) OptionInt {
	return noneInt{}
}

// fold NoneError => Optionint
func (n noneError) FoldInt(a int, f func(v error) int) int {
	return a
}
func (n noneError) FoldIntF(a func() int, f func(v error) int) int {
	return a()
}

// map NoneError => OptionNode
func (n noneError) MapNode(f func(v error) Node) OptionNode {
	return noneNode{}
}

// fold NoneError => OptionNode
func (n noneError) FoldNode(a Node, f func(v error) Node) Node {
	return a
}
func (n noneError) FoldNodeF(a func() Node, f func(v error) Node) Node {
	return a()
}

// map NoneError => OptionSqlDB
func (n noneError) MapSqlDB(f func(v error) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneError => Option*sql.DB
func (n noneError) FoldSqlDB(a *sql.DB, f func(v error) *sql.DB) *sql.DB {
	return a
}
func (n noneError) FoldSqlDBF(a func() *sql.DB, f func(v error) *sql.DB) *sql.DB {
	return a()
}

// map NoneError => OptionString
func (n noneError) MapString(f func(v error) string) OptionString {
	return noneString{}
}

// fold NoneError => Optionstring
func (n noneError) FoldString(a string, f func(v error) string) string {
	return a
}
func (n noneError) FoldStringF(a func() string, f func(v error) string) string {
	return a()
}

// map NoneError => OptionUint64
func (n noneError) MapUint64(f func(v error) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneError => Optionuint64
func (n noneError) FoldUint64(a uint64, f func(v error) uint64) uint64 {
	return a
}
func (n noneError) FoldUint64F(a func() uint64, f func(v error) uint64) uint64 {
	return a()
}

// end of nones

// some
type someError struct {
	v error
}

func SomeError(v error) someError {
	return someError{v}
}

// map NoneError
func (s someError) Map(f func(error))             { f(s.v) }
func (s someError) FoldF(l func(), r func(error)) { r(s.v) }

// map SoneError => OptionError
func (s someError) MapError(f func(v error) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeError => error
func (s someError) FoldError(a error, f func(v error) error) error {
	return f(s.v)
}
func (s someError) FoldErrorF(a func() error, f func(v error) error) error {
	return f(s.v)
}

// map SoneError => OptionInt
func (s someError) MapInt(f func(v error) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeError => int
func (s someError) FoldInt(a int, f func(v error) int) int {
	return f(s.v)
}
func (s someError) FoldIntF(a func() int, f func(v error) int) int {
	return f(s.v)
}

// map SoneError => OptionNode
func (s someError) MapNode(f func(v error) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeError => Node
func (s someError) FoldNode(a Node, f func(v error) Node) Node {
	return f(s.v)
}
func (s someError) FoldNodeF(a func() Node, f func(v error) Node) Node {
	return f(s.v)
}

// map SoneError => OptionSqlDB
func (s someError) MapSqlDB(f func(v error) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeError => *sql.DB
func (s someError) FoldSqlDB(a *sql.DB, f func(v error) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someError) FoldSqlDBF(a func() *sql.DB, f func(v error) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneError => OptionString
func (s someError) MapString(f func(v error) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeError => string
func (s someError) FoldString(a string, f func(v error) string) string {
	return f(s.v)
}
func (s someError) FoldStringF(a func() string, f func(v error) string) string {
	return f(s.v)
}

// map SoneError => OptionUint64
func (s someError) MapUint64(f func(v error) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeError => uint64
func (s someError) FoldUint64(a uint64, f func(v error) uint64) uint64 {
	return f(s.v)
}
func (s someError) FoldUint64F(a func() uint64, f func(v error) uint64) uint64 {
	return f(s.v)
}

// end of somes

// none
type noneInt struct{}

func NoneInt() OptionInt {
	return noneInt{}
}

// map NoneInt
func (n noneInt) Map(f func(int))             {}
func (n noneInt) FoldF(l func(), r func(int)) { l() }

// map NoneInt => OptionError
func (n noneInt) MapError(f func(v int) error) OptionError {
	return noneError{}
}

// fold NoneInt => Optionerror
func (n noneInt) FoldError(a error, f func(v int) error) error {
	return a
}
func (n noneInt) FoldErrorF(a func() error, f func(v int) error) error {
	return a()
}

// map NoneInt => OptionInt
func (n noneInt) MapInt(f func(v int) int) OptionInt {
	return noneInt{}
}

// fold NoneInt => Optionint
func (n noneInt) FoldInt(a int, f func(v int) int) int {
	return a
}
func (n noneInt) FoldIntF(a func() int, f func(v int) int) int {
	return a()
}

// map NoneInt => OptionNode
func (n noneInt) MapNode(f func(v int) Node) OptionNode {
	return noneNode{}
}

// fold NoneInt => OptionNode
func (n noneInt) FoldNode(a Node, f func(v int) Node) Node {
	return a
}
func (n noneInt) FoldNodeF(a func() Node, f func(v int) Node) Node {
	return a()
}

// map NoneInt => OptionSqlDB
func (n noneInt) MapSqlDB(f func(v int) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneInt => Option*sql.DB
func (n noneInt) FoldSqlDB(a *sql.DB, f func(v int) *sql.DB) *sql.DB {
	return a
}
func (n noneInt) FoldSqlDBF(a func() *sql.DB, f func(v int) *sql.DB) *sql.DB {
	return a()
}

// map NoneInt => OptionString
func (n noneInt) MapString(f func(v int) string) OptionString {
	return noneString{}
}

// fold NoneInt => Optionstring
func (n noneInt) FoldString(a string, f func(v int) string) string {
	return a
}
func (n noneInt) FoldStringF(a func() string, f func(v int) string) string {
	return a()
}

// map NoneInt => OptionUint64
func (n noneInt) MapUint64(f func(v int) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneInt => Optionuint64
func (n noneInt) FoldUint64(a uint64, f func(v int) uint64) uint64 {
	return a
}
func (n noneInt) FoldUint64F(a func() uint64, f func(v int) uint64) uint64 {
	return a()
}

// end of nones

// some
type someInt struct {
	v int
}

func SomeInt(v int) someInt {
	return someInt{v}
}

// map NoneInt
func (s someInt) Map(f func(int))             { f(s.v) }
func (s someInt) FoldF(l func(), r func(int)) { r(s.v) }

// map SoneInt => OptionError
func (s someInt) MapError(f func(v int) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeInt => error
func (s someInt) FoldError(a error, f func(v int) error) error {
	return f(s.v)
}
func (s someInt) FoldErrorF(a func() error, f func(v int) error) error {
	return f(s.v)
}

// map SoneInt => OptionInt
func (s someInt) MapInt(f func(v int) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeInt => int
func (s someInt) FoldInt(a int, f func(v int) int) int {
	return f(s.v)
}
func (s someInt) FoldIntF(a func() int, f func(v int) int) int {
	return f(s.v)
}

// map SoneInt => OptionNode
func (s someInt) MapNode(f func(v int) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeInt => Node
func (s someInt) FoldNode(a Node, f func(v int) Node) Node {
	return f(s.v)
}
func (s someInt) FoldNodeF(a func() Node, f func(v int) Node) Node {
	return f(s.v)
}

// map SoneInt => OptionSqlDB
func (s someInt) MapSqlDB(f func(v int) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeInt => *sql.DB
func (s someInt) FoldSqlDB(a *sql.DB, f func(v int) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someInt) FoldSqlDBF(a func() *sql.DB, f func(v int) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneInt => OptionString
func (s someInt) MapString(f func(v int) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeInt => string
func (s someInt) FoldString(a string, f func(v int) string) string {
	return f(s.v)
}
func (s someInt) FoldStringF(a func() string, f func(v int) string) string {
	return f(s.v)
}

// map SoneInt => OptionUint64
func (s someInt) MapUint64(f func(v int) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeInt => uint64
func (s someInt) FoldUint64(a uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}
func (s someInt) FoldUint64F(a func() uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}

// end of somes

// none
type noneNode struct{}

func NoneNode() OptionNode {
	return noneNode{}
}

// map NoneNode
func (n noneNode) Map(f func(Node))             {}
func (n noneNode) FoldF(l func(), r func(Node)) { l() }

// map NoneNode => OptionError
func (n noneNode) MapError(f func(v Node) error) OptionError {
	return noneError{}
}

// fold NoneNode => Optionerror
func (n noneNode) FoldError(a error, f func(v Node) error) error {
	return a
}
func (n noneNode) FoldErrorF(a func() error, f func(v Node) error) error {
	return a()
}

// map NoneNode => OptionInt
func (n noneNode) MapInt(f func(v Node) int) OptionInt {
	return noneInt{}
}

// fold NoneNode => Optionint
func (n noneNode) FoldInt(a int, f func(v Node) int) int {
	return a
}
func (n noneNode) FoldIntF(a func() int, f func(v Node) int) int {
	return a()
}

// map NoneNode => OptionNode
func (n noneNode) MapNode(f func(v Node) Node) OptionNode {
	return noneNode{}
}

// fold NoneNode => OptionNode
func (n noneNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}
func (n noneNode) FoldNodeF(a func() Node, f func(v Node) Node) Node {
	return a()
}

// map NoneNode => OptionSqlDB
func (n noneNode) MapSqlDB(f func(v Node) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneNode => Option*sql.DB
func (n noneNode) FoldSqlDB(a *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return a
}
func (n noneNode) FoldSqlDBF(a func() *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return a()
}

// map NoneNode => OptionString
func (n noneNode) MapString(f func(v Node) string) OptionString {
	return noneString{}
}

// fold NoneNode => Optionstring
func (n noneNode) FoldString(a string, f func(v Node) string) string {
	return a
}
func (n noneNode) FoldStringF(a func() string, f func(v Node) string) string {
	return a()
}

// map NoneNode => OptionUint64
func (n noneNode) MapUint64(f func(v Node) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneNode => Optionuint64
func (n noneNode) FoldUint64(a uint64, f func(v Node) uint64) uint64 {
	return a
}
func (n noneNode) FoldUint64F(a func() uint64, f func(v Node) uint64) uint64 {
	return a()
}

// end of nones

// some
type someNode struct {
	v Node
}

func SomeNode(v Node) someNode {
	return someNode{v}
}

// map NoneNode
func (s someNode) Map(f func(Node))             { f(s.v) }
func (s someNode) FoldF(l func(), r func(Node)) { r(s.v) }

// map SoneNode => OptionError
func (s someNode) MapError(f func(v Node) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeNode => error
func (s someNode) FoldError(a error, f func(v Node) error) error {
	return f(s.v)
}
func (s someNode) FoldErrorF(a func() error, f func(v Node) error) error {
	return f(s.v)
}

// map SoneNode => OptionInt
func (s someNode) MapInt(f func(v Node) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeNode => int
func (s someNode) FoldInt(a int, f func(v Node) int) int {
	return f(s.v)
}
func (s someNode) FoldIntF(a func() int, f func(v Node) int) int {
	return f(s.v)
}

// map SoneNode => OptionNode
func (s someNode) MapNode(f func(v Node) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeNode => Node
func (s someNode) FoldNode(a Node, f func(v Node) Node) Node {
	return f(s.v)
}
func (s someNode) FoldNodeF(a func() Node, f func(v Node) Node) Node {
	return f(s.v)
}

// map SoneNode => OptionSqlDB
func (s someNode) MapSqlDB(f func(v Node) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeNode => *sql.DB
func (s someNode) FoldSqlDB(a *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someNode) FoldSqlDBF(a func() *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneNode => OptionString
func (s someNode) MapString(f func(v Node) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeNode => string
func (s someNode) FoldString(a string, f func(v Node) string) string {
	return f(s.v)
}
func (s someNode) FoldStringF(a func() string, f func(v Node) string) string {
	return f(s.v)
}

// map SoneNode => OptionUint64
func (s someNode) MapUint64(f func(v Node) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeNode => uint64
func (s someNode) FoldUint64(a uint64, f func(v Node) uint64) uint64 {
	return f(s.v)
}
func (s someNode) FoldUint64F(a func() uint64, f func(v Node) uint64) uint64 {
	return f(s.v)
}

// end of somes

// none
type noneSqlDB struct{}

func NoneSqlDB() OptionSqlDB {
	return noneSqlDB{}
}

// map NoneSqlDB
func (n noneSqlDB) Map(f func(*sql.DB))             {}
func (n noneSqlDB) FoldF(l func(), r func(*sql.DB)) { l() }

// map NoneSqlDB => OptionError
func (n noneSqlDB) MapError(f func(v *sql.DB) error) OptionError {
	return noneError{}
}

// fold NoneSqlDB => Optionerror
func (n noneSqlDB) FoldError(a error, f func(v *sql.DB) error) error {
	return a
}
func (n noneSqlDB) FoldErrorF(a func() error, f func(v *sql.DB) error) error {
	return a()
}

// map NoneSqlDB => OptionInt
func (n noneSqlDB) MapInt(f func(v *sql.DB) int) OptionInt {
	return noneInt{}
}

// fold NoneSqlDB => Optionint
func (n noneSqlDB) FoldInt(a int, f func(v *sql.DB) int) int {
	return a
}
func (n noneSqlDB) FoldIntF(a func() int, f func(v *sql.DB) int) int {
	return a()
}

// map NoneSqlDB => OptionNode
func (n noneSqlDB) MapNode(f func(v *sql.DB) Node) OptionNode {
	return noneNode{}
}

// fold NoneSqlDB => OptionNode
func (n noneSqlDB) FoldNode(a Node, f func(v *sql.DB) Node) Node {
	return a
}
func (n noneSqlDB) FoldNodeF(a func() Node, f func(v *sql.DB) Node) Node {
	return a()
}

// map NoneSqlDB => OptionSqlDB
func (n noneSqlDB) MapSqlDB(f func(v *sql.DB) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneSqlDB => Option*sql.DB
func (n noneSqlDB) FoldSqlDB(a *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return a
}
func (n noneSqlDB) FoldSqlDBF(a func() *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return a()
}

// map NoneSqlDB => OptionString
func (n noneSqlDB) MapString(f func(v *sql.DB) string) OptionString {
	return noneString{}
}

// fold NoneSqlDB => Optionstring
func (n noneSqlDB) FoldString(a string, f func(v *sql.DB) string) string {
	return a
}
func (n noneSqlDB) FoldStringF(a func() string, f func(v *sql.DB) string) string {
	return a()
}

// map NoneSqlDB => OptionUint64
func (n noneSqlDB) MapUint64(f func(v *sql.DB) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneSqlDB => Optionuint64
func (n noneSqlDB) FoldUint64(a uint64, f func(v *sql.DB) uint64) uint64 {
	return a
}
func (n noneSqlDB) FoldUint64F(a func() uint64, f func(v *sql.DB) uint64) uint64 {
	return a()
}

// end of nones

// some
type someSqlDB struct {
	v *sql.DB
}

func SomeSqlDB(v *sql.DB) someSqlDB {
	return someSqlDB{v}
}

// map NoneSqlDB
func (s someSqlDB) Map(f func(*sql.DB))             { f(s.v) }
func (s someSqlDB) FoldF(l func(), r func(*sql.DB)) { r(s.v) }

// map SoneSqlDB => OptionError
func (s someSqlDB) MapError(f func(v *sql.DB) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeSqlDB => error
func (s someSqlDB) FoldError(a error, f func(v *sql.DB) error) error {
	return f(s.v)
}
func (s someSqlDB) FoldErrorF(a func() error, f func(v *sql.DB) error) error {
	return f(s.v)
}

// map SoneSqlDB => OptionInt
func (s someSqlDB) MapInt(f func(v *sql.DB) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeSqlDB => int
func (s someSqlDB) FoldInt(a int, f func(v *sql.DB) int) int {
	return f(s.v)
}
func (s someSqlDB) FoldIntF(a func() int, f func(v *sql.DB) int) int {
	return f(s.v)
}

// map SoneSqlDB => OptionNode
func (s someSqlDB) MapNode(f func(v *sql.DB) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeSqlDB => Node
func (s someSqlDB) FoldNode(a Node, f func(v *sql.DB) Node) Node {
	return f(s.v)
}
func (s someSqlDB) FoldNodeF(a func() Node, f func(v *sql.DB) Node) Node {
	return f(s.v)
}

// map SoneSqlDB => OptionSqlDB
func (s someSqlDB) MapSqlDB(f func(v *sql.DB) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeSqlDB => *sql.DB
func (s someSqlDB) FoldSqlDB(a *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someSqlDB) FoldSqlDBF(a func() *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneSqlDB => OptionString
func (s someSqlDB) MapString(f func(v *sql.DB) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeSqlDB => string
func (s someSqlDB) FoldString(a string, f func(v *sql.DB) string) string {
	return f(s.v)
}
func (s someSqlDB) FoldStringF(a func() string, f func(v *sql.DB) string) string {
	return f(s.v)
}

// map SoneSqlDB => OptionUint64
func (s someSqlDB) MapUint64(f func(v *sql.DB) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeSqlDB => uint64
func (s someSqlDB) FoldUint64(a uint64, f func(v *sql.DB) uint64) uint64 {
	return f(s.v)
}
func (s someSqlDB) FoldUint64F(a func() uint64, f func(v *sql.DB) uint64) uint64 {
	return f(s.v)
}

// end of somes

// none
type noneString struct{}

func NoneString() OptionString {
	return noneString{}
}

// map NoneString
func (n noneString) Map(f func(string))             {}
func (n noneString) FoldF(l func(), r func(string)) { l() }

// map NoneString => OptionError
func (n noneString) MapError(f func(v string) error) OptionError {
	return noneError{}
}

// fold NoneString => Optionerror
func (n noneString) FoldError(a error, f func(v string) error) error {
	return a
}
func (n noneString) FoldErrorF(a func() error, f func(v string) error) error {
	return a()
}

// map NoneString => OptionInt
func (n noneString) MapInt(f func(v string) int) OptionInt {
	return noneInt{}
}

// fold NoneString => Optionint
func (n noneString) FoldInt(a int, f func(v string) int) int {
	return a
}
func (n noneString) FoldIntF(a func() int, f func(v string) int) int {
	return a()
}

// map NoneString => OptionNode
func (n noneString) MapNode(f func(v string) Node) OptionNode {
	return noneNode{}
}

// fold NoneString => OptionNode
func (n noneString) FoldNode(a Node, f func(v string) Node) Node {
	return a
}
func (n noneString) FoldNodeF(a func() Node, f func(v string) Node) Node {
	return a()
}

// map NoneString => OptionSqlDB
func (n noneString) MapSqlDB(f func(v string) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneString => Option*sql.DB
func (n noneString) FoldSqlDB(a *sql.DB, f func(v string) *sql.DB) *sql.DB {
	return a
}
func (n noneString) FoldSqlDBF(a func() *sql.DB, f func(v string) *sql.DB) *sql.DB {
	return a()
}

// map NoneString => OptionString
func (n noneString) MapString(f func(v string) string) OptionString {
	return noneString{}
}

// fold NoneString => Optionstring
func (n noneString) FoldString(a string, f func(v string) string) string {
	return a
}
func (n noneString) FoldStringF(a func() string, f func(v string) string) string {
	return a()
}

// map NoneString => OptionUint64
func (n noneString) MapUint64(f func(v string) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneString => Optionuint64
func (n noneString) FoldUint64(a uint64, f func(v string) uint64) uint64 {
	return a
}
func (n noneString) FoldUint64F(a func() uint64, f func(v string) uint64) uint64 {
	return a()
}

// end of nones

// some
type someString struct {
	v string
}

func SomeString(v string) someString {
	return someString{v}
}

// map NoneString
func (s someString) Map(f func(string))             { f(s.v) }
func (s someString) FoldF(l func(), r func(string)) { r(s.v) }

// map SoneString => OptionError
func (s someString) MapError(f func(v string) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeString => error
func (s someString) FoldError(a error, f func(v string) error) error {
	return f(s.v)
}
func (s someString) FoldErrorF(a func() error, f func(v string) error) error {
	return f(s.v)
}

// map SoneString => OptionInt
func (s someString) MapInt(f func(v string) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeString => int
func (s someString) FoldInt(a int, f func(v string) int) int {
	return f(s.v)
}
func (s someString) FoldIntF(a func() int, f func(v string) int) int {
	return f(s.v)
}

// map SoneString => OptionNode
func (s someString) MapNode(f func(v string) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeString => Node
func (s someString) FoldNode(a Node, f func(v string) Node) Node {
	return f(s.v)
}
func (s someString) FoldNodeF(a func() Node, f func(v string) Node) Node {
	return f(s.v)
}

// map SoneString => OptionSqlDB
func (s someString) MapSqlDB(f func(v string) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeString => *sql.DB
func (s someString) FoldSqlDB(a *sql.DB, f func(v string) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someString) FoldSqlDBF(a func() *sql.DB, f func(v string) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneString => OptionString
func (s someString) MapString(f func(v string) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeString => string
func (s someString) FoldString(a string, f func(v string) string) string {
	return f(s.v)
}
func (s someString) FoldStringF(a func() string, f func(v string) string) string {
	return f(s.v)
}

// map SoneString => OptionUint64
func (s someString) MapUint64(f func(v string) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeString => uint64
func (s someString) FoldUint64(a uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}
func (s someString) FoldUint64F(a func() uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}

// end of somes

// none
type noneUint64 struct{}

func NoneUint64() OptionUint64 {
	return noneUint64{}
}

// map NoneUint64
func (n noneUint64) Map(f func(uint64))             {}
func (n noneUint64) FoldF(l func(), r func(uint64)) { l() }

// map NoneUint64 => OptionError
func (n noneUint64) MapError(f func(v uint64) error) OptionError {
	return noneError{}
}

// fold NoneUint64 => Optionerror
func (n noneUint64) FoldError(a error, f func(v uint64) error) error {
	return a
}
func (n noneUint64) FoldErrorF(a func() error, f func(v uint64) error) error {
	return a()
}

// map NoneUint64 => OptionInt
func (n noneUint64) MapInt(f func(v uint64) int) OptionInt {
	return noneInt{}
}

// fold NoneUint64 => Optionint
func (n noneUint64) FoldInt(a int, f func(v uint64) int) int {
	return a
}
func (n noneUint64) FoldIntF(a func() int, f func(v uint64) int) int {
	return a()
}

// map NoneUint64 => OptionNode
func (n noneUint64) MapNode(f func(v uint64) Node) OptionNode {
	return noneNode{}
}

// fold NoneUint64 => OptionNode
func (n noneUint64) FoldNode(a Node, f func(v uint64) Node) Node {
	return a
}
func (n noneUint64) FoldNodeF(a func() Node, f func(v uint64) Node) Node {
	return a()
}

// map NoneUint64 => OptionSqlDB
func (n noneUint64) MapSqlDB(f func(v uint64) *sql.DB) OptionSqlDB {
	return noneSqlDB{}
}

// fold NoneUint64 => Option*sql.DB
func (n noneUint64) FoldSqlDB(a *sql.DB, f func(v uint64) *sql.DB) *sql.DB {
	return a
}
func (n noneUint64) FoldSqlDBF(a func() *sql.DB, f func(v uint64) *sql.DB) *sql.DB {
	return a()
}

// map NoneUint64 => OptionString
func (n noneUint64) MapString(f func(v uint64) string) OptionString {
	return noneString{}
}

// fold NoneUint64 => Optionstring
func (n noneUint64) FoldString(a string, f func(v uint64) string) string {
	return a
}
func (n noneUint64) FoldStringF(a func() string, f func(v uint64) string) string {
	return a()
}

// map NoneUint64 => OptionUint64
func (n noneUint64) MapUint64(f func(v uint64) uint64) OptionUint64 {
	return noneUint64{}
}

// fold NoneUint64 => Optionuint64
func (n noneUint64) FoldUint64(a uint64, f func(v uint64) uint64) uint64 {
	return a
}
func (n noneUint64) FoldUint64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return a()
}

// end of nones

// some
type someUint64 struct {
	v uint64
}

func SomeUint64(v uint64) someUint64 {
	return someUint64{v}
}

// map NoneUint64
func (s someUint64) Map(f func(uint64))             { f(s.v) }
func (s someUint64) FoldF(l func(), r func(uint64)) { r(s.v) }

// map SoneUint64 => OptionError
func (s someUint64) MapError(f func(v uint64) error) OptionError {
	return SomeError(f(s.v))
}

// fold SomeUint64 => error
func (s someUint64) FoldError(a error, f func(v uint64) error) error {
	return f(s.v)
}
func (s someUint64) FoldErrorF(a func() error, f func(v uint64) error) error {
	return f(s.v)
}

// map SoneUint64 => OptionInt
func (s someUint64) MapInt(f func(v uint64) int) OptionInt {
	return SomeInt(f(s.v))
}

// fold SomeUint64 => int
func (s someUint64) FoldInt(a int, f func(v uint64) int) int {
	return f(s.v)
}
func (s someUint64) FoldIntF(a func() int, f func(v uint64) int) int {
	return f(s.v)
}

// map SoneUint64 => OptionNode
func (s someUint64) MapNode(f func(v uint64) Node) OptionNode {
	return SomeNode(f(s.v))
}

// fold SomeUint64 => Node
func (s someUint64) FoldNode(a Node, f func(v uint64) Node) Node {
	return f(s.v)
}
func (s someUint64) FoldNodeF(a func() Node, f func(v uint64) Node) Node {
	return f(s.v)
}

// map SoneUint64 => OptionSqlDB
func (s someUint64) MapSqlDB(f func(v uint64) *sql.DB) OptionSqlDB {
	return SomeSqlDB(f(s.v))
}

// fold SomeUint64 => *sql.DB
func (s someUint64) FoldSqlDB(a *sql.DB, f func(v uint64) *sql.DB) *sql.DB {
	return f(s.v)
}
func (s someUint64) FoldSqlDBF(a func() *sql.DB, f func(v uint64) *sql.DB) *sql.DB {
	return f(s.v)
}

// map SoneUint64 => OptionString
func (s someUint64) MapString(f func(v uint64) string) OptionString {
	return SomeString(f(s.v))
}

// fold SomeUint64 => string
func (s someUint64) FoldString(a string, f func(v uint64) string) string {
	return f(s.v)
}
func (s someUint64) FoldStringF(a func() string, f func(v uint64) string) string {
	return f(s.v)
}

// map SoneUint64 => OptionUint64
func (s someUint64) MapUint64(f func(v uint64) uint64) OptionUint64 {
	return SomeUint64(f(s.v))
}

// fold SomeUint64 => uint64
func (s someUint64) FoldUint64(a uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}
func (s someUint64) FoldUint64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}

// end of somes

// end of everything
