// Code generated by go generate on 2018-04-24 08:44:51.647132155 +0000 UTC
package main

// imports 
import (
	"time"
)




// OptionError 
type OptionError interface {
	Map(func(error))
	FoldF(func(), func(error))

	MapError(func(error) error) OptionError
	FoldError(error, func(error) error) error
	FoldErrorF(func() error, func(error) error) error

	MapInt(func(error) int) OptionInt
	FoldInt(int, func(error) int) int
	FoldIntF(func() int, func(error) int) int

	MapNode(func(error) Node) OptionNode
	FoldNode(Node, func(error) Node) Node
	FoldNodeF(func() Node, func(error) Node) Node

	MapSerializedPart(func(error) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(error) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(error) SerializedPart) SerializedPart

	MapString(func(error) string) OptionString
	FoldString(string, func(error) string) string
	FoldStringF(func() string, func(error) string) string

	MapTime(func(error) time.Time) OptionTime
	FoldTime(time.Time, func(error) time.Time) time.Time
	FoldTimeF(func() time.Time, func(error) time.Time) time.Time

	MapUInt(func(error) uint) OptionUInt
	FoldUInt(uint, func(error) uint) uint
	FoldUIntF(func() uint, func(error) uint) uint

	MapUInt64(func(error) uint64) OptionUInt64
	FoldUInt64(uint64, func(error) uint64) uint64
	FoldUInt64F(func() uint64, func(error) uint64) uint64
 
}

// OptionInt 
type OptionInt interface {
	Map(func(int))
	FoldF(func(), func(int))

	MapError(func(int) error) OptionError
	FoldError(error, func(int) error) error
	FoldErrorF(func() error, func(int) error) error

	MapInt(func(int) int) OptionInt
	FoldInt(int, func(int) int) int
	FoldIntF(func() int, func(int) int) int

	MapNode(func(int) Node) OptionNode
	FoldNode(Node, func(int) Node) Node
	FoldNodeF(func() Node, func(int) Node) Node

	MapSerializedPart(func(int) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(int) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(int) SerializedPart) SerializedPart

	MapString(func(int) string) OptionString
	FoldString(string, func(int) string) string
	FoldStringF(func() string, func(int) string) string

	MapTime(func(int) time.Time) OptionTime
	FoldTime(time.Time, func(int) time.Time) time.Time
	FoldTimeF(func() time.Time, func(int) time.Time) time.Time

	MapUInt(func(int) uint) OptionUInt
	FoldUInt(uint, func(int) uint) uint
	FoldUIntF(func() uint, func(int) uint) uint

	MapUInt64(func(int) uint64) OptionUInt64
	FoldUInt64(uint64, func(int) uint64) uint64
	FoldUInt64F(func() uint64, func(int) uint64) uint64
 
}

// OptionNode 
type OptionNode interface {
	Map(func(Node))
	FoldF(func(), func(Node))

	MapError(func(Node) error) OptionError
	FoldError(error, func(Node) error) error
	FoldErrorF(func() error, func(Node) error) error

	MapInt(func(Node) int) OptionInt
	FoldInt(int, func(Node) int) int
	FoldIntF(func() int, func(Node) int) int

	MapNode(func(Node) Node) OptionNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func() Node, func(Node) Node) Node

	MapSerializedPart(func(Node) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(Node) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(Node) SerializedPart) SerializedPart

	MapString(func(Node) string) OptionString
	FoldString(string, func(Node) string) string
	FoldStringF(func() string, func(Node) string) string

	MapTime(func(Node) time.Time) OptionTime
	FoldTime(time.Time, func(Node) time.Time) time.Time
	FoldTimeF(func() time.Time, func(Node) time.Time) time.Time

	MapUInt(func(Node) uint) OptionUInt
	FoldUInt(uint, func(Node) uint) uint
	FoldUIntF(func() uint, func(Node) uint) uint

	MapUInt64(func(Node) uint64) OptionUInt64
	FoldUInt64(uint64, func(Node) uint64) uint64
	FoldUInt64F(func() uint64, func(Node) uint64) uint64
 
}

// OptionSerializedPart 
type OptionSerializedPart interface {
	Map(func(SerializedPart))
	FoldF(func(), func(SerializedPart))

	MapError(func(SerializedPart) error) OptionError
	FoldError(error, func(SerializedPart) error) error
	FoldErrorF(func() error, func(SerializedPart) error) error

	MapInt(func(SerializedPart) int) OptionInt
	FoldInt(int, func(SerializedPart) int) int
	FoldIntF(func() int, func(SerializedPart) int) int

	MapNode(func(SerializedPart) Node) OptionNode
	FoldNode(Node, func(SerializedPart) Node) Node
	FoldNodeF(func() Node, func(SerializedPart) Node) Node

	MapSerializedPart(func(SerializedPart) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(SerializedPart) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(SerializedPart) SerializedPart) SerializedPart

	MapString(func(SerializedPart) string) OptionString
	FoldString(string, func(SerializedPart) string) string
	FoldStringF(func() string, func(SerializedPart) string) string

	MapTime(func(SerializedPart) time.Time) OptionTime
	FoldTime(time.Time, func(SerializedPart) time.Time) time.Time
	FoldTimeF(func() time.Time, func(SerializedPart) time.Time) time.Time

	MapUInt(func(SerializedPart) uint) OptionUInt
	FoldUInt(uint, func(SerializedPart) uint) uint
	FoldUIntF(func() uint, func(SerializedPart) uint) uint

	MapUInt64(func(SerializedPart) uint64) OptionUInt64
	FoldUInt64(uint64, func(SerializedPart) uint64) uint64
	FoldUInt64F(func() uint64, func(SerializedPart) uint64) uint64
 
}

// OptionString 
type OptionString interface {
	Map(func(string))
	FoldF(func(), func(string))

	MapError(func(string) error) OptionError
	FoldError(error, func(string) error) error
	FoldErrorF(func() error, func(string) error) error

	MapInt(func(string) int) OptionInt
	FoldInt(int, func(string) int) int
	FoldIntF(func() int, func(string) int) int

	MapNode(func(string) Node) OptionNode
	FoldNode(Node, func(string) Node) Node
	FoldNodeF(func() Node, func(string) Node) Node

	MapSerializedPart(func(string) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(string) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(string) SerializedPart) SerializedPart

	MapString(func(string) string) OptionString
	FoldString(string, func(string) string) string
	FoldStringF(func() string, func(string) string) string

	MapTime(func(string) time.Time) OptionTime
	FoldTime(time.Time, func(string) time.Time) time.Time
	FoldTimeF(func() time.Time, func(string) time.Time) time.Time

	MapUInt(func(string) uint) OptionUInt
	FoldUInt(uint, func(string) uint) uint
	FoldUIntF(func() uint, func(string) uint) uint

	MapUInt64(func(string) uint64) OptionUInt64
	FoldUInt64(uint64, func(string) uint64) uint64
	FoldUInt64F(func() uint64, func(string) uint64) uint64
 
}

// OptionTime 
type OptionTime interface {
	Map(func(time.Time))
	FoldF(func(), func(time.Time))

	MapError(func(time.Time) error) OptionError
	FoldError(error, func(time.Time) error) error
	FoldErrorF(func() error, func(time.Time) error) error

	MapInt(func(time.Time) int) OptionInt
	FoldInt(int, func(time.Time) int) int
	FoldIntF(func() int, func(time.Time) int) int

	MapNode(func(time.Time) Node) OptionNode
	FoldNode(Node, func(time.Time) Node) Node
	FoldNodeF(func() Node, func(time.Time) Node) Node

	MapSerializedPart(func(time.Time) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(time.Time) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(time.Time) SerializedPart) SerializedPart

	MapString(func(time.Time) string) OptionString
	FoldString(string, func(time.Time) string) string
	FoldStringF(func() string, func(time.Time) string) string

	MapTime(func(time.Time) time.Time) OptionTime
	FoldTime(time.Time, func(time.Time) time.Time) time.Time
	FoldTimeF(func() time.Time, func(time.Time) time.Time) time.Time

	MapUInt(func(time.Time) uint) OptionUInt
	FoldUInt(uint, func(time.Time) uint) uint
	FoldUIntF(func() uint, func(time.Time) uint) uint

	MapUInt64(func(time.Time) uint64) OptionUInt64
	FoldUInt64(uint64, func(time.Time) uint64) uint64
	FoldUInt64F(func() uint64, func(time.Time) uint64) uint64
 
}

// OptionUInt 
type OptionUInt interface {
	Map(func(uint))
	FoldF(func(), func(uint))

	MapError(func(uint) error) OptionError
	FoldError(error, func(uint) error) error
	FoldErrorF(func() error, func(uint) error) error

	MapInt(func(uint) int) OptionInt
	FoldInt(int, func(uint) int) int
	FoldIntF(func() int, func(uint) int) int

	MapNode(func(uint) Node) OptionNode
	FoldNode(Node, func(uint) Node) Node
	FoldNodeF(func() Node, func(uint) Node) Node

	MapSerializedPart(func(uint) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(uint) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(uint) SerializedPart) SerializedPart

	MapString(func(uint) string) OptionString
	FoldString(string, func(uint) string) string
	FoldStringF(func() string, func(uint) string) string

	MapTime(func(uint) time.Time) OptionTime
	FoldTime(time.Time, func(uint) time.Time) time.Time
	FoldTimeF(func() time.Time, func(uint) time.Time) time.Time

	MapUInt(func(uint) uint) OptionUInt
	FoldUInt(uint, func(uint) uint) uint
	FoldUIntF(func() uint, func(uint) uint) uint

	MapUInt64(func(uint) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint) uint64) uint64
	FoldUInt64F(func() uint64, func(uint) uint64) uint64
 
}

// OptionUInt64 
type OptionUInt64 interface {
	Map(func(uint64))
	FoldF(func(), func(uint64))

	MapError(func(uint64) error) OptionError
	FoldError(error, func(uint64) error) error
	FoldErrorF(func() error, func(uint64) error) error

	MapInt(func(uint64) int) OptionInt
	FoldInt(int, func(uint64) int) int
	FoldIntF(func() int, func(uint64) int) int

	MapNode(func(uint64) Node) OptionNode
	FoldNode(Node, func(uint64) Node) Node
	FoldNodeF(func() Node, func(uint64) Node) Node

	MapSerializedPart(func(uint64) SerializedPart) OptionSerializedPart
	FoldSerializedPart(SerializedPart, func(uint64) SerializedPart) SerializedPart
	FoldSerializedPartF(func() SerializedPart, func(uint64) SerializedPart) SerializedPart

	MapString(func(uint64) string) OptionString
	FoldString(string, func(uint64) string) string
	FoldStringF(func() string, func(uint64) string) string

	MapTime(func(uint64) time.Time) OptionTime
	FoldTime(time.Time, func(uint64) time.Time) time.Time
	FoldTimeF(func() time.Time, func(uint64) time.Time) time.Time

	MapUInt(func(uint64) uint) OptionUInt
	FoldUInt(uint, func(uint64) uint) uint
	FoldUIntF(func() uint, func(uint64) uint) uint

	MapUInt64(func(uint64) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint64) uint64) uint64
	FoldUInt64F(func() uint64, func(uint64) uint64) uint64
 
}




func OptionErrorFrom(v error, err error) OptionError {
	if err != nil {
		return NoneError()
	}
	return SomeError(v)
}

func OptionIntFrom(v int, err error) OptionInt {
	if err != nil {
		return NoneInt()
	}
	return SomeInt(v)
}

func OptionNodeFrom(v Node, err error) OptionNode {
	if err != nil {
		return NoneNode()
	}
	return SomeNode(v)
}

func OptionSerializedPartFrom(v SerializedPart, err error) OptionSerializedPart {
	if err != nil {
		return NoneSerializedPart()
	}
	return SomeSerializedPart(v)
}

func OptionStringFrom(v string, err error) OptionString {
	if err != nil {
		return NoneString()
	}
	return SomeString(v)
}

func OptionTimeFrom(v time.Time, err error) OptionTime {
	if err != nil {
		return NoneTime()
	}
	return SomeTime(v)
}

func OptionUIntFrom(v uint, err error) OptionUInt {
	if err != nil {
		return NoneUInt()
	}
	return SomeUInt(v)
}

func OptionUInt64From(v uint64, err error) OptionUInt64 {
	if err != nil {
		return NoneUInt64()
	}
	return SomeUInt64(v)
}




type noneError struct{}

func NoneError() OptionError {
	return noneError{}
}

func (n noneError) Map(f func(error)) {}

func (n noneError) FoldF(l func(), r func(error)) { l() }


func (n noneError) MapError(f func(v error) error) OptionError {
	return noneError{}
}

func (n noneError) FoldError(a error, f func(v error) error) error {
	return a
}

func (n noneError) FoldErrorF(a func() error, f func(v error) error) error {
	return a()
}

func (n noneError) MapInt(f func(v error) int) OptionInt {
	return noneInt{}
}

func (n noneError) FoldInt(a int, f func(v error) int) int {
	return a
}

func (n noneError) FoldIntF(a func() int, f func(v error) int) int {
	return a()
}

func (n noneError) MapNode(f func(v error) Node) OptionNode {
	return noneNode{}
}

func (n noneError) FoldNode(a Node, f func(v error) Node) Node {
	return a
}

func (n noneError) FoldNodeF(a func() Node, f func(v error) Node) Node {
	return a()
}

func (n noneError) MapSerializedPart(f func(v error) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneError) FoldSerializedPart(a SerializedPart, f func(v error) SerializedPart) SerializedPart {
	return a
}

func (n noneError) FoldSerializedPartF(a func() SerializedPart, f func(v error) SerializedPart) SerializedPart {
	return a()
}

func (n noneError) MapString(f func(v error) string) OptionString {
	return noneString{}
}

func (n noneError) FoldString(a string, f func(v error) string) string {
	return a
}

func (n noneError) FoldStringF(a func() string, f func(v error) string) string {
	return a()
}

func (n noneError) MapTime(f func(v error) time.Time) OptionTime {
	return noneTime{}
}

func (n noneError) FoldTime(a time.Time, f func(v error) time.Time) time.Time {
	return a
}

func (n noneError) FoldTimeF(a func() time.Time, f func(v error) time.Time) time.Time {
	return a()
}

func (n noneError) MapUInt(f func(v error) uint) OptionUInt {
	return noneUInt{}
}

func (n noneError) FoldUInt(a uint, f func(v error) uint) uint {
	return a
}

func (n noneError) FoldUIntF(a func() uint, f func(v error) uint) uint {
	return a()
}

func (n noneError) MapUInt64(f func(v error) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneError) FoldUInt64(a uint64, f func(v error) uint64) uint64 {
	return a
}

func (n noneError) FoldUInt64F(a func() uint64, f func(v error) uint64) uint64 {
	return a()
}



type someError struct {
	v error
}

func SomeError(v error) OptionError {
	return someError{v}
}

func (s someError) Map(f func(error)) { f(s.v) }

func (s someError) FoldF(l func(), r func(error)) { r(s.v) }


func (s someError) MapError(f func(v error) error) OptionError {
	return SomeError(f(s.v))
}

func (s someError) FoldError(a error, f func(v error) error) error {
	return f(s.v)
}

func (s someError) FoldErrorF(a func() error, f func(v error) error) error {
	return f(s.v)
}


func (s someError) MapInt(f func(v error) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someError) FoldInt(a int, f func(v error) int) int {
	return f(s.v)
}

func (s someError) FoldIntF(a func() int, f func(v error) int) int {
	return f(s.v)
}


func (s someError) MapNode(f func(v error) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someError) FoldNode(a Node, f func(v error) Node) Node {
	return f(s.v)
}

func (s someError) FoldNodeF(a func() Node, f func(v error) Node) Node {
	return f(s.v)
}


func (s someError) MapSerializedPart(f func(v error) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someError) FoldSerializedPart(a SerializedPart, f func(v error) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someError) FoldSerializedPartF(a func() SerializedPart, f func(v error) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someError) MapString(f func(v error) string) OptionString {
	return SomeString(f(s.v))
}

func (s someError) FoldString(a string, f func(v error) string) string {
	return f(s.v)
}

func (s someError) FoldStringF(a func() string, f func(v error) string) string {
	return f(s.v)
}


func (s someError) MapTime(f func(v error) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someError) FoldTime(a time.Time, f func(v error) time.Time) time.Time {
	return f(s.v)
}

func (s someError) FoldTimeF(a func() time.Time, f func(v error) time.Time) time.Time {
	return f(s.v)
}


func (s someError) MapUInt(f func(v error) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someError) FoldUInt(a uint, f func(v error) uint) uint {
	return f(s.v)
}

func (s someError) FoldUIntF(a func() uint, f func(v error) uint) uint {
	return f(s.v)
}


func (s someError) MapUInt64(f func(v error) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someError) FoldUInt64(a uint64, f func(v error) uint64) uint64 {
	return f(s.v)
}

func (s someError) FoldUInt64F(a func() uint64, f func(v error) uint64) uint64 {
	return f(s.v)
}




type noneInt struct{}

func NoneInt() OptionInt {
	return noneInt{}
}

func (n noneInt) Map(f func(int)) {}

func (n noneInt) FoldF(l func(), r func(int)) { l() }


func (n noneInt) MapError(f func(v int) error) OptionError {
	return noneError{}
}

func (n noneInt) FoldError(a error, f func(v int) error) error {
	return a
}

func (n noneInt) FoldErrorF(a func() error, f func(v int) error) error {
	return a()
}

func (n noneInt) MapInt(f func(v int) int) OptionInt {
	return noneInt{}
}

func (n noneInt) FoldInt(a int, f func(v int) int) int {
	return a
}

func (n noneInt) FoldIntF(a func() int, f func(v int) int) int {
	return a()
}

func (n noneInt) MapNode(f func(v int) Node) OptionNode {
	return noneNode{}
}

func (n noneInt) FoldNode(a Node, f func(v int) Node) Node {
	return a
}

func (n noneInt) FoldNodeF(a func() Node, f func(v int) Node) Node {
	return a()
}

func (n noneInt) MapSerializedPart(f func(v int) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneInt) FoldSerializedPart(a SerializedPart, f func(v int) SerializedPart) SerializedPart {
	return a
}

func (n noneInt) FoldSerializedPartF(a func() SerializedPart, f func(v int) SerializedPart) SerializedPart {
	return a()
}

func (n noneInt) MapString(f func(v int) string) OptionString {
	return noneString{}
}

func (n noneInt) FoldString(a string, f func(v int) string) string {
	return a
}

func (n noneInt) FoldStringF(a func() string, f func(v int) string) string {
	return a()
}

func (n noneInt) MapTime(f func(v int) time.Time) OptionTime {
	return noneTime{}
}

func (n noneInt) FoldTime(a time.Time, f func(v int) time.Time) time.Time {
	return a
}

func (n noneInt) FoldTimeF(a func() time.Time, f func(v int) time.Time) time.Time {
	return a()
}

func (n noneInt) MapUInt(f func(v int) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt) FoldUInt(a uint, f func(v int) uint) uint {
	return a
}

func (n noneInt) FoldUIntF(a func() uint, f func(v int) uint) uint {
	return a()
}

func (n noneInt) MapUInt64(f func(v int) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt) FoldUInt64(a uint64, f func(v int) uint64) uint64 {
	return a
}

func (n noneInt) FoldUInt64F(a func() uint64, f func(v int) uint64) uint64 {
	return a()
}



type someInt struct {
	v int
}

func SomeInt(v int) OptionInt {
	return someInt{v}
}

func (s someInt) Map(f func(int)) { f(s.v) }

func (s someInt) FoldF(l func(), r func(int)) { r(s.v) }


func (s someInt) MapError(f func(v int) error) OptionError {
	return SomeError(f(s.v))
}

func (s someInt) FoldError(a error, f func(v int) error) error {
	return f(s.v)
}

func (s someInt) FoldErrorF(a func() error, f func(v int) error) error {
	return f(s.v)
}


func (s someInt) MapInt(f func(v int) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt) FoldInt(a int, f func(v int) int) int {
	return f(s.v)
}

func (s someInt) FoldIntF(a func() int, f func(v int) int) int {
	return f(s.v)
}


func (s someInt) MapNode(f func(v int) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someInt) FoldNode(a Node, f func(v int) Node) Node {
	return f(s.v)
}

func (s someInt) FoldNodeF(a func() Node, f func(v int) Node) Node {
	return f(s.v)
}


func (s someInt) MapSerializedPart(f func(v int) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someInt) FoldSerializedPart(a SerializedPart, f func(v int) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someInt) FoldSerializedPartF(a func() SerializedPart, f func(v int) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someInt) MapString(f func(v int) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt) FoldString(a string, f func(v int) string) string {
	return f(s.v)
}

func (s someInt) FoldStringF(a func() string, f func(v int) string) string {
	return f(s.v)
}


func (s someInt) MapTime(f func(v int) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someInt) FoldTime(a time.Time, f func(v int) time.Time) time.Time {
	return f(s.v)
}

func (s someInt) FoldTimeF(a func() time.Time, f func(v int) time.Time) time.Time {
	return f(s.v)
}


func (s someInt) MapUInt(f func(v int) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt) FoldUInt(a uint, f func(v int) uint) uint {
	return f(s.v)
}

func (s someInt) FoldUIntF(a func() uint, f func(v int) uint) uint {
	return f(s.v)
}


func (s someInt) MapUInt64(f func(v int) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt) FoldUInt64(a uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}

func (s someInt) FoldUInt64F(a func() uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}




type noneNode struct{}

func NoneNode() OptionNode {
	return noneNode{}
}

func (n noneNode) Map(f func(Node)) {}

func (n noneNode) FoldF(l func(), r func(Node)) { l() }


func (n noneNode) MapError(f func(v Node) error) OptionError {
	return noneError{}
}

func (n noneNode) FoldError(a error, f func(v Node) error) error {
	return a
}

func (n noneNode) FoldErrorF(a func() error, f func(v Node) error) error {
	return a()
}

func (n noneNode) MapInt(f func(v Node) int) OptionInt {
	return noneInt{}
}

func (n noneNode) FoldInt(a int, f func(v Node) int) int {
	return a
}

func (n noneNode) FoldIntF(a func() int, f func(v Node) int) int {
	return a()
}

func (n noneNode) MapNode(f func(v Node) Node) OptionNode {
	return noneNode{}
}

func (n noneNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}

func (n noneNode) FoldNodeF(a func() Node, f func(v Node) Node) Node {
	return a()
}

func (n noneNode) MapSerializedPart(f func(v Node) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneNode) FoldSerializedPart(a SerializedPart, f func(v Node) SerializedPart) SerializedPart {
	return a
}

func (n noneNode) FoldSerializedPartF(a func() SerializedPart, f func(v Node) SerializedPart) SerializedPart {
	return a()
}

func (n noneNode) MapString(f func(v Node) string) OptionString {
	return noneString{}
}

func (n noneNode) FoldString(a string, f func(v Node) string) string {
	return a
}

func (n noneNode) FoldStringF(a func() string, f func(v Node) string) string {
	return a()
}

func (n noneNode) MapTime(f func(v Node) time.Time) OptionTime {
	return noneTime{}
}

func (n noneNode) FoldTime(a time.Time, f func(v Node) time.Time) time.Time {
	return a
}

func (n noneNode) FoldTimeF(a func() time.Time, f func(v Node) time.Time) time.Time {
	return a()
}

func (n noneNode) MapUInt(f func(v Node) uint) OptionUInt {
	return noneUInt{}
}

func (n noneNode) FoldUInt(a uint, f func(v Node) uint) uint {
	return a
}

func (n noneNode) FoldUIntF(a func() uint, f func(v Node) uint) uint {
	return a()
}

func (n noneNode) MapUInt64(f func(v Node) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneNode) FoldUInt64(a uint64, f func(v Node) uint64) uint64 {
	return a
}

func (n noneNode) FoldUInt64F(a func() uint64, f func(v Node) uint64) uint64 {
	return a()
}



type someNode struct {
	v Node
}

func SomeNode(v Node) OptionNode {
	return someNode{v}
}

func (s someNode) Map(f func(Node)) { f(s.v) }

func (s someNode) FoldF(l func(), r func(Node)) { r(s.v) }


func (s someNode) MapError(f func(v Node) error) OptionError {
	return SomeError(f(s.v))
}

func (s someNode) FoldError(a error, f func(v Node) error) error {
	return f(s.v)
}

func (s someNode) FoldErrorF(a func() error, f func(v Node) error) error {
	return f(s.v)
}


func (s someNode) MapInt(f func(v Node) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someNode) FoldInt(a int, f func(v Node) int) int {
	return f(s.v)
}

func (s someNode) FoldIntF(a func() int, f func(v Node) int) int {
	return f(s.v)
}


func (s someNode) MapNode(f func(v Node) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someNode) FoldNode(a Node, f func(v Node) Node) Node {
	return f(s.v)
}

func (s someNode) FoldNodeF(a func() Node, f func(v Node) Node) Node {
	return f(s.v)
}


func (s someNode) MapSerializedPart(f func(v Node) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someNode) FoldSerializedPart(a SerializedPart, f func(v Node) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someNode) FoldSerializedPartF(a func() SerializedPart, f func(v Node) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someNode) MapString(f func(v Node) string) OptionString {
	return SomeString(f(s.v))
}

func (s someNode) FoldString(a string, f func(v Node) string) string {
	return f(s.v)
}

func (s someNode) FoldStringF(a func() string, f func(v Node) string) string {
	return f(s.v)
}


func (s someNode) MapTime(f func(v Node) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someNode) FoldTime(a time.Time, f func(v Node) time.Time) time.Time {
	return f(s.v)
}

func (s someNode) FoldTimeF(a func() time.Time, f func(v Node) time.Time) time.Time {
	return f(s.v)
}


func (s someNode) MapUInt(f func(v Node) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someNode) FoldUInt(a uint, f func(v Node) uint) uint {
	return f(s.v)
}

func (s someNode) FoldUIntF(a func() uint, f func(v Node) uint) uint {
	return f(s.v)
}


func (s someNode) MapUInt64(f func(v Node) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someNode) FoldUInt64(a uint64, f func(v Node) uint64) uint64 {
	return f(s.v)
}

func (s someNode) FoldUInt64F(a func() uint64, f func(v Node) uint64) uint64 {
	return f(s.v)
}




type noneSerializedPart struct{}

func NoneSerializedPart() OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneSerializedPart) Map(f func(SerializedPart)) {}

func (n noneSerializedPart) FoldF(l func(), r func(SerializedPart)) { l() }


func (n noneSerializedPart) MapError(f func(v SerializedPart) error) OptionError {
	return noneError{}
}

func (n noneSerializedPart) FoldError(a error, f func(v SerializedPart) error) error {
	return a
}

func (n noneSerializedPart) FoldErrorF(a func() error, f func(v SerializedPart) error) error {
	return a()
}

func (n noneSerializedPart) MapInt(f func(v SerializedPart) int) OptionInt {
	return noneInt{}
}

func (n noneSerializedPart) FoldInt(a int, f func(v SerializedPart) int) int {
	return a
}

func (n noneSerializedPart) FoldIntF(a func() int, f func(v SerializedPart) int) int {
	return a()
}

func (n noneSerializedPart) MapNode(f func(v SerializedPart) Node) OptionNode {
	return noneNode{}
}

func (n noneSerializedPart) FoldNode(a Node, f func(v SerializedPart) Node) Node {
	return a
}

func (n noneSerializedPart) FoldNodeF(a func() Node, f func(v SerializedPart) Node) Node {
	return a()
}

func (n noneSerializedPart) MapSerializedPart(f func(v SerializedPart) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneSerializedPart) FoldSerializedPart(a SerializedPart, f func(v SerializedPart) SerializedPart) SerializedPart {
	return a
}

func (n noneSerializedPart) FoldSerializedPartF(a func() SerializedPart, f func(v SerializedPart) SerializedPart) SerializedPart {
	return a()
}

func (n noneSerializedPart) MapString(f func(v SerializedPart) string) OptionString {
	return noneString{}
}

func (n noneSerializedPart) FoldString(a string, f func(v SerializedPart) string) string {
	return a
}

func (n noneSerializedPart) FoldStringF(a func() string, f func(v SerializedPart) string) string {
	return a()
}

func (n noneSerializedPart) MapTime(f func(v SerializedPart) time.Time) OptionTime {
	return noneTime{}
}

func (n noneSerializedPart) FoldTime(a time.Time, f func(v SerializedPart) time.Time) time.Time {
	return a
}

func (n noneSerializedPart) FoldTimeF(a func() time.Time, f func(v SerializedPart) time.Time) time.Time {
	return a()
}

func (n noneSerializedPart) MapUInt(f func(v SerializedPart) uint) OptionUInt {
	return noneUInt{}
}

func (n noneSerializedPart) FoldUInt(a uint, f func(v SerializedPart) uint) uint {
	return a
}

func (n noneSerializedPart) FoldUIntF(a func() uint, f func(v SerializedPart) uint) uint {
	return a()
}

func (n noneSerializedPart) MapUInt64(f func(v SerializedPart) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneSerializedPart) FoldUInt64(a uint64, f func(v SerializedPart) uint64) uint64 {
	return a
}

func (n noneSerializedPart) FoldUInt64F(a func() uint64, f func(v SerializedPart) uint64) uint64 {
	return a()
}



type someSerializedPart struct {
	v SerializedPart
}

func SomeSerializedPart(v SerializedPart) OptionSerializedPart {
	return someSerializedPart{v}
}

func (s someSerializedPart) Map(f func(SerializedPart)) { f(s.v) }

func (s someSerializedPart) FoldF(l func(), r func(SerializedPart)) { r(s.v) }


func (s someSerializedPart) MapError(f func(v SerializedPart) error) OptionError {
	return SomeError(f(s.v))
}

func (s someSerializedPart) FoldError(a error, f func(v SerializedPart) error) error {
	return f(s.v)
}

func (s someSerializedPart) FoldErrorF(a func() error, f func(v SerializedPart) error) error {
	return f(s.v)
}


func (s someSerializedPart) MapInt(f func(v SerializedPart) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someSerializedPart) FoldInt(a int, f func(v SerializedPart) int) int {
	return f(s.v)
}

func (s someSerializedPart) FoldIntF(a func() int, f func(v SerializedPart) int) int {
	return f(s.v)
}


func (s someSerializedPart) MapNode(f func(v SerializedPart) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someSerializedPart) FoldNode(a Node, f func(v SerializedPart) Node) Node {
	return f(s.v)
}

func (s someSerializedPart) FoldNodeF(a func() Node, f func(v SerializedPart) Node) Node {
	return f(s.v)
}


func (s someSerializedPart) MapSerializedPart(f func(v SerializedPart) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someSerializedPart) FoldSerializedPart(a SerializedPart, f func(v SerializedPart) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someSerializedPart) FoldSerializedPartF(a func() SerializedPart, f func(v SerializedPart) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someSerializedPart) MapString(f func(v SerializedPart) string) OptionString {
	return SomeString(f(s.v))
}

func (s someSerializedPart) FoldString(a string, f func(v SerializedPart) string) string {
	return f(s.v)
}

func (s someSerializedPart) FoldStringF(a func() string, f func(v SerializedPart) string) string {
	return f(s.v)
}


func (s someSerializedPart) MapTime(f func(v SerializedPart) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someSerializedPart) FoldTime(a time.Time, f func(v SerializedPart) time.Time) time.Time {
	return f(s.v)
}

func (s someSerializedPart) FoldTimeF(a func() time.Time, f func(v SerializedPart) time.Time) time.Time {
	return f(s.v)
}


func (s someSerializedPart) MapUInt(f func(v SerializedPart) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someSerializedPart) FoldUInt(a uint, f func(v SerializedPart) uint) uint {
	return f(s.v)
}

func (s someSerializedPart) FoldUIntF(a func() uint, f func(v SerializedPart) uint) uint {
	return f(s.v)
}


func (s someSerializedPart) MapUInt64(f func(v SerializedPart) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someSerializedPart) FoldUInt64(a uint64, f func(v SerializedPart) uint64) uint64 {
	return f(s.v)
}

func (s someSerializedPart) FoldUInt64F(a func() uint64, f func(v SerializedPart) uint64) uint64 {
	return f(s.v)
}




type noneString struct{}

func NoneString() OptionString {
	return noneString{}
}

func (n noneString) Map(f func(string)) {}

func (n noneString) FoldF(l func(), r func(string)) { l() }


func (n noneString) MapError(f func(v string) error) OptionError {
	return noneError{}
}

func (n noneString) FoldError(a error, f func(v string) error) error {
	return a
}

func (n noneString) FoldErrorF(a func() error, f func(v string) error) error {
	return a()
}

func (n noneString) MapInt(f func(v string) int) OptionInt {
	return noneInt{}
}

func (n noneString) FoldInt(a int, f func(v string) int) int {
	return a
}

func (n noneString) FoldIntF(a func() int, f func(v string) int) int {
	return a()
}

func (n noneString) MapNode(f func(v string) Node) OptionNode {
	return noneNode{}
}

func (n noneString) FoldNode(a Node, f func(v string) Node) Node {
	return a
}

func (n noneString) FoldNodeF(a func() Node, f func(v string) Node) Node {
	return a()
}

func (n noneString) MapSerializedPart(f func(v string) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneString) FoldSerializedPart(a SerializedPart, f func(v string) SerializedPart) SerializedPart {
	return a
}

func (n noneString) FoldSerializedPartF(a func() SerializedPart, f func(v string) SerializedPart) SerializedPart {
	return a()
}

func (n noneString) MapString(f func(v string) string) OptionString {
	return noneString{}
}

func (n noneString) FoldString(a string, f func(v string) string) string {
	return a
}

func (n noneString) FoldStringF(a func() string, f func(v string) string) string {
	return a()
}

func (n noneString) MapTime(f func(v string) time.Time) OptionTime {
	return noneTime{}
}

func (n noneString) FoldTime(a time.Time, f func(v string) time.Time) time.Time {
	return a
}

func (n noneString) FoldTimeF(a func() time.Time, f func(v string) time.Time) time.Time {
	return a()
}

func (n noneString) MapUInt(f func(v string) uint) OptionUInt {
	return noneUInt{}
}

func (n noneString) FoldUInt(a uint, f func(v string) uint) uint {
	return a
}

func (n noneString) FoldUIntF(a func() uint, f func(v string) uint) uint {
	return a()
}

func (n noneString) MapUInt64(f func(v string) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneString) FoldUInt64(a uint64, f func(v string) uint64) uint64 {
	return a
}

func (n noneString) FoldUInt64F(a func() uint64, f func(v string) uint64) uint64 {
	return a()
}



type someString struct {
	v string
}

func SomeString(v string) OptionString {
	return someString{v}
}

func (s someString) Map(f func(string)) { f(s.v) }

func (s someString) FoldF(l func(), r func(string)) { r(s.v) }


func (s someString) MapError(f func(v string) error) OptionError {
	return SomeError(f(s.v))
}

func (s someString) FoldError(a error, f func(v string) error) error {
	return f(s.v)
}

func (s someString) FoldErrorF(a func() error, f func(v string) error) error {
	return f(s.v)
}


func (s someString) MapInt(f func(v string) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someString) FoldInt(a int, f func(v string) int) int {
	return f(s.v)
}

func (s someString) FoldIntF(a func() int, f func(v string) int) int {
	return f(s.v)
}


func (s someString) MapNode(f func(v string) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someString) FoldNode(a Node, f func(v string) Node) Node {
	return f(s.v)
}

func (s someString) FoldNodeF(a func() Node, f func(v string) Node) Node {
	return f(s.v)
}


func (s someString) MapSerializedPart(f func(v string) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someString) FoldSerializedPart(a SerializedPart, f func(v string) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someString) FoldSerializedPartF(a func() SerializedPart, f func(v string) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someString) MapString(f func(v string) string) OptionString {
	return SomeString(f(s.v))
}

func (s someString) FoldString(a string, f func(v string) string) string {
	return f(s.v)
}

func (s someString) FoldStringF(a func() string, f func(v string) string) string {
	return f(s.v)
}


func (s someString) MapTime(f func(v string) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someString) FoldTime(a time.Time, f func(v string) time.Time) time.Time {
	return f(s.v)
}

func (s someString) FoldTimeF(a func() time.Time, f func(v string) time.Time) time.Time {
	return f(s.v)
}


func (s someString) MapUInt(f func(v string) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someString) FoldUInt(a uint, f func(v string) uint) uint {
	return f(s.v)
}

func (s someString) FoldUIntF(a func() uint, f func(v string) uint) uint {
	return f(s.v)
}


func (s someString) MapUInt64(f func(v string) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someString) FoldUInt64(a uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}

func (s someString) FoldUInt64F(a func() uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}




type noneTime struct{}

func NoneTime() OptionTime {
	return noneTime{}
}

func (n noneTime) Map(f func(time.Time)) {}

func (n noneTime) FoldF(l func(), r func(time.Time)) { l() }


func (n noneTime) MapError(f func(v time.Time) error) OptionError {
	return noneError{}
}

func (n noneTime) FoldError(a error, f func(v time.Time) error) error {
	return a
}

func (n noneTime) FoldErrorF(a func() error, f func(v time.Time) error) error {
	return a()
}

func (n noneTime) MapInt(f func(v time.Time) int) OptionInt {
	return noneInt{}
}

func (n noneTime) FoldInt(a int, f func(v time.Time) int) int {
	return a
}

func (n noneTime) FoldIntF(a func() int, f func(v time.Time) int) int {
	return a()
}

func (n noneTime) MapNode(f func(v time.Time) Node) OptionNode {
	return noneNode{}
}

func (n noneTime) FoldNode(a Node, f func(v time.Time) Node) Node {
	return a
}

func (n noneTime) FoldNodeF(a func() Node, f func(v time.Time) Node) Node {
	return a()
}

func (n noneTime) MapSerializedPart(f func(v time.Time) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneTime) FoldSerializedPart(a SerializedPart, f func(v time.Time) SerializedPart) SerializedPart {
	return a
}

func (n noneTime) FoldSerializedPartF(a func() SerializedPart, f func(v time.Time) SerializedPart) SerializedPart {
	return a()
}

func (n noneTime) MapString(f func(v time.Time) string) OptionString {
	return noneString{}
}

func (n noneTime) FoldString(a string, f func(v time.Time) string) string {
	return a
}

func (n noneTime) FoldStringF(a func() string, f func(v time.Time) string) string {
	return a()
}

func (n noneTime) MapTime(f func(v time.Time) time.Time) OptionTime {
	return noneTime{}
}

func (n noneTime) FoldTime(a time.Time, f func(v time.Time) time.Time) time.Time {
	return a
}

func (n noneTime) FoldTimeF(a func() time.Time, f func(v time.Time) time.Time) time.Time {
	return a()
}

func (n noneTime) MapUInt(f func(v time.Time) uint) OptionUInt {
	return noneUInt{}
}

func (n noneTime) FoldUInt(a uint, f func(v time.Time) uint) uint {
	return a
}

func (n noneTime) FoldUIntF(a func() uint, f func(v time.Time) uint) uint {
	return a()
}

func (n noneTime) MapUInt64(f func(v time.Time) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneTime) FoldUInt64(a uint64, f func(v time.Time) uint64) uint64 {
	return a
}

func (n noneTime) FoldUInt64F(a func() uint64, f func(v time.Time) uint64) uint64 {
	return a()
}



type someTime struct {
	v time.Time
}

func SomeTime(v time.Time) OptionTime {
	return someTime{v}
}

func (s someTime) Map(f func(time.Time)) { f(s.v) }

func (s someTime) FoldF(l func(), r func(time.Time)) { r(s.v) }


func (s someTime) MapError(f func(v time.Time) error) OptionError {
	return SomeError(f(s.v))
}

func (s someTime) FoldError(a error, f func(v time.Time) error) error {
	return f(s.v)
}

func (s someTime) FoldErrorF(a func() error, f func(v time.Time) error) error {
	return f(s.v)
}


func (s someTime) MapInt(f func(v time.Time) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someTime) FoldInt(a int, f func(v time.Time) int) int {
	return f(s.v)
}

func (s someTime) FoldIntF(a func() int, f func(v time.Time) int) int {
	return f(s.v)
}


func (s someTime) MapNode(f func(v time.Time) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someTime) FoldNode(a Node, f func(v time.Time) Node) Node {
	return f(s.v)
}

func (s someTime) FoldNodeF(a func() Node, f func(v time.Time) Node) Node {
	return f(s.v)
}


func (s someTime) MapSerializedPart(f func(v time.Time) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someTime) FoldSerializedPart(a SerializedPart, f func(v time.Time) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someTime) FoldSerializedPartF(a func() SerializedPart, f func(v time.Time) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someTime) MapString(f func(v time.Time) string) OptionString {
	return SomeString(f(s.v))
}

func (s someTime) FoldString(a string, f func(v time.Time) string) string {
	return f(s.v)
}

func (s someTime) FoldStringF(a func() string, f func(v time.Time) string) string {
	return f(s.v)
}


func (s someTime) MapTime(f func(v time.Time) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someTime) FoldTime(a time.Time, f func(v time.Time) time.Time) time.Time {
	return f(s.v)
}

func (s someTime) FoldTimeF(a func() time.Time, f func(v time.Time) time.Time) time.Time {
	return f(s.v)
}


func (s someTime) MapUInt(f func(v time.Time) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someTime) FoldUInt(a uint, f func(v time.Time) uint) uint {
	return f(s.v)
}

func (s someTime) FoldUIntF(a func() uint, f func(v time.Time) uint) uint {
	return f(s.v)
}


func (s someTime) MapUInt64(f func(v time.Time) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someTime) FoldUInt64(a uint64, f func(v time.Time) uint64) uint64 {
	return f(s.v)
}

func (s someTime) FoldUInt64F(a func() uint64, f func(v time.Time) uint64) uint64 {
	return f(s.v)
}




type noneUInt struct{}

func NoneUInt() OptionUInt {
	return noneUInt{}
}

func (n noneUInt) Map(f func(uint)) {}

func (n noneUInt) FoldF(l func(), r func(uint)) { l() }


func (n noneUInt) MapError(f func(v uint) error) OptionError {
	return noneError{}
}

func (n noneUInt) FoldError(a error, f func(v uint) error) error {
	return a
}

func (n noneUInt) FoldErrorF(a func() error, f func(v uint) error) error {
	return a()
}

func (n noneUInt) MapInt(f func(v uint) int) OptionInt {
	return noneInt{}
}

func (n noneUInt) FoldInt(a int, f func(v uint) int) int {
	return a
}

func (n noneUInt) FoldIntF(a func() int, f func(v uint) int) int {
	return a()
}

func (n noneUInt) MapNode(f func(v uint) Node) OptionNode {
	return noneNode{}
}

func (n noneUInt) FoldNode(a Node, f func(v uint) Node) Node {
	return a
}

func (n noneUInt) FoldNodeF(a func() Node, f func(v uint) Node) Node {
	return a()
}

func (n noneUInt) MapSerializedPart(f func(v uint) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneUInt) FoldSerializedPart(a SerializedPart, f func(v uint) SerializedPart) SerializedPart {
	return a
}

func (n noneUInt) FoldSerializedPartF(a func() SerializedPart, f func(v uint) SerializedPart) SerializedPart {
	return a()
}

func (n noneUInt) MapString(f func(v uint) string) OptionString {
	return noneString{}
}

func (n noneUInt) FoldString(a string, f func(v uint) string) string {
	return a
}

func (n noneUInt) FoldStringF(a func() string, f func(v uint) string) string {
	return a()
}

func (n noneUInt) MapTime(f func(v uint) time.Time) OptionTime {
	return noneTime{}
}

func (n noneUInt) FoldTime(a time.Time, f func(v uint) time.Time) time.Time {
	return a
}

func (n noneUInt) FoldTimeF(a func() time.Time, f func(v uint) time.Time) time.Time {
	return a()
}

func (n noneUInt) MapUInt(f func(v uint) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt) FoldUInt(a uint, f func(v uint) uint) uint {
	return a
}

func (n noneUInt) FoldUIntF(a func() uint, f func(v uint) uint) uint {
	return a()
}

func (n noneUInt) MapUInt64(f func(v uint) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt) FoldUInt64(a uint64, f func(v uint) uint64) uint64 {
	return a
}

func (n noneUInt) FoldUInt64F(a func() uint64, f func(v uint) uint64) uint64 {
	return a()
}



type someUInt struct {
	v uint
}

func SomeUInt(v uint) OptionUInt {
	return someUInt{v}
}

func (s someUInt) Map(f func(uint)) { f(s.v) }

func (s someUInt) FoldF(l func(), r func(uint)) { r(s.v) }


func (s someUInt) MapError(f func(v uint) error) OptionError {
	return SomeError(f(s.v))
}

func (s someUInt) FoldError(a error, f func(v uint) error) error {
	return f(s.v)
}

func (s someUInt) FoldErrorF(a func() error, f func(v uint) error) error {
	return f(s.v)
}


func (s someUInt) MapInt(f func(v uint) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt) FoldInt(a int, f func(v uint) int) int {
	return f(s.v)
}

func (s someUInt) FoldIntF(a func() int, f func(v uint) int) int {
	return f(s.v)
}


func (s someUInt) MapNode(f func(v uint) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someUInt) FoldNode(a Node, f func(v uint) Node) Node {
	return f(s.v)
}

func (s someUInt) FoldNodeF(a func() Node, f func(v uint) Node) Node {
	return f(s.v)
}


func (s someUInt) MapSerializedPart(f func(v uint) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someUInt) FoldSerializedPart(a SerializedPart, f func(v uint) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someUInt) FoldSerializedPartF(a func() SerializedPart, f func(v uint) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someUInt) MapString(f func(v uint) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt) FoldString(a string, f func(v uint) string) string {
	return f(s.v)
}

func (s someUInt) FoldStringF(a func() string, f func(v uint) string) string {
	return f(s.v)
}


func (s someUInt) MapTime(f func(v uint) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someUInt) FoldTime(a time.Time, f func(v uint) time.Time) time.Time {
	return f(s.v)
}

func (s someUInt) FoldTimeF(a func() time.Time, f func(v uint) time.Time) time.Time {
	return f(s.v)
}


func (s someUInt) MapUInt(f func(v uint) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt) FoldUInt(a uint, f func(v uint) uint) uint {
	return f(s.v)
}

func (s someUInt) FoldUIntF(a func() uint, f func(v uint) uint) uint {
	return f(s.v)
}


func (s someUInt) MapUInt64(f func(v uint) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt) FoldUInt64(a uint64, f func(v uint) uint64) uint64 {
	return f(s.v)
}

func (s someUInt) FoldUInt64F(a func() uint64, f func(v uint) uint64) uint64 {
	return f(s.v)
}




type noneUInt64 struct{}

func NoneUInt64() OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt64) Map(f func(uint64)) {}

func (n noneUInt64) FoldF(l func(), r func(uint64)) { l() }


func (n noneUInt64) MapError(f func(v uint64) error) OptionError {
	return noneError{}
}

func (n noneUInt64) FoldError(a error, f func(v uint64) error) error {
	return a
}

func (n noneUInt64) FoldErrorF(a func() error, f func(v uint64) error) error {
	return a()
}

func (n noneUInt64) MapInt(f func(v uint64) int) OptionInt {
	return noneInt{}
}

func (n noneUInt64) FoldInt(a int, f func(v uint64) int) int {
	return a
}

func (n noneUInt64) FoldIntF(a func() int, f func(v uint64) int) int {
	return a()
}

func (n noneUInt64) MapNode(f func(v uint64) Node) OptionNode {
	return noneNode{}
}

func (n noneUInt64) FoldNode(a Node, f func(v uint64) Node) Node {
	return a
}

func (n noneUInt64) FoldNodeF(a func() Node, f func(v uint64) Node) Node {
	return a()
}

func (n noneUInt64) MapSerializedPart(f func(v uint64) SerializedPart) OptionSerializedPart {
	return noneSerializedPart{}
}

func (n noneUInt64) FoldSerializedPart(a SerializedPart, f func(v uint64) SerializedPart) SerializedPart {
	return a
}

func (n noneUInt64) FoldSerializedPartF(a func() SerializedPart, f func(v uint64) SerializedPart) SerializedPart {
	return a()
}

func (n noneUInt64) MapString(f func(v uint64) string) OptionString {
	return noneString{}
}

func (n noneUInt64) FoldString(a string, f func(v uint64) string) string {
	return a
}

func (n noneUInt64) FoldStringF(a func() string, f func(v uint64) string) string {
	return a()
}

func (n noneUInt64) MapTime(f func(v uint64) time.Time) OptionTime {
	return noneTime{}
}

func (n noneUInt64) FoldTime(a time.Time, f func(v uint64) time.Time) time.Time {
	return a
}

func (n noneUInt64) FoldTimeF(a func() time.Time, f func(v uint64) time.Time) time.Time {
	return a()
}

func (n noneUInt64) MapUInt(f func(v uint64) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt64) FoldUInt(a uint, f func(v uint64) uint) uint {
	return a
}

func (n noneUInt64) FoldUIntF(a func() uint, f func(v uint64) uint) uint {
	return a()
}

func (n noneUInt64) MapUInt64(f func(v uint64) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt64) FoldUInt64(a uint64, f func(v uint64) uint64) uint64 {
	return a
}

func (n noneUInt64) FoldUInt64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return a()
}



type someUInt64 struct {
	v uint64
}

func SomeUInt64(v uint64) OptionUInt64 {
	return someUInt64{v}
}

func (s someUInt64) Map(f func(uint64)) { f(s.v) }

func (s someUInt64) FoldF(l func(), r func(uint64)) { r(s.v) }


func (s someUInt64) MapError(f func(v uint64) error) OptionError {
	return SomeError(f(s.v))
}

func (s someUInt64) FoldError(a error, f func(v uint64) error) error {
	return f(s.v)
}

func (s someUInt64) FoldErrorF(a func() error, f func(v uint64) error) error {
	return f(s.v)
}


func (s someUInt64) MapInt(f func(v uint64) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt64) FoldInt(a int, f func(v uint64) int) int {
	return f(s.v)
}

func (s someUInt64) FoldIntF(a func() int, f func(v uint64) int) int {
	return f(s.v)
}


func (s someUInt64) MapNode(f func(v uint64) Node) OptionNode {
	return SomeNode(f(s.v))
}

func (s someUInt64) FoldNode(a Node, f func(v uint64) Node) Node {
	return f(s.v)
}

func (s someUInt64) FoldNodeF(a func() Node, f func(v uint64) Node) Node {
	return f(s.v)
}


func (s someUInt64) MapSerializedPart(f func(v uint64) SerializedPart) OptionSerializedPart {
	return SomeSerializedPart(f(s.v))
}

func (s someUInt64) FoldSerializedPart(a SerializedPart, f func(v uint64) SerializedPart) SerializedPart {
	return f(s.v)
}

func (s someUInt64) FoldSerializedPartF(a func() SerializedPart, f func(v uint64) SerializedPart) SerializedPart {
	return f(s.v)
}


func (s someUInt64) MapString(f func(v uint64) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt64) FoldString(a string, f func(v uint64) string) string {
	return f(s.v)
}

func (s someUInt64) FoldStringF(a func() string, f func(v uint64) string) string {
	return f(s.v)
}


func (s someUInt64) MapTime(f func(v uint64) time.Time) OptionTime {
	return SomeTime(f(s.v))
}

func (s someUInt64) FoldTime(a time.Time, f func(v uint64) time.Time) time.Time {
	return f(s.v)
}

func (s someUInt64) FoldTimeF(a func() time.Time, f func(v uint64) time.Time) time.Time {
	return f(s.v)
}


func (s someUInt64) MapUInt(f func(v uint64) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt64) FoldUInt(a uint, f func(v uint64) uint) uint {
	return f(s.v)
}

func (s someUInt64) FoldUIntF(a func() uint, f func(v uint64) uint) uint {
	return f(s.v)
}


func (s someUInt64) MapUInt64(f func(v uint64) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt64) FoldUInt64(a uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}

func (s someUInt64) FoldUInt64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}




