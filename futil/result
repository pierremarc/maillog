// Code generated by go generate - {{ .Timestamp }}
package {{ .PackageName }}

// imports 
import ( {{ range $_, $package := .Imports }}
	"{{ $package }}"
{{ end }} )
{{$Types := .Types}}
// interfaces
{{ range $label, $type := $Types }}
// {{ $label }}
type Result{{ $label }} interface {
	Map(func({{ $type }}))
	FoldF(func(error), func({{ $type }}))
{{ range $l, $t := $Types }}
	Map{{ $l }}(func({{ $type }}) {{ $t }}) Result{{ $l }}
	Fold{{ $l }}({{ $t }}, func({{ $type }}) {{ $t }}) {{ $t }}
	Fold{{ $l }}F(func(error) {{ $t }}, func({{ $type }}) {{ $t }}) {{ $t }}
{{ end }} 
}
{{ end }}

// functions 
{{ range $label, $type := $Types }}
func Result{{ $label }}From(v {{ $type }}, err error) Result{{ $label }} {
	if err != nil {
		return Err{{ $label }}(err)
	}
	return Ok{{ $label }}(v)
}
{{ end }}

{{ range $label, $type := $Types }}
// none
type err{{ $label }} struct{
	left error
}

func Err{{ $label }}(err error) Result{{ $label }} {
	return err{{ $label }}{err}
}

// map Err{{ $label }}
func (e err{{ $label }}) Map(f func({{ $type }})) {}
func (e err{{ $label }}) FoldF(l func(e error), r func({{ $type }})) { l(e.left) }
{{ range $l, $t := $Types }}
 // map Err{{ $label }} => Result{{ $l }}
func (e err{{ $label }}) Map{{ $l }}(f func(v {{ $type }}) {{ $t }}) Result{{ $l }} {
	return Err{{ $l }}(e.left)
}
// fold Err{{ $label }} => Result{{ $t }}
func (e err{{ $label }}) Fold{{ $l }}(a {{ $t }}, f func(v {{ $type }}) {{ $t }}) {{ $t }} {
	return a
}
func (e err{{ $label }}) Fold{{ $l }}F(a func(error) {{ $t }}, f func({{ $type }}) {{ $t }}) {{ $t }} {
	return a(e.left)
}
{{ end }} // end of nones

// ok
type ok{{ $label }} struct {
	right {{ $type }}
}

func Ok{{ $label }}(v {{ $type }}) ok{{ $label }} {
	return ok{{ $label }}{v}
}
// map Err{{ $label }}
func (s ok{{ $label }}) Map(f func({{ $type }})) { f(s.right) }
func (s ok{{ $label }}) FoldF(l func(error), r func({{ $type }})) { r(s.right) }
{{ range $l, $t := $Types }}
// map Sone{{ $label }} => Result{{ $l }}
func (s ok{{ $label }}) Map{{ $l }}(f func({{ $type }}) {{ $t }}) Result{{ $l }} {
	return Ok{{ $l }}(f(s.right))
}
// fold Ok{{ $label }} => {{ $t }}
func (s ok{{ $label }}) Fold{{ $l }}(a {{ $t }}, f func({{ $type }}) {{ $t }}) {{ $t }} {
	return f(s.right)
}
func (s ok{{ $label }}) Fold{{ $l }}F(a func(error) {{ $t }}, f func({{ $type }}) {{ $t }}) {{ $t }} {
	return f(s.right)
}
{{ end }} // end of oks

{{ end }} // end of everything

