// Code generated by go generate on 2018-04-12 10:37:51.393697558 +0000 UTC
package main


import (
 )




// ArrayInt
type ArrayInt interface {
	First() ResultInt
	Slice() []int
	Each(func(int))
	Concat(ArrayInt) arrayInt

	MapInt(func(int) int) arrayInt
	ReduceInt(func(int, int, ArrayInt) int, int) int

	MapNode(func(int) Node) arrayNode
	ReduceNode(func(int, int, ArrayInt) Node, Node) Node

	MapString(func(int) string) arrayString
	ReduceString(func(int, int, ArrayInt) string, string) string
 
}

// ArrayNode
type ArrayNode interface {
	First() ResultNode
	Slice() []Node
	Each(func(Node))
	Concat(ArrayNode) arrayNode

	MapInt(func(Node) int) arrayInt
	ReduceInt(func(Node, int, ArrayNode) int, int) int

	MapNode(func(Node) Node) arrayNode
	ReduceNode(func(Node, int, ArrayNode) Node, Node) Node

	MapString(func(Node) string) arrayString
	ReduceString(func(Node, int, ArrayNode) string, string) string
 
}

// ArrayString
type ArrayString interface {
	First() ResultString
	Slice() []string
	Each(func(string))
	Concat(ArrayString) arrayString

	MapInt(func(string) int) arrayInt
	ReduceInt(func(string, int, ArrayString) int, int) int

	MapNode(func(string) Node) arrayNode
	ReduceNode(func(string, int, ArrayString) Node, Node) Node

	MapString(func(string) string) arrayString
	ReduceString(func(string, int, ArrayString) string, string) string
 
}






// arrayInt is a type alias for []int
type arrayInt []int

// ArrayInt makes an arry off of its arguments of type int 
func ArrayIntFrom(a ...int) arrayInt {
	return arrayInt(a)
}

// First with arrayInt receiver
// returns first element in a ResultInt container
func (a arrayInt) First() ResultInt {
	if len(a) > 0 {
		return OkInt(a[0])
	}
	return ErrInt("Out Of Bound Array Access")
}

// Slice with arrayInt receiver
// returns itself as []int
func (a arrayInt) Slice() []int {
	return []int(a)
}

// Each with arrayInt receiver
// applies its function argument on each item of the array
func (a arrayInt) Each(f func(int)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt) Concat(xs ArrayInt) arrayInt {
	return arrayInt(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt(f func(int) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt(f func(int, int, ArrayInt) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayNode resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapNode(f func(int) Node) arrayNode {
	var r = make(arrayNode, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayNode(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceNode(f func(int, int, ArrayInt) Node, initial Node) Node {
	var r Node = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapString(f func(int) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceString(f func(int, int, ArrayInt) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int



// arrayNode is a type alias for []Node
type arrayNode []Node

// ArrayNode makes an arry off of its arguments of type Node 
func ArrayNodeFrom(a ...Node) arrayNode {
	return arrayNode(a)
}

// First with arrayNode receiver
// returns first element in a ResultNode container
func (a arrayNode) First() ResultNode {
	if len(a) > 0 {
		return OkNode(a[0])
	}
	return ErrNode("Out Of Bound Array Access")
}

// Slice with arrayNode receiver
// returns itself as []Node
func (a arrayNode) Slice() []Node {
	return []Node(a)
}

// Each with arrayNode receiver
// applies its function argument on each item of the array
func (a arrayNode) Each(f func(Node)) {
	for _, e := range a { f(e) }
}

// Concat with arrayNode receiver
// returns the concatenation of itself and  its argument array 
func (a arrayNode) Concat(xs ArrayNode) arrayNode {
	return arrayNode(append(a.Slice(), xs.Slice()...))
}


// Map with arrayNode receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayNode) MapInt(f func(Node) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayNode receiver
func (a arrayNode) ReduceInt(f func(Node, int, ArrayNode) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayNode receiver
// returns an arrayNode resulting from apllying its function argument
// to every items of the receiver
func (a arrayNode) MapNode(f func(Node) Node) arrayNode {
	var r = make(arrayNode, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayNode(r)
}

// Reduce with arrayNode receiver
func (a arrayNode) ReduceNode(f func(Node, int, ArrayNode) Node, initial Node) Node {
	var r Node = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayNode receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayNode) MapString(f func(Node) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayNode receiver
func (a arrayNode) ReduceString(f func(Node, int, ArrayNode) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Node



// arrayString is a type alias for []string
type arrayString []string

// ArrayString makes an arry off of its arguments of type string 
func ArrayStringFrom(a ...string) arrayString {
	return arrayString(a)
}

// First with arrayString receiver
// returns first element in a ResultString container
func (a arrayString) First() ResultString {
	if len(a) > 0 {
		return OkString(a[0])
	}
	return ErrString("Out Of Bound Array Access")
}

// Slice with arrayString receiver
// returns itself as []string
func (a arrayString) Slice() []string {
	return []string(a)
}

// Each with arrayString receiver
// applies its function argument on each item of the array
func (a arrayString) Each(f func(string)) {
	for _, e := range a { f(e) }
}

// Concat with arrayString receiver
// returns the concatenation of itself and  its argument array 
func (a arrayString) Concat(xs ArrayString) arrayString {
	return arrayString(append(a.Slice(), xs.Slice()...))
}


// Map with arrayString receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt(f func(string) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt(f func(string, int, ArrayString) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayNode resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapNode(f func(string) Node) arrayNode {
	var r = make(arrayNode, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayNode(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceNode(f func(string, int, ArrayString) Node, initial Node) Node {
	var r Node = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapString(f func(string) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceString(f func(string, int, ArrayString) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of String

 // end of implements


