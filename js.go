package main

import (
	"encoding/base64"
)

func base64decodeJs(input string) string {
    content, err := base64.StdEncoding.DecodeString(input)
    if err != nil {
        return input
    }
    return string(content)
}



var JsBundle = base64decodeJs(`LyoKICogIENvcHlyaWdodCAoQykgMjAxOCBQaWVycmUgTWFyY2hhbmQgPHBpZXJyZS5tQGF0ZWxpZXItY2FydG9ncmFwaGlxdWUuYmU+CiAqCiAqICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UuCiAqCiAqICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAqICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgogKi8KCmZ1bmN0aW9uIHN0YXJ0KCkgewogICAgY29uc3QgbG9jID0gd2luZG93LmxvY2F0aW9uCiAgICBjb25zdCBpc1NlY3VyZSA9IGxvYy5wcm90b2NvbCA9PT0gJ2h0dHBzOicKCiAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoImRhdGEtcGFnZSIpCgoKICAgIGZ1bmN0aW9uIHJlbG9hZGVyKG1zZykgewogICAgICAgIGNvbnN0IHJlbG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpCiAgICAgICAgcmVsb2FkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncmVsb2FkZXInKQogICAgICAgIGNvbnN0IHJlbG9hZElubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgICAgICByZWxvYWRJbm5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JlbG9hZGVyLWlubmVyJykKICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpCiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBsb2MuaHJlZikKICAgICAgICBsaW5rLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG1zZykpCiAgICAgICAgcmVsb2FkSW5uZXIuYXBwZW5kQ2hpbGQobGluaykKICAgICAgICByZWxvYWQuYXBwZW5kQ2hpbGQocmVsb2FkSW5uZXIpCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZWxvYWQpCiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tVcGRhdGUoZGF0YSkgewogICAgICAgIGlmICgndGhyZWFkJyA9PT0gcGFnZSkgewogICAgICAgICAgICBjb25zdCByZWNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2RhdGEtdG9waWNdIikKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWNzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBjb25zdCBlID0gcmVjc1tpXTsKICAgICAgICAgICAgICAgIGNvbnN0IHRvcGljID0gZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9waWMnKQogICAgICAgICAgICAgICAgaWYgKHRvcGljID09PSBkYXRhLnRvcGljKSB7CiAgICAgICAgICAgICAgICAgICAgcmVsb2FkZXIoYFRoZXIncyBhIG5ldyBtZXNzYWdlIGluICR7ZGF0YS50b3BpY30sIGNsaWNrIHRvIHJlbG9hZGApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoJ21lc3NhZ2UnID09PSBwYWdlKSB7CiAgICAgICAgICAgIGNvbnN0IHJpZCA9IGRhdGEucGFyZW50LnRvU3RyaW5nKCkKICAgICAgICAgICAgY29uc3QgcmVjcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLXJlY29yZF0iKQogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGNvbnN0IGUgPSByZWNzW2ldOwogICAgICAgICAgICAgICAgY29uc3QgaWQgPSBlLmdldEF0dHJpYnV0ZSgnZGF0YS1yZWNvcmQnKQogICAgICAgICAgICAgICAgaWYgKHJpZCA9PT0gaWQpIHsKICAgICAgICAgICAgICAgICAgICByZWxvYWRlcihgVGhlcmUncyBhIG5ldyBtZXNzYWdlIGluIHRoaXMgdGhyZWFkLCBjbGljayB0byByZWxvYWRgKQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzQ2xhc3MgPSBlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHByZXZpb3VzQ2xhc3MgKyAnIG5ldy1yZXBseScpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNvbm5lY3QoKSB7CiAgICAgICAgY29uc3QgaG9zdCA9IGxvYy5ob3N0CiAgICAgICAgY29uc3QgYWRkciA9IGAke2lzU2VjdXJlID8gJ3dzcycgOiAnd3MnfTovLyR7aG9zdH0vLm5vdGlmaWNhdGlvbnNgCiAgICAgICAgY29uc3Qgc29ja2V0ID0gbmV3IFdlYlNvY2tldChhZGRyKQogICAgICAgIGNvbnNvbGUubG9nKGBDb25uZWN0IHRvICR7YWRkcn1gKQoKICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICBzb2NrZXQuc2VuZCgnSGVsbG8gU2VydmVyIScpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29ubmVjdGlvbiBPcGVuZWRgKQogICAgICAgIH0pOwoKICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTWVzc2FnZSBmcm9tIHNlcnZlciAnLCBldmVudC5kYXRhKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpCiAgICAgICAgICAgICAgICBjaGVja1VwZGF0ZShkYXRhKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgZGF0YSAnLCBldmVudC5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcigiY2xvc2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNvbm5lY3QsIDIwMDApOwogICAgICAgIH0pCiAgICB9CgoKICAgIGNvbm5lY3QoKQp9CgoKZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCdpbnRlcmFjdGl2ZScgPT09IGRvY3VtZW50LnJlYWR5U3RhdGUpIHsKICAgICAgICBzdGFydCgpOwogICAgfQp9Ow==`)
