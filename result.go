// Code generated by go generate - 2018-03-29 16:27:06.450061411 +0000 UTC
package main

// imports 
import (
	"errors"

	"io"

	"net/mail"

	"github.com/jackc/pgx"
 )

// interfaces

// Bool
type ResultBool interface {
	Map(func(bool))
	FoldF(func(error), func(bool))

	MapBool(func(bool) bool) ResultBool
	FoldBool(bool, func(bool) bool) bool
	FoldBoolF(func(error) bool, func(bool) bool) bool

	MapConnPool(func(bool) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(bool) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(bool) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(bool) error) ResultError
	FoldError(error, func(bool) error) error
	FoldErrorF(func(error) error, func(bool) error) error

	MapInt(func(bool) int) ResultInt
	FoldInt(int, func(bool) int) int
	FoldIntF(func(error) int, func(bool) int) int

	MapMessage(func(bool) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(bool) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(bool) *mail.Message) *mail.Message

	MapNode(func(bool) Node) ResultNode
	FoldNode(Node, func(bool) Node) Node
	FoldNodeF(func(error) Node, func(bool) Node) Node

	MapReader(func(bool) io.Reader) ResultReader
	FoldReader(io.Reader, func(bool) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(bool) io.Reader) io.Reader

	MapSByte(func(bool) []byte) ResultSByte
	FoldSByte([]byte, func(bool) []byte) []byte
	FoldSByteF(func(error) []byte, func(bool) []byte) []byte

	MapSerializedMessage(func(bool) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(bool) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(bool) SerializedMessage) SerializedMessage

	MapStore(func(bool) Store) ResultStore
	FoldStore(Store, func(bool) Store) Store
	FoldStoreF(func(error) Store, func(bool) Store) Store

	MapString(func(bool) string) ResultString
	FoldString(string, func(bool) string) string
	FoldStringF(func(error) string, func(bool) string) string
 
}

// ConnPool
type ResultConnPool interface {
	Map(func(*pgx.ConnPool))
	FoldF(func(error), func(*pgx.ConnPool))

	MapBool(func(*pgx.ConnPool) bool) ResultBool
	FoldBool(bool, func(*pgx.ConnPool) bool) bool
	FoldBoolF(func(error) bool, func(*pgx.ConnPool) bool) bool

	MapConnPool(func(*pgx.ConnPool) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(*pgx.ConnPool) error) ResultError
	FoldError(error, func(*pgx.ConnPool) error) error
	FoldErrorF(func(error) error, func(*pgx.ConnPool) error) error

	MapInt(func(*pgx.ConnPool) int) ResultInt
	FoldInt(int, func(*pgx.ConnPool) int) int
	FoldIntF(func(error) int, func(*pgx.ConnPool) int) int

	MapMessage(func(*pgx.ConnPool) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*pgx.ConnPool) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*pgx.ConnPool) *mail.Message) *mail.Message

	MapNode(func(*pgx.ConnPool) Node) ResultNode
	FoldNode(Node, func(*pgx.ConnPool) Node) Node
	FoldNodeF(func(error) Node, func(*pgx.ConnPool) Node) Node

	MapReader(func(*pgx.ConnPool) io.Reader) ResultReader
	FoldReader(io.Reader, func(*pgx.ConnPool) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(*pgx.ConnPool) io.Reader) io.Reader

	MapSByte(func(*pgx.ConnPool) []byte) ResultSByte
	FoldSByte([]byte, func(*pgx.ConnPool) []byte) []byte
	FoldSByteF(func(error) []byte, func(*pgx.ConnPool) []byte) []byte

	MapSerializedMessage(func(*pgx.ConnPool) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(*pgx.ConnPool) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(*pgx.ConnPool) SerializedMessage) SerializedMessage

	MapStore(func(*pgx.ConnPool) Store) ResultStore
	FoldStore(Store, func(*pgx.ConnPool) Store) Store
	FoldStoreF(func(error) Store, func(*pgx.ConnPool) Store) Store

	MapString(func(*pgx.ConnPool) string) ResultString
	FoldString(string, func(*pgx.ConnPool) string) string
	FoldStringF(func(error) string, func(*pgx.ConnPool) string) string
 
}

// Error
type ResultError interface {
	Map(func(error))
	FoldF(func(error), func(error))

	MapBool(func(error) bool) ResultBool
	FoldBool(bool, func(error) bool) bool
	FoldBoolF(func(error) bool, func(error) bool) bool

	MapConnPool(func(error) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(error) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(error) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(error) error) ResultError
	FoldError(error, func(error) error) error
	FoldErrorF(func(error) error, func(error) error) error

	MapInt(func(error) int) ResultInt
	FoldInt(int, func(error) int) int
	FoldIntF(func(error) int, func(error) int) int

	MapMessage(func(error) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(error) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(error) *mail.Message) *mail.Message

	MapNode(func(error) Node) ResultNode
	FoldNode(Node, func(error) Node) Node
	FoldNodeF(func(error) Node, func(error) Node) Node

	MapReader(func(error) io.Reader) ResultReader
	FoldReader(io.Reader, func(error) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(error) io.Reader) io.Reader

	MapSByte(func(error) []byte) ResultSByte
	FoldSByte([]byte, func(error) []byte) []byte
	FoldSByteF(func(error) []byte, func(error) []byte) []byte

	MapSerializedMessage(func(error) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(error) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(error) SerializedMessage) SerializedMessage

	MapStore(func(error) Store) ResultStore
	FoldStore(Store, func(error) Store) Store
	FoldStoreF(func(error) Store, func(error) Store) Store

	MapString(func(error) string) ResultString
	FoldString(string, func(error) string) string
	FoldStringF(func(error) string, func(error) string) string
 
}

// Int
type ResultInt interface {
	Map(func(int))
	FoldF(func(error), func(int))

	MapBool(func(int) bool) ResultBool
	FoldBool(bool, func(int) bool) bool
	FoldBoolF(func(error) bool, func(int) bool) bool

	MapConnPool(func(int) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(int) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(int) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(int) error) ResultError
	FoldError(error, func(int) error) error
	FoldErrorF(func(error) error, func(int) error) error

	MapInt(func(int) int) ResultInt
	FoldInt(int, func(int) int) int
	FoldIntF(func(error) int, func(int) int) int

	MapMessage(func(int) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(int) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(int) *mail.Message) *mail.Message

	MapNode(func(int) Node) ResultNode
	FoldNode(Node, func(int) Node) Node
	FoldNodeF(func(error) Node, func(int) Node) Node

	MapReader(func(int) io.Reader) ResultReader
	FoldReader(io.Reader, func(int) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(int) io.Reader) io.Reader

	MapSByte(func(int) []byte) ResultSByte
	FoldSByte([]byte, func(int) []byte) []byte
	FoldSByteF(func(error) []byte, func(int) []byte) []byte

	MapSerializedMessage(func(int) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(int) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(int) SerializedMessage) SerializedMessage

	MapStore(func(int) Store) ResultStore
	FoldStore(Store, func(int) Store) Store
	FoldStoreF(func(error) Store, func(int) Store) Store

	MapString(func(int) string) ResultString
	FoldString(string, func(int) string) string
	FoldStringF(func(error) string, func(int) string) string
 
}

// Message
type ResultMessage interface {
	Map(func(*mail.Message))
	FoldF(func(error), func(*mail.Message))

	MapBool(func(*mail.Message) bool) ResultBool
	FoldBool(bool, func(*mail.Message) bool) bool
	FoldBoolF(func(error) bool, func(*mail.Message) bool) bool

	MapConnPool(func(*mail.Message) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(*mail.Message) error) ResultError
	FoldError(error, func(*mail.Message) error) error
	FoldErrorF(func(error) error, func(*mail.Message) error) error

	MapInt(func(*mail.Message) int) ResultInt
	FoldInt(int, func(*mail.Message) int) int
	FoldIntF(func(error) int, func(*mail.Message) int) int

	MapMessage(func(*mail.Message) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*mail.Message) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*mail.Message) *mail.Message) *mail.Message

	MapNode(func(*mail.Message) Node) ResultNode
	FoldNode(Node, func(*mail.Message) Node) Node
	FoldNodeF(func(error) Node, func(*mail.Message) Node) Node

	MapReader(func(*mail.Message) io.Reader) ResultReader
	FoldReader(io.Reader, func(*mail.Message) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(*mail.Message) io.Reader) io.Reader

	MapSByte(func(*mail.Message) []byte) ResultSByte
	FoldSByte([]byte, func(*mail.Message) []byte) []byte
	FoldSByteF(func(error) []byte, func(*mail.Message) []byte) []byte

	MapSerializedMessage(func(*mail.Message) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(*mail.Message) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(*mail.Message) SerializedMessage) SerializedMessage

	MapStore(func(*mail.Message) Store) ResultStore
	FoldStore(Store, func(*mail.Message) Store) Store
	FoldStoreF(func(error) Store, func(*mail.Message) Store) Store

	MapString(func(*mail.Message) string) ResultString
	FoldString(string, func(*mail.Message) string) string
	FoldStringF(func(error) string, func(*mail.Message) string) string
 
}

// Node
type ResultNode interface {
	Map(func(Node))
	FoldF(func(error), func(Node))

	MapBool(func(Node) bool) ResultBool
	FoldBool(bool, func(Node) bool) bool
	FoldBoolF(func(error) bool, func(Node) bool) bool

	MapConnPool(func(Node) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(Node) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(Node) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(Node) error) ResultError
	FoldError(error, func(Node) error) error
	FoldErrorF(func(error) error, func(Node) error) error

	MapInt(func(Node) int) ResultInt
	FoldInt(int, func(Node) int) int
	FoldIntF(func(error) int, func(Node) int) int

	MapMessage(func(Node) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Node) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Node) *mail.Message) *mail.Message

	MapNode(func(Node) Node) ResultNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func(error) Node, func(Node) Node) Node

	MapReader(func(Node) io.Reader) ResultReader
	FoldReader(io.Reader, func(Node) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(Node) io.Reader) io.Reader

	MapSByte(func(Node) []byte) ResultSByte
	FoldSByte([]byte, func(Node) []byte) []byte
	FoldSByteF(func(error) []byte, func(Node) []byte) []byte

	MapSerializedMessage(func(Node) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(Node) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(Node) SerializedMessage) SerializedMessage

	MapStore(func(Node) Store) ResultStore
	FoldStore(Store, func(Node) Store) Store
	FoldStoreF(func(error) Store, func(Node) Store) Store

	MapString(func(Node) string) ResultString
	FoldString(string, func(Node) string) string
	FoldStringF(func(error) string, func(Node) string) string
 
}

// Reader
type ResultReader interface {
	Map(func(io.Reader))
	FoldF(func(error), func(io.Reader))

	MapBool(func(io.Reader) bool) ResultBool
	FoldBool(bool, func(io.Reader) bool) bool
	FoldBoolF(func(error) bool, func(io.Reader) bool) bool

	MapConnPool(func(io.Reader) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(io.Reader) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(io.Reader) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(io.Reader) error) ResultError
	FoldError(error, func(io.Reader) error) error
	FoldErrorF(func(error) error, func(io.Reader) error) error

	MapInt(func(io.Reader) int) ResultInt
	FoldInt(int, func(io.Reader) int) int
	FoldIntF(func(error) int, func(io.Reader) int) int

	MapMessage(func(io.Reader) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(io.Reader) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(io.Reader) *mail.Message) *mail.Message

	MapNode(func(io.Reader) Node) ResultNode
	FoldNode(Node, func(io.Reader) Node) Node
	FoldNodeF(func(error) Node, func(io.Reader) Node) Node

	MapReader(func(io.Reader) io.Reader) ResultReader
	FoldReader(io.Reader, func(io.Reader) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(io.Reader) io.Reader) io.Reader

	MapSByte(func(io.Reader) []byte) ResultSByte
	FoldSByte([]byte, func(io.Reader) []byte) []byte
	FoldSByteF(func(error) []byte, func(io.Reader) []byte) []byte

	MapSerializedMessage(func(io.Reader) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(io.Reader) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(io.Reader) SerializedMessage) SerializedMessage

	MapStore(func(io.Reader) Store) ResultStore
	FoldStore(Store, func(io.Reader) Store) Store
	FoldStoreF(func(error) Store, func(io.Reader) Store) Store

	MapString(func(io.Reader) string) ResultString
	FoldString(string, func(io.Reader) string) string
	FoldStringF(func(error) string, func(io.Reader) string) string
 
}

// SByte
type ResultSByte interface {
	Map(func([]byte))
	FoldF(func(error), func([]byte))

	MapBool(func([]byte) bool) ResultBool
	FoldBool(bool, func([]byte) bool) bool
	FoldBoolF(func(error) bool, func([]byte) bool) bool

	MapConnPool(func([]byte) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func([]byte) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func([]byte) *pgx.ConnPool) *pgx.ConnPool

	MapError(func([]byte) error) ResultError
	FoldError(error, func([]byte) error) error
	FoldErrorF(func(error) error, func([]byte) error) error

	MapInt(func([]byte) int) ResultInt
	FoldInt(int, func([]byte) int) int
	FoldIntF(func(error) int, func([]byte) int) int

	MapMessage(func([]byte) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func([]byte) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func([]byte) *mail.Message) *mail.Message

	MapNode(func([]byte) Node) ResultNode
	FoldNode(Node, func([]byte) Node) Node
	FoldNodeF(func(error) Node, func([]byte) Node) Node

	MapReader(func([]byte) io.Reader) ResultReader
	FoldReader(io.Reader, func([]byte) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func([]byte) io.Reader) io.Reader

	MapSByte(func([]byte) []byte) ResultSByte
	FoldSByte([]byte, func([]byte) []byte) []byte
	FoldSByteF(func(error) []byte, func([]byte) []byte) []byte

	MapSerializedMessage(func([]byte) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func([]byte) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func([]byte) SerializedMessage) SerializedMessage

	MapStore(func([]byte) Store) ResultStore
	FoldStore(Store, func([]byte) Store) Store
	FoldStoreF(func(error) Store, func([]byte) Store) Store

	MapString(func([]byte) string) ResultString
	FoldString(string, func([]byte) string) string
	FoldStringF(func(error) string, func([]byte) string) string
 
}

// SerializedMessage
type ResultSerializedMessage interface {
	Map(func(SerializedMessage))
	FoldF(func(error), func(SerializedMessage))

	MapBool(func(SerializedMessage) bool) ResultBool
	FoldBool(bool, func(SerializedMessage) bool) bool
	FoldBoolF(func(error) bool, func(SerializedMessage) bool) bool

	MapConnPool(func(SerializedMessage) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(SerializedMessage) error) ResultError
	FoldError(error, func(SerializedMessage) error) error
	FoldErrorF(func(error) error, func(SerializedMessage) error) error

	MapInt(func(SerializedMessage) int) ResultInt
	FoldInt(int, func(SerializedMessage) int) int
	FoldIntF(func(error) int, func(SerializedMessage) int) int

	MapMessage(func(SerializedMessage) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(SerializedMessage) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(SerializedMessage) *mail.Message) *mail.Message

	MapNode(func(SerializedMessage) Node) ResultNode
	FoldNode(Node, func(SerializedMessage) Node) Node
	FoldNodeF(func(error) Node, func(SerializedMessage) Node) Node

	MapReader(func(SerializedMessage) io.Reader) ResultReader
	FoldReader(io.Reader, func(SerializedMessage) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(SerializedMessage) io.Reader) io.Reader

	MapSByte(func(SerializedMessage) []byte) ResultSByte
	FoldSByte([]byte, func(SerializedMessage) []byte) []byte
	FoldSByteF(func(error) []byte, func(SerializedMessage) []byte) []byte

	MapSerializedMessage(func(SerializedMessage) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(SerializedMessage) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(SerializedMessage) SerializedMessage) SerializedMessage

	MapStore(func(SerializedMessage) Store) ResultStore
	FoldStore(Store, func(SerializedMessage) Store) Store
	FoldStoreF(func(error) Store, func(SerializedMessage) Store) Store

	MapString(func(SerializedMessage) string) ResultString
	FoldString(string, func(SerializedMessage) string) string
	FoldStringF(func(error) string, func(SerializedMessage) string) string
 
}

// Store
type ResultStore interface {
	Map(func(Store))
	FoldF(func(error), func(Store))

	MapBool(func(Store) bool) ResultBool
	FoldBool(bool, func(Store) bool) bool
	FoldBoolF(func(error) bool, func(Store) bool) bool

	MapConnPool(func(Store) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(Store) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(Store) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(Store) error) ResultError
	FoldError(error, func(Store) error) error
	FoldErrorF(func(error) error, func(Store) error) error

	MapInt(func(Store) int) ResultInt
	FoldInt(int, func(Store) int) int
	FoldIntF(func(error) int, func(Store) int) int

	MapMessage(func(Store) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Store) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Store) *mail.Message) *mail.Message

	MapNode(func(Store) Node) ResultNode
	FoldNode(Node, func(Store) Node) Node
	FoldNodeF(func(error) Node, func(Store) Node) Node

	MapReader(func(Store) io.Reader) ResultReader
	FoldReader(io.Reader, func(Store) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(Store) io.Reader) io.Reader

	MapSByte(func(Store) []byte) ResultSByte
	FoldSByte([]byte, func(Store) []byte) []byte
	FoldSByteF(func(error) []byte, func(Store) []byte) []byte

	MapSerializedMessage(func(Store) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(Store) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(Store) SerializedMessage) SerializedMessage

	MapStore(func(Store) Store) ResultStore
	FoldStore(Store, func(Store) Store) Store
	FoldStoreF(func(error) Store, func(Store) Store) Store

	MapString(func(Store) string) ResultString
	FoldString(string, func(Store) string) string
	FoldStringF(func(error) string, func(Store) string) string
 
}

// String
type ResultString interface {
	Map(func(string))
	FoldF(func(error), func(string))

	MapBool(func(string) bool) ResultBool
	FoldBool(bool, func(string) bool) bool
	FoldBoolF(func(error) bool, func(string) bool) bool

	MapConnPool(func(string) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(string) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(string) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(string) error) ResultError
	FoldError(error, func(string) error) error
	FoldErrorF(func(error) error, func(string) error) error

	MapInt(func(string) int) ResultInt
	FoldInt(int, func(string) int) int
	FoldIntF(func(error) int, func(string) int) int

	MapMessage(func(string) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(string) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(string) *mail.Message) *mail.Message

	MapNode(func(string) Node) ResultNode
	FoldNode(Node, func(string) Node) Node
	FoldNodeF(func(error) Node, func(string) Node) Node

	MapReader(func(string) io.Reader) ResultReader
	FoldReader(io.Reader, func(string) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(string) io.Reader) io.Reader

	MapSByte(func(string) []byte) ResultSByte
	FoldSByte([]byte, func(string) []byte) []byte
	FoldSByteF(func(error) []byte, func(string) []byte) []byte

	MapSerializedMessage(func(string) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(string) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(string) SerializedMessage) SerializedMessage

	MapStore(func(string) Store) ResultStore
	FoldStore(Store, func(string) Store) Store
	FoldStoreF(func(error) Store, func(string) Store) Store

	MapString(func(string) string) ResultString
	FoldString(string, func(string) string) string
	FoldStringF(func(error) string, func(string) string) string
 
}


// functions 

func ResultBoolFrom(v bool, err error) ResultBool {
	if err != nil {
		return ErrBool(err)
	}
	return OkBool(v)
}

func ResultConnPoolFrom(v *pgx.ConnPool, err error) ResultConnPool {
	if err != nil {
		return ErrConnPool(err)
	}
	return OkConnPool(v)
}

func ResultErrorFrom(v error, err error) ResultError {
	if err != nil {
		return ErrError(err)
	}
	return OkError(v)
}

func ResultIntFrom(v int, err error) ResultInt {
	if err != nil {
		return ErrInt(err)
	}
	return OkInt(v)
}

func ResultMessageFrom(v *mail.Message, err error) ResultMessage {
	if err != nil {
		return ErrMessage(err)
	}
	return OkMessage(v)
}

func ResultNodeFrom(v Node, err error) ResultNode {
	if err != nil {
		return ErrNode(err)
	}
	return OkNode(v)
}

func ResultReaderFrom(v io.Reader, err error) ResultReader {
	if err != nil {
		return ErrReader(err)
	}
	return OkReader(v)
}

func ResultSByteFrom(v []byte, err error) ResultSByte {
	if err != nil {
		return ErrSByte(err)
	}
	return OkSByte(v)
}

func ResultSerializedMessageFrom(v SerializedMessage, err error) ResultSerializedMessage {
	if err != nil {
		return ErrSerializedMessage(err)
	}
	return OkSerializedMessage(v)
}

func ResultStoreFrom(v Store, err error) ResultStore {
	if err != nil {
		return ErrStore(err)
	}
	return OkStore(v)
}

func ResultStringFrom(v string, err error) ResultString {
	if err != nil {
		return ErrString(err)
	}
	return OkString(v)
}



// none
type errBool struct{
	left error
}

func ErrBool(err interface{}) ResultBool {
	switch err.(type) {
		case string : return errBool{errors.New(err.(string))}
		case error : return errBool{err.(error)}
	} 
	return errBool{errors.New("ErrBool called with something else than string or error")}
}

// map ErrBool
func (e errBool) Map(f func(bool)) {}
func (e errBool) FoldF(l func(e error), r func(bool)) { l(e.left) }

 // map ErrBool => ResultBool
func (e errBool) MapBool(f func(v bool) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrBool => Resultbool
func (e errBool) FoldBool(a bool, f func(v bool) bool) bool {
	return a
}
func (e errBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return a(e.left)
}

 // map ErrBool => ResultConnPool
func (e errBool) MapConnPool(f func(v bool) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrBool => Result*pgx.ConnPool
func (e errBool) FoldConnPool(a *pgx.ConnPool, f func(v bool) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errBool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrBool => ResultError
func (e errBool) MapError(f func(v bool) error) ResultError {
	return ErrError(e.left)
}
// fold ErrBool => Resulterror
func (e errBool) FoldError(a error, f func(v bool) error) error {
	return a
}
func (e errBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return a(e.left)
}

 // map ErrBool => ResultInt
func (e errBool) MapInt(f func(v bool) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrBool => Resultint
func (e errBool) FoldInt(a int, f func(v bool) int) int {
	return a
}
func (e errBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return a(e.left)
}

 // map ErrBool => ResultMessage
func (e errBool) MapMessage(f func(v bool) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrBool => Result*mail.Message
func (e errBool) FoldMessage(a *mail.Message, f func(v bool) *mail.Message) *mail.Message {
	return a
}
func (e errBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrBool => ResultNode
func (e errBool) MapNode(f func(v bool) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrBool => ResultNode
func (e errBool) FoldNode(a Node, f func(v bool) Node) Node {
	return a
}
func (e errBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return a(e.left)
}

 // map ErrBool => ResultReader
func (e errBool) MapReader(f func(v bool) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrBool => Resultio.Reader
func (e errBool) FoldReader(a io.Reader, f func(v bool) io.Reader) io.Reader {
	return a
}
func (e errBool) FoldReaderF(a func(error) io.Reader, f func(bool) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrBool => ResultSByte
func (e errBool) MapSByte(f func(v bool) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrBool => Result[]byte
func (e errBool) FoldSByte(a []byte, f func(v bool) []byte) []byte {
	return a
}
func (e errBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return a(e.left)
}

 // map ErrBool => ResultSerializedMessage
func (e errBool) MapSerializedMessage(f func(v bool) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrBool => ResultSerializedMessage
func (e errBool) FoldSerializedMessage(a SerializedMessage, f func(v bool) SerializedMessage) SerializedMessage {
	return a
}
func (e errBool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrBool => ResultStore
func (e errBool) MapStore(f func(v bool) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrBool => ResultStore
func (e errBool) FoldStore(a Store, f func(v bool) Store) Store {
	return a
}
func (e errBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return a(e.left)
}

 // map ErrBool => ResultString
func (e errBool) MapString(f func(v bool) string) ResultString {
	return ErrString(e.left)
}
// fold ErrBool => Resultstring
func (e errBool) FoldString(a string, f func(v bool) string) string {
	return a
}
func (e errBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okBool struct {
	right bool
}

func OkBool(v bool) okBool {
	return okBool{v}
}
// map ErrBool
func (s okBool) Map(f func(bool)) { f(s.right) }
func (s okBool) FoldF(l func(error), r func(bool)) { r(s.right) }

// map SoneBool => ResultBool
func (s okBool) MapBool(f func(bool) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkBool => bool
func (s okBool) FoldBool(a bool, f func(bool) bool) bool {
	return f(s.right)
}
func (s okBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return f(s.right)
}

// map SoneBool => ResultConnPool
func (s okBool) MapConnPool(f func(bool) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkBool => *pgx.ConnPool
func (s okBool) FoldConnPool(a *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okBool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneBool => ResultError
func (s okBool) MapError(f func(bool) error) ResultError {
	return OkError(f(s.right))
}
// fold OkBool => error
func (s okBool) FoldError(a error, f func(bool) error) error {
	return f(s.right)
}
func (s okBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return f(s.right)
}

// map SoneBool => ResultInt
func (s okBool) MapInt(f func(bool) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkBool => int
func (s okBool) FoldInt(a int, f func(bool) int) int {
	return f(s.right)
}
func (s okBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return f(s.right)
}

// map SoneBool => ResultMessage
func (s okBool) MapMessage(f func(bool) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkBool => *mail.Message
func (s okBool) FoldMessage(a *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneBool => ResultNode
func (s okBool) MapNode(f func(bool) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkBool => Node
func (s okBool) FoldNode(a Node, f func(bool) Node) Node {
	return f(s.right)
}
func (s okBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return f(s.right)
}

// map SoneBool => ResultReader
func (s okBool) MapReader(f func(bool) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkBool => io.Reader
func (s okBool) FoldReader(a io.Reader, f func(bool) io.Reader) io.Reader {
	return f(s.right)
}
func (s okBool) FoldReaderF(a func(error) io.Reader, f func(bool) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneBool => ResultSByte
func (s okBool) MapSByte(f func(bool) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkBool => []byte
func (s okBool) FoldSByte(a []byte, f func(bool) []byte) []byte {
	return f(s.right)
}
func (s okBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return f(s.right)
}

// map SoneBool => ResultSerializedMessage
func (s okBool) MapSerializedMessage(f func(bool) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkBool => SerializedMessage
func (s okBool) FoldSerializedMessage(a SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okBool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneBool => ResultStore
func (s okBool) MapStore(f func(bool) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkBool => Store
func (s okBool) FoldStore(a Store, f func(bool) Store) Store {
	return f(s.right)
}
func (s okBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return f(s.right)
}

// map SoneBool => ResultString
func (s okBool) MapString(f func(bool) string) ResultString {
	return OkString(f(s.right))
}
// fold OkBool => string
func (s okBool) FoldString(a string, f func(bool) string) string {
	return f(s.right)
}
func (s okBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return f(s.right)
}
 // end of oks


// none
type errConnPool struct{
	left error
}

func ErrConnPool(err interface{}) ResultConnPool {
	switch err.(type) {
		case string : return errConnPool{errors.New(err.(string))}
		case error : return errConnPool{err.(error)}
	} 
	return errConnPool{errors.New("ErrConnPool called with something else than string or error")}
}

// map ErrConnPool
func (e errConnPool) Map(f func(*pgx.ConnPool)) {}
func (e errConnPool) FoldF(l func(e error), r func(*pgx.ConnPool)) { l(e.left) }

 // map ErrConnPool => ResultBool
func (e errConnPool) MapBool(f func(v *pgx.ConnPool) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrConnPool => Resultbool
func (e errConnPool) FoldBool(a bool, f func(v *pgx.ConnPool) bool) bool {
	return a
}
func (e errConnPool) FoldBoolF(a func(error) bool, f func(*pgx.ConnPool) bool) bool {
	return a(e.left)
}

 // map ErrConnPool => ResultConnPool
func (e errConnPool) MapConnPool(f func(v *pgx.ConnPool) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrConnPool => Result*pgx.ConnPool
func (e errConnPool) FoldConnPool(a *pgx.ConnPool, f func(v *pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errConnPool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrConnPool => ResultError
func (e errConnPool) MapError(f func(v *pgx.ConnPool) error) ResultError {
	return ErrError(e.left)
}
// fold ErrConnPool => Resulterror
func (e errConnPool) FoldError(a error, f func(v *pgx.ConnPool) error) error {
	return a
}
func (e errConnPool) FoldErrorF(a func(error) error, f func(*pgx.ConnPool) error) error {
	return a(e.left)
}

 // map ErrConnPool => ResultInt
func (e errConnPool) MapInt(f func(v *pgx.ConnPool) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrConnPool => Resultint
func (e errConnPool) FoldInt(a int, f func(v *pgx.ConnPool) int) int {
	return a
}
func (e errConnPool) FoldIntF(a func(error) int, f func(*pgx.ConnPool) int) int {
	return a(e.left)
}

 // map ErrConnPool => ResultMessage
func (e errConnPool) MapMessage(f func(v *pgx.ConnPool) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrConnPool => Result*mail.Message
func (e errConnPool) FoldMessage(a *mail.Message, f func(v *pgx.ConnPool) *mail.Message) *mail.Message {
	return a
}
func (e errConnPool) FoldMessageF(a func(error) *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrConnPool => ResultNode
func (e errConnPool) MapNode(f func(v *pgx.ConnPool) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrConnPool => ResultNode
func (e errConnPool) FoldNode(a Node, f func(v *pgx.ConnPool) Node) Node {
	return a
}
func (e errConnPool) FoldNodeF(a func(error) Node, f func(*pgx.ConnPool) Node) Node {
	return a(e.left)
}

 // map ErrConnPool => ResultReader
func (e errConnPool) MapReader(f func(v *pgx.ConnPool) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrConnPool => Resultio.Reader
func (e errConnPool) FoldReader(a io.Reader, f func(v *pgx.ConnPool) io.Reader) io.Reader {
	return a
}
func (e errConnPool) FoldReaderF(a func(error) io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrConnPool => ResultSByte
func (e errConnPool) MapSByte(f func(v *pgx.ConnPool) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrConnPool => Result[]byte
func (e errConnPool) FoldSByte(a []byte, f func(v *pgx.ConnPool) []byte) []byte {
	return a
}
func (e errConnPool) FoldSByteF(a func(error) []byte, f func(*pgx.ConnPool) []byte) []byte {
	return a(e.left)
}

 // map ErrConnPool => ResultSerializedMessage
func (e errConnPool) MapSerializedMessage(f func(v *pgx.ConnPool) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrConnPool => ResultSerializedMessage
func (e errConnPool) FoldSerializedMessage(a SerializedMessage, f func(v *pgx.ConnPool) SerializedMessage) SerializedMessage {
	return a
}
func (e errConnPool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrConnPool => ResultStore
func (e errConnPool) MapStore(f func(v *pgx.ConnPool) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrConnPool => ResultStore
func (e errConnPool) FoldStore(a Store, f func(v *pgx.ConnPool) Store) Store {
	return a
}
func (e errConnPool) FoldStoreF(a func(error) Store, f func(*pgx.ConnPool) Store) Store {
	return a(e.left)
}

 // map ErrConnPool => ResultString
func (e errConnPool) MapString(f func(v *pgx.ConnPool) string) ResultString {
	return ErrString(e.left)
}
// fold ErrConnPool => Resultstring
func (e errConnPool) FoldString(a string, f func(v *pgx.ConnPool) string) string {
	return a
}
func (e errConnPool) FoldStringF(a func(error) string, f func(*pgx.ConnPool) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okConnPool struct {
	right *pgx.ConnPool
}

func OkConnPool(v *pgx.ConnPool) okConnPool {
	return okConnPool{v}
}
// map ErrConnPool
func (s okConnPool) Map(f func(*pgx.ConnPool)) { f(s.right) }
func (s okConnPool) FoldF(l func(error), r func(*pgx.ConnPool)) { r(s.right) }

// map SoneConnPool => ResultBool
func (s okConnPool) MapBool(f func(*pgx.ConnPool) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkConnPool => bool
func (s okConnPool) FoldBool(a bool, f func(*pgx.ConnPool) bool) bool {
	return f(s.right)
}
func (s okConnPool) FoldBoolF(a func(error) bool, f func(*pgx.ConnPool) bool) bool {
	return f(s.right)
}

// map SoneConnPool => ResultConnPool
func (s okConnPool) MapConnPool(f func(*pgx.ConnPool) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkConnPool => *pgx.ConnPool
func (s okConnPool) FoldConnPool(a *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okConnPool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneConnPool => ResultError
func (s okConnPool) MapError(f func(*pgx.ConnPool) error) ResultError {
	return OkError(f(s.right))
}
// fold OkConnPool => error
func (s okConnPool) FoldError(a error, f func(*pgx.ConnPool) error) error {
	return f(s.right)
}
func (s okConnPool) FoldErrorF(a func(error) error, f func(*pgx.ConnPool) error) error {
	return f(s.right)
}

// map SoneConnPool => ResultInt
func (s okConnPool) MapInt(f func(*pgx.ConnPool) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkConnPool => int
func (s okConnPool) FoldInt(a int, f func(*pgx.ConnPool) int) int {
	return f(s.right)
}
func (s okConnPool) FoldIntF(a func(error) int, f func(*pgx.ConnPool) int) int {
	return f(s.right)
}

// map SoneConnPool => ResultMessage
func (s okConnPool) MapMessage(f func(*pgx.ConnPool) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkConnPool => *mail.Message
func (s okConnPool) FoldMessage(a *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okConnPool) FoldMessageF(a func(error) *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneConnPool => ResultNode
func (s okConnPool) MapNode(f func(*pgx.ConnPool) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkConnPool => Node
func (s okConnPool) FoldNode(a Node, f func(*pgx.ConnPool) Node) Node {
	return f(s.right)
}
func (s okConnPool) FoldNodeF(a func(error) Node, f func(*pgx.ConnPool) Node) Node {
	return f(s.right)
}

// map SoneConnPool => ResultReader
func (s okConnPool) MapReader(f func(*pgx.ConnPool) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkConnPool => io.Reader
func (s okConnPool) FoldReader(a io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return f(s.right)
}
func (s okConnPool) FoldReaderF(a func(error) io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneConnPool => ResultSByte
func (s okConnPool) MapSByte(f func(*pgx.ConnPool) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkConnPool => []byte
func (s okConnPool) FoldSByte(a []byte, f func(*pgx.ConnPool) []byte) []byte {
	return f(s.right)
}
func (s okConnPool) FoldSByteF(a func(error) []byte, f func(*pgx.ConnPool) []byte) []byte {
	return f(s.right)
}

// map SoneConnPool => ResultSerializedMessage
func (s okConnPool) MapSerializedMessage(f func(*pgx.ConnPool) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkConnPool => SerializedMessage
func (s okConnPool) FoldSerializedMessage(a SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okConnPool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneConnPool => ResultStore
func (s okConnPool) MapStore(f func(*pgx.ConnPool) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkConnPool => Store
func (s okConnPool) FoldStore(a Store, f func(*pgx.ConnPool) Store) Store {
	return f(s.right)
}
func (s okConnPool) FoldStoreF(a func(error) Store, f func(*pgx.ConnPool) Store) Store {
	return f(s.right)
}

// map SoneConnPool => ResultString
func (s okConnPool) MapString(f func(*pgx.ConnPool) string) ResultString {
	return OkString(f(s.right))
}
// fold OkConnPool => string
func (s okConnPool) FoldString(a string, f func(*pgx.ConnPool) string) string {
	return f(s.right)
}
func (s okConnPool) FoldStringF(a func(error) string, f func(*pgx.ConnPool) string) string {
	return f(s.right)
}
 // end of oks


// none
type errError struct{
	left error
}

func ErrError(err interface{}) ResultError {
	switch err.(type) {
		case string : return errError{errors.New(err.(string))}
		case error : return errError{err.(error)}
	} 
	return errError{errors.New("ErrError called with something else than string or error")}
}

// map ErrError
func (e errError) Map(f func(error)) {}
func (e errError) FoldF(l func(e error), r func(error)) { l(e.left) }

 // map ErrError => ResultBool
func (e errError) MapBool(f func(v error) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrError => Resultbool
func (e errError) FoldBool(a bool, f func(v error) bool) bool {
	return a
}
func (e errError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return a(e.left)
}

 // map ErrError => ResultConnPool
func (e errError) MapConnPool(f func(v error) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrError => Result*pgx.ConnPool
func (e errError) FoldConnPool(a *pgx.ConnPool, f func(v error) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errError) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrError => ResultError
func (e errError) MapError(f func(v error) error) ResultError {
	return ErrError(e.left)
}
// fold ErrError => Resulterror
func (e errError) FoldError(a error, f func(v error) error) error {
	return a
}
func (e errError) FoldErrorF(a func(error) error, f func(error) error) error {
	return a(e.left)
}

 // map ErrError => ResultInt
func (e errError) MapInt(f func(v error) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrError => Resultint
func (e errError) FoldInt(a int, f func(v error) int) int {
	return a
}
func (e errError) FoldIntF(a func(error) int, f func(error) int) int {
	return a(e.left)
}

 // map ErrError => ResultMessage
func (e errError) MapMessage(f func(v error) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrError => Result*mail.Message
func (e errError) FoldMessage(a *mail.Message, f func(v error) *mail.Message) *mail.Message {
	return a
}
func (e errError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrError => ResultNode
func (e errError) MapNode(f func(v error) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrError => ResultNode
func (e errError) FoldNode(a Node, f func(v error) Node) Node {
	return a
}
func (e errError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return a(e.left)
}

 // map ErrError => ResultReader
func (e errError) MapReader(f func(v error) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrError => Resultio.Reader
func (e errError) FoldReader(a io.Reader, f func(v error) io.Reader) io.Reader {
	return a
}
func (e errError) FoldReaderF(a func(error) io.Reader, f func(error) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrError => ResultSByte
func (e errError) MapSByte(f func(v error) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrError => Result[]byte
func (e errError) FoldSByte(a []byte, f func(v error) []byte) []byte {
	return a
}
func (e errError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return a(e.left)
}

 // map ErrError => ResultSerializedMessage
func (e errError) MapSerializedMessage(f func(v error) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrError => ResultSerializedMessage
func (e errError) FoldSerializedMessage(a SerializedMessage, f func(v error) SerializedMessage) SerializedMessage {
	return a
}
func (e errError) FoldSerializedMessageF(a func(error) SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrError => ResultStore
func (e errError) MapStore(f func(v error) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrError => ResultStore
func (e errError) FoldStore(a Store, f func(v error) Store) Store {
	return a
}
func (e errError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return a(e.left)
}

 // map ErrError => ResultString
func (e errError) MapString(f func(v error) string) ResultString {
	return ErrString(e.left)
}
// fold ErrError => Resultstring
func (e errError) FoldString(a string, f func(v error) string) string {
	return a
}
func (e errError) FoldStringF(a func(error) string, f func(error) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okError struct {
	right error
}

func OkError(v error) okError {
	return okError{v}
}
// map ErrError
func (s okError) Map(f func(error)) { f(s.right) }
func (s okError) FoldF(l func(error), r func(error)) { r(s.right) }

// map SoneError => ResultBool
func (s okError) MapBool(f func(error) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkError => bool
func (s okError) FoldBool(a bool, f func(error) bool) bool {
	return f(s.right)
}
func (s okError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return f(s.right)
}

// map SoneError => ResultConnPool
func (s okError) MapConnPool(f func(error) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkError => *pgx.ConnPool
func (s okError) FoldConnPool(a *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okError) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneError => ResultError
func (s okError) MapError(f func(error) error) ResultError {
	return OkError(f(s.right))
}
// fold OkError => error
func (s okError) FoldError(a error, f func(error) error) error {
	return f(s.right)
}
func (s okError) FoldErrorF(a func(error) error, f func(error) error) error {
	return f(s.right)
}

// map SoneError => ResultInt
func (s okError) MapInt(f func(error) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkError => int
func (s okError) FoldInt(a int, f func(error) int) int {
	return f(s.right)
}
func (s okError) FoldIntF(a func(error) int, f func(error) int) int {
	return f(s.right)
}

// map SoneError => ResultMessage
func (s okError) MapMessage(f func(error) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkError => *mail.Message
func (s okError) FoldMessage(a *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneError => ResultNode
func (s okError) MapNode(f func(error) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkError => Node
func (s okError) FoldNode(a Node, f func(error) Node) Node {
	return f(s.right)
}
func (s okError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return f(s.right)
}

// map SoneError => ResultReader
func (s okError) MapReader(f func(error) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkError => io.Reader
func (s okError) FoldReader(a io.Reader, f func(error) io.Reader) io.Reader {
	return f(s.right)
}
func (s okError) FoldReaderF(a func(error) io.Reader, f func(error) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneError => ResultSByte
func (s okError) MapSByte(f func(error) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkError => []byte
func (s okError) FoldSByte(a []byte, f func(error) []byte) []byte {
	return f(s.right)
}
func (s okError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return f(s.right)
}

// map SoneError => ResultSerializedMessage
func (s okError) MapSerializedMessage(f func(error) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkError => SerializedMessage
func (s okError) FoldSerializedMessage(a SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okError) FoldSerializedMessageF(a func(error) SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneError => ResultStore
func (s okError) MapStore(f func(error) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkError => Store
func (s okError) FoldStore(a Store, f func(error) Store) Store {
	return f(s.right)
}
func (s okError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return f(s.right)
}

// map SoneError => ResultString
func (s okError) MapString(f func(error) string) ResultString {
	return OkString(f(s.right))
}
// fold OkError => string
func (s okError) FoldString(a string, f func(error) string) string {
	return f(s.right)
}
func (s okError) FoldStringF(a func(error) string, f func(error) string) string {
	return f(s.right)
}
 // end of oks


// none
type errInt struct{
	left error
}

func ErrInt(err interface{}) ResultInt {
	switch err.(type) {
		case string : return errInt{errors.New(err.(string))}
		case error : return errInt{err.(error)}
	} 
	return errInt{errors.New("ErrInt called with something else than string or error")}
}

// map ErrInt
func (e errInt) Map(f func(int)) {}
func (e errInt) FoldF(l func(e error), r func(int)) { l(e.left) }

 // map ErrInt => ResultBool
func (e errInt) MapBool(f func(v int) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrInt => Resultbool
func (e errInt) FoldBool(a bool, f func(v int) bool) bool {
	return a
}
func (e errInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return a(e.left)
}

 // map ErrInt => ResultConnPool
func (e errInt) MapConnPool(f func(v int) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrInt => Result*pgx.ConnPool
func (e errInt) FoldConnPool(a *pgx.ConnPool, f func(v int) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errInt) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrInt => ResultError
func (e errInt) MapError(f func(v int) error) ResultError {
	return ErrError(e.left)
}
// fold ErrInt => Resulterror
func (e errInt) FoldError(a error, f func(v int) error) error {
	return a
}
func (e errInt) FoldErrorF(a func(error) error, f func(int) error) error {
	return a(e.left)
}

 // map ErrInt => ResultInt
func (e errInt) MapInt(f func(v int) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrInt => Resultint
func (e errInt) FoldInt(a int, f func(v int) int) int {
	return a
}
func (e errInt) FoldIntF(a func(error) int, f func(int) int) int {
	return a(e.left)
}

 // map ErrInt => ResultMessage
func (e errInt) MapMessage(f func(v int) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrInt => Result*mail.Message
func (e errInt) FoldMessage(a *mail.Message, f func(v int) *mail.Message) *mail.Message {
	return a
}
func (e errInt) FoldMessageF(a func(error) *mail.Message, f func(int) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrInt => ResultNode
func (e errInt) MapNode(f func(v int) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrInt => ResultNode
func (e errInt) FoldNode(a Node, f func(v int) Node) Node {
	return a
}
func (e errInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return a(e.left)
}

 // map ErrInt => ResultReader
func (e errInt) MapReader(f func(v int) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrInt => Resultio.Reader
func (e errInt) FoldReader(a io.Reader, f func(v int) io.Reader) io.Reader {
	return a
}
func (e errInt) FoldReaderF(a func(error) io.Reader, f func(int) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrInt => ResultSByte
func (e errInt) MapSByte(f func(v int) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrInt => Result[]byte
func (e errInt) FoldSByte(a []byte, f func(v int) []byte) []byte {
	return a
}
func (e errInt) FoldSByteF(a func(error) []byte, f func(int) []byte) []byte {
	return a(e.left)
}

 // map ErrInt => ResultSerializedMessage
func (e errInt) MapSerializedMessage(f func(v int) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrInt => ResultSerializedMessage
func (e errInt) FoldSerializedMessage(a SerializedMessage, f func(v int) SerializedMessage) SerializedMessage {
	return a
}
func (e errInt) FoldSerializedMessageF(a func(error) SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrInt => ResultStore
func (e errInt) MapStore(f func(v int) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrInt => ResultStore
func (e errInt) FoldStore(a Store, f func(v int) Store) Store {
	return a
}
func (e errInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return a(e.left)
}

 // map ErrInt => ResultString
func (e errInt) MapString(f func(v int) string) ResultString {
	return ErrString(e.left)
}
// fold ErrInt => Resultstring
func (e errInt) FoldString(a string, f func(v int) string) string {
	return a
}
func (e errInt) FoldStringF(a func(error) string, f func(int) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okInt struct {
	right int
}

func OkInt(v int) okInt {
	return okInt{v}
}
// map ErrInt
func (s okInt) Map(f func(int)) { f(s.right) }
func (s okInt) FoldF(l func(error), r func(int)) { r(s.right) }

// map SoneInt => ResultBool
func (s okInt) MapBool(f func(int) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkInt => bool
func (s okInt) FoldBool(a bool, f func(int) bool) bool {
	return f(s.right)
}
func (s okInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return f(s.right)
}

// map SoneInt => ResultConnPool
func (s okInt) MapConnPool(f func(int) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkInt => *pgx.ConnPool
func (s okInt) FoldConnPool(a *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okInt) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneInt => ResultError
func (s okInt) MapError(f func(int) error) ResultError {
	return OkError(f(s.right))
}
// fold OkInt => error
func (s okInt) FoldError(a error, f func(int) error) error {
	return f(s.right)
}
func (s okInt) FoldErrorF(a func(error) error, f func(int) error) error {
	return f(s.right)
}

// map SoneInt => ResultInt
func (s okInt) MapInt(f func(int) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkInt => int
func (s okInt) FoldInt(a int, f func(int) int) int {
	return f(s.right)
}
func (s okInt) FoldIntF(a func(error) int, f func(int) int) int {
	return f(s.right)
}

// map SoneInt => ResultMessage
func (s okInt) MapMessage(f func(int) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkInt => *mail.Message
func (s okInt) FoldMessage(a *mail.Message, f func(int) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okInt) FoldMessageF(a func(error) *mail.Message, f func(int) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneInt => ResultNode
func (s okInt) MapNode(f func(int) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkInt => Node
func (s okInt) FoldNode(a Node, f func(int) Node) Node {
	return f(s.right)
}
func (s okInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return f(s.right)
}

// map SoneInt => ResultReader
func (s okInt) MapReader(f func(int) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkInt => io.Reader
func (s okInt) FoldReader(a io.Reader, f func(int) io.Reader) io.Reader {
	return f(s.right)
}
func (s okInt) FoldReaderF(a func(error) io.Reader, f func(int) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneInt => ResultSByte
func (s okInt) MapSByte(f func(int) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkInt => []byte
func (s okInt) FoldSByte(a []byte, f func(int) []byte) []byte {
	return f(s.right)
}
func (s okInt) FoldSByteF(a func(error) []byte, f func(int) []byte) []byte {
	return f(s.right)
}

// map SoneInt => ResultSerializedMessage
func (s okInt) MapSerializedMessage(f func(int) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkInt => SerializedMessage
func (s okInt) FoldSerializedMessage(a SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okInt) FoldSerializedMessageF(a func(error) SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneInt => ResultStore
func (s okInt) MapStore(f func(int) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkInt => Store
func (s okInt) FoldStore(a Store, f func(int) Store) Store {
	return f(s.right)
}
func (s okInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return f(s.right)
}

// map SoneInt => ResultString
func (s okInt) MapString(f func(int) string) ResultString {
	return OkString(f(s.right))
}
// fold OkInt => string
func (s okInt) FoldString(a string, f func(int) string) string {
	return f(s.right)
}
func (s okInt) FoldStringF(a func(error) string, f func(int) string) string {
	return f(s.right)
}
 // end of oks


// none
type errMessage struct{
	left error
}

func ErrMessage(err interface{}) ResultMessage {
	switch err.(type) {
		case string : return errMessage{errors.New(err.(string))}
		case error : return errMessage{err.(error)}
	} 
	return errMessage{errors.New("ErrMessage called with something else than string or error")}
}

// map ErrMessage
func (e errMessage) Map(f func(*mail.Message)) {}
func (e errMessage) FoldF(l func(e error), r func(*mail.Message)) { l(e.left) }

 // map ErrMessage => ResultBool
func (e errMessage) MapBool(f func(v *mail.Message) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrMessage => Resultbool
func (e errMessage) FoldBool(a bool, f func(v *mail.Message) bool) bool {
	return a
}
func (e errMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return a(e.left)
}

 // map ErrMessage => ResultConnPool
func (e errMessage) MapConnPool(f func(v *mail.Message) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrMessage => Result*pgx.ConnPool
func (e errMessage) FoldConnPool(a *pgx.ConnPool, f func(v *mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrMessage => ResultError
func (e errMessage) MapError(f func(v *mail.Message) error) ResultError {
	return ErrError(e.left)
}
// fold ErrMessage => Resulterror
func (e errMessage) FoldError(a error, f func(v *mail.Message) error) error {
	return a
}
func (e errMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return a(e.left)
}

 // map ErrMessage => ResultInt
func (e errMessage) MapInt(f func(v *mail.Message) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrMessage => Resultint
func (e errMessage) FoldInt(a int, f func(v *mail.Message) int) int {
	return a
}
func (e errMessage) FoldIntF(a func(error) int, f func(*mail.Message) int) int {
	return a(e.left)
}

 // map ErrMessage => ResultMessage
func (e errMessage) MapMessage(f func(v *mail.Message) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrMessage => Result*mail.Message
func (e errMessage) FoldMessage(a *mail.Message, f func(v *mail.Message) *mail.Message) *mail.Message {
	return a
}
func (e errMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrMessage => ResultNode
func (e errMessage) MapNode(f func(v *mail.Message) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrMessage => ResultNode
func (e errMessage) FoldNode(a Node, f func(v *mail.Message) Node) Node {
	return a
}
func (e errMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return a(e.left)
}

 // map ErrMessage => ResultReader
func (e errMessage) MapReader(f func(v *mail.Message) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrMessage => Resultio.Reader
func (e errMessage) FoldReader(a io.Reader, f func(v *mail.Message) io.Reader) io.Reader {
	return a
}
func (e errMessage) FoldReaderF(a func(error) io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrMessage => ResultSByte
func (e errMessage) MapSByte(f func(v *mail.Message) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrMessage => Result[]byte
func (e errMessage) FoldSByte(a []byte, f func(v *mail.Message) []byte) []byte {
	return a
}
func (e errMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return a(e.left)
}

 // map ErrMessage => ResultSerializedMessage
func (e errMessage) MapSerializedMessage(f func(v *mail.Message) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrMessage => ResultSerializedMessage
func (e errMessage) FoldSerializedMessage(a SerializedMessage, f func(v *mail.Message) SerializedMessage) SerializedMessage {
	return a
}
func (e errMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrMessage => ResultStore
func (e errMessage) MapStore(f func(v *mail.Message) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrMessage => ResultStore
func (e errMessage) FoldStore(a Store, f func(v *mail.Message) Store) Store {
	return a
}
func (e errMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return a(e.left)
}

 // map ErrMessage => ResultString
func (e errMessage) MapString(f func(v *mail.Message) string) ResultString {
	return ErrString(e.left)
}
// fold ErrMessage => Resultstring
func (e errMessage) FoldString(a string, f func(v *mail.Message) string) string {
	return a
}
func (e errMessage) FoldStringF(a func(error) string, f func(*mail.Message) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okMessage struct {
	right *mail.Message
}

func OkMessage(v *mail.Message) okMessage {
	return okMessage{v}
}
// map ErrMessage
func (s okMessage) Map(f func(*mail.Message)) { f(s.right) }
func (s okMessage) FoldF(l func(error), r func(*mail.Message)) { r(s.right) }

// map SoneMessage => ResultBool
func (s okMessage) MapBool(f func(*mail.Message) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkMessage => bool
func (s okMessage) FoldBool(a bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}
func (s okMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}

// map SoneMessage => ResultConnPool
func (s okMessage) MapConnPool(f func(*mail.Message) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkMessage => *pgx.ConnPool
func (s okMessage) FoldConnPool(a *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneMessage => ResultError
func (s okMessage) MapError(f func(*mail.Message) error) ResultError {
	return OkError(f(s.right))
}
// fold OkMessage => error
func (s okMessage) FoldError(a error, f func(*mail.Message) error) error {
	return f(s.right)
}
func (s okMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return f(s.right)
}

// map SoneMessage => ResultInt
func (s okMessage) MapInt(f func(*mail.Message) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkMessage => int
func (s okMessage) FoldInt(a int, f func(*mail.Message) int) int {
	return f(s.right)
}
func (s okMessage) FoldIntF(a func(error) int, f func(*mail.Message) int) int {
	return f(s.right)
}

// map SoneMessage => ResultMessage
func (s okMessage) MapMessage(f func(*mail.Message) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkMessage => *mail.Message
func (s okMessage) FoldMessage(a *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneMessage => ResultNode
func (s okMessage) MapNode(f func(*mail.Message) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkMessage => Node
func (s okMessage) FoldNode(a Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}
func (s okMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}

// map SoneMessage => ResultReader
func (s okMessage) MapReader(f func(*mail.Message) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkMessage => io.Reader
func (s okMessage) FoldReader(a io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return f(s.right)
}
func (s okMessage) FoldReaderF(a func(error) io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneMessage => ResultSByte
func (s okMessage) MapSByte(f func(*mail.Message) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkMessage => []byte
func (s okMessage) FoldSByte(a []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}
func (s okMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}

// map SoneMessage => ResultSerializedMessage
func (s okMessage) MapSerializedMessage(f func(*mail.Message) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkMessage => SerializedMessage
func (s okMessage) FoldSerializedMessage(a SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneMessage => ResultStore
func (s okMessage) MapStore(f func(*mail.Message) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkMessage => Store
func (s okMessage) FoldStore(a Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}
func (s okMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}

// map SoneMessage => ResultString
func (s okMessage) MapString(f func(*mail.Message) string) ResultString {
	return OkString(f(s.right))
}
// fold OkMessage => string
func (s okMessage) FoldString(a string, f func(*mail.Message) string) string {
	return f(s.right)
}
func (s okMessage) FoldStringF(a func(error) string, f func(*mail.Message) string) string {
	return f(s.right)
}
 // end of oks


// none
type errNode struct{
	left error
}

func ErrNode(err interface{}) ResultNode {
	switch err.(type) {
		case string : return errNode{errors.New(err.(string))}
		case error : return errNode{err.(error)}
	} 
	return errNode{errors.New("ErrNode called with something else than string or error")}
}

// map ErrNode
func (e errNode) Map(f func(Node)) {}
func (e errNode) FoldF(l func(e error), r func(Node)) { l(e.left) }

 // map ErrNode => ResultBool
func (e errNode) MapBool(f func(v Node) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrNode => Resultbool
func (e errNode) FoldBool(a bool, f func(v Node) bool) bool {
	return a
}
func (e errNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return a(e.left)
}

 // map ErrNode => ResultConnPool
func (e errNode) MapConnPool(f func(v Node) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrNode => Result*pgx.ConnPool
func (e errNode) FoldConnPool(a *pgx.ConnPool, f func(v Node) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errNode) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrNode => ResultError
func (e errNode) MapError(f func(v Node) error) ResultError {
	return ErrError(e.left)
}
// fold ErrNode => Resulterror
func (e errNode) FoldError(a error, f func(v Node) error) error {
	return a
}
func (e errNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return a(e.left)
}

 // map ErrNode => ResultInt
func (e errNode) MapInt(f func(v Node) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrNode => Resultint
func (e errNode) FoldInt(a int, f func(v Node) int) int {
	return a
}
func (e errNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return a(e.left)
}

 // map ErrNode => ResultMessage
func (e errNode) MapMessage(f func(v Node) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrNode => Result*mail.Message
func (e errNode) FoldMessage(a *mail.Message, f func(v Node) *mail.Message) *mail.Message {
	return a
}
func (e errNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrNode => ResultNode
func (e errNode) MapNode(f func(v Node) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrNode => ResultNode
func (e errNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}
func (e errNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return a(e.left)
}

 // map ErrNode => ResultReader
func (e errNode) MapReader(f func(v Node) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrNode => Resultio.Reader
func (e errNode) FoldReader(a io.Reader, f func(v Node) io.Reader) io.Reader {
	return a
}
func (e errNode) FoldReaderF(a func(error) io.Reader, f func(Node) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrNode => ResultSByte
func (e errNode) MapSByte(f func(v Node) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrNode => Result[]byte
func (e errNode) FoldSByte(a []byte, f func(v Node) []byte) []byte {
	return a
}
func (e errNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return a(e.left)
}

 // map ErrNode => ResultSerializedMessage
func (e errNode) MapSerializedMessage(f func(v Node) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrNode => ResultSerializedMessage
func (e errNode) FoldSerializedMessage(a SerializedMessage, f func(v Node) SerializedMessage) SerializedMessage {
	return a
}
func (e errNode) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrNode => ResultStore
func (e errNode) MapStore(f func(v Node) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrNode => ResultStore
func (e errNode) FoldStore(a Store, f func(v Node) Store) Store {
	return a
}
func (e errNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return a(e.left)
}

 // map ErrNode => ResultString
func (e errNode) MapString(f func(v Node) string) ResultString {
	return ErrString(e.left)
}
// fold ErrNode => Resultstring
func (e errNode) FoldString(a string, f func(v Node) string) string {
	return a
}
func (e errNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okNode struct {
	right Node
}

func OkNode(v Node) okNode {
	return okNode{v}
}
// map ErrNode
func (s okNode) Map(f func(Node)) { f(s.right) }
func (s okNode) FoldF(l func(error), r func(Node)) { r(s.right) }

// map SoneNode => ResultBool
func (s okNode) MapBool(f func(Node) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkNode => bool
func (s okNode) FoldBool(a bool, f func(Node) bool) bool {
	return f(s.right)
}
func (s okNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return f(s.right)
}

// map SoneNode => ResultConnPool
func (s okNode) MapConnPool(f func(Node) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkNode => *pgx.ConnPool
func (s okNode) FoldConnPool(a *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okNode) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneNode => ResultError
func (s okNode) MapError(f func(Node) error) ResultError {
	return OkError(f(s.right))
}
// fold OkNode => error
func (s okNode) FoldError(a error, f func(Node) error) error {
	return f(s.right)
}
func (s okNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return f(s.right)
}

// map SoneNode => ResultInt
func (s okNode) MapInt(f func(Node) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkNode => int
func (s okNode) FoldInt(a int, f func(Node) int) int {
	return f(s.right)
}
func (s okNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return f(s.right)
}

// map SoneNode => ResultMessage
func (s okNode) MapMessage(f func(Node) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkNode => *mail.Message
func (s okNode) FoldMessage(a *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneNode => ResultNode
func (s okNode) MapNode(f func(Node) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkNode => Node
func (s okNode) FoldNode(a Node, f func(Node) Node) Node {
	return f(s.right)
}
func (s okNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return f(s.right)
}

// map SoneNode => ResultReader
func (s okNode) MapReader(f func(Node) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkNode => io.Reader
func (s okNode) FoldReader(a io.Reader, f func(Node) io.Reader) io.Reader {
	return f(s.right)
}
func (s okNode) FoldReaderF(a func(error) io.Reader, f func(Node) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneNode => ResultSByte
func (s okNode) MapSByte(f func(Node) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkNode => []byte
func (s okNode) FoldSByte(a []byte, f func(Node) []byte) []byte {
	return f(s.right)
}
func (s okNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return f(s.right)
}

// map SoneNode => ResultSerializedMessage
func (s okNode) MapSerializedMessage(f func(Node) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkNode => SerializedMessage
func (s okNode) FoldSerializedMessage(a SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okNode) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneNode => ResultStore
func (s okNode) MapStore(f func(Node) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkNode => Store
func (s okNode) FoldStore(a Store, f func(Node) Store) Store {
	return f(s.right)
}
func (s okNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return f(s.right)
}

// map SoneNode => ResultString
func (s okNode) MapString(f func(Node) string) ResultString {
	return OkString(f(s.right))
}
// fold OkNode => string
func (s okNode) FoldString(a string, f func(Node) string) string {
	return f(s.right)
}
func (s okNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return f(s.right)
}
 // end of oks


// none
type errReader struct{
	left error
}

func ErrReader(err interface{}) ResultReader {
	switch err.(type) {
		case string : return errReader{errors.New(err.(string))}
		case error : return errReader{err.(error)}
	} 
	return errReader{errors.New("ErrReader called with something else than string or error")}
}

// map ErrReader
func (e errReader) Map(f func(io.Reader)) {}
func (e errReader) FoldF(l func(e error), r func(io.Reader)) { l(e.left) }

 // map ErrReader => ResultBool
func (e errReader) MapBool(f func(v io.Reader) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrReader => Resultbool
func (e errReader) FoldBool(a bool, f func(v io.Reader) bool) bool {
	return a
}
func (e errReader) FoldBoolF(a func(error) bool, f func(io.Reader) bool) bool {
	return a(e.left)
}

 // map ErrReader => ResultConnPool
func (e errReader) MapConnPool(f func(v io.Reader) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrReader => Result*pgx.ConnPool
func (e errReader) FoldConnPool(a *pgx.ConnPool, f func(v io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errReader) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrReader => ResultError
func (e errReader) MapError(f func(v io.Reader) error) ResultError {
	return ErrError(e.left)
}
// fold ErrReader => Resulterror
func (e errReader) FoldError(a error, f func(v io.Reader) error) error {
	return a
}
func (e errReader) FoldErrorF(a func(error) error, f func(io.Reader) error) error {
	return a(e.left)
}

 // map ErrReader => ResultInt
func (e errReader) MapInt(f func(v io.Reader) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrReader => Resultint
func (e errReader) FoldInt(a int, f func(v io.Reader) int) int {
	return a
}
func (e errReader) FoldIntF(a func(error) int, f func(io.Reader) int) int {
	return a(e.left)
}

 // map ErrReader => ResultMessage
func (e errReader) MapMessage(f func(v io.Reader) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrReader => Result*mail.Message
func (e errReader) FoldMessage(a *mail.Message, f func(v io.Reader) *mail.Message) *mail.Message {
	return a
}
func (e errReader) FoldMessageF(a func(error) *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrReader => ResultNode
func (e errReader) MapNode(f func(v io.Reader) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrReader => ResultNode
func (e errReader) FoldNode(a Node, f func(v io.Reader) Node) Node {
	return a
}
func (e errReader) FoldNodeF(a func(error) Node, f func(io.Reader) Node) Node {
	return a(e.left)
}

 // map ErrReader => ResultReader
func (e errReader) MapReader(f func(v io.Reader) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrReader => Resultio.Reader
func (e errReader) FoldReader(a io.Reader, f func(v io.Reader) io.Reader) io.Reader {
	return a
}
func (e errReader) FoldReaderF(a func(error) io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrReader => ResultSByte
func (e errReader) MapSByte(f func(v io.Reader) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrReader => Result[]byte
func (e errReader) FoldSByte(a []byte, f func(v io.Reader) []byte) []byte {
	return a
}
func (e errReader) FoldSByteF(a func(error) []byte, f func(io.Reader) []byte) []byte {
	return a(e.left)
}

 // map ErrReader => ResultSerializedMessage
func (e errReader) MapSerializedMessage(f func(v io.Reader) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrReader => ResultSerializedMessage
func (e errReader) FoldSerializedMessage(a SerializedMessage, f func(v io.Reader) SerializedMessage) SerializedMessage {
	return a
}
func (e errReader) FoldSerializedMessageF(a func(error) SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrReader => ResultStore
func (e errReader) MapStore(f func(v io.Reader) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrReader => ResultStore
func (e errReader) FoldStore(a Store, f func(v io.Reader) Store) Store {
	return a
}
func (e errReader) FoldStoreF(a func(error) Store, f func(io.Reader) Store) Store {
	return a(e.left)
}

 // map ErrReader => ResultString
func (e errReader) MapString(f func(v io.Reader) string) ResultString {
	return ErrString(e.left)
}
// fold ErrReader => Resultstring
func (e errReader) FoldString(a string, f func(v io.Reader) string) string {
	return a
}
func (e errReader) FoldStringF(a func(error) string, f func(io.Reader) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okReader struct {
	right io.Reader
}

func OkReader(v io.Reader) okReader {
	return okReader{v}
}
// map ErrReader
func (s okReader) Map(f func(io.Reader)) { f(s.right) }
func (s okReader) FoldF(l func(error), r func(io.Reader)) { r(s.right) }

// map SoneReader => ResultBool
func (s okReader) MapBool(f func(io.Reader) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkReader => bool
func (s okReader) FoldBool(a bool, f func(io.Reader) bool) bool {
	return f(s.right)
}
func (s okReader) FoldBoolF(a func(error) bool, f func(io.Reader) bool) bool {
	return f(s.right)
}

// map SoneReader => ResultConnPool
func (s okReader) MapConnPool(f func(io.Reader) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkReader => *pgx.ConnPool
func (s okReader) FoldConnPool(a *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okReader) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneReader => ResultError
func (s okReader) MapError(f func(io.Reader) error) ResultError {
	return OkError(f(s.right))
}
// fold OkReader => error
func (s okReader) FoldError(a error, f func(io.Reader) error) error {
	return f(s.right)
}
func (s okReader) FoldErrorF(a func(error) error, f func(io.Reader) error) error {
	return f(s.right)
}

// map SoneReader => ResultInt
func (s okReader) MapInt(f func(io.Reader) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkReader => int
func (s okReader) FoldInt(a int, f func(io.Reader) int) int {
	return f(s.right)
}
func (s okReader) FoldIntF(a func(error) int, f func(io.Reader) int) int {
	return f(s.right)
}

// map SoneReader => ResultMessage
func (s okReader) MapMessage(f func(io.Reader) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkReader => *mail.Message
func (s okReader) FoldMessage(a *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okReader) FoldMessageF(a func(error) *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneReader => ResultNode
func (s okReader) MapNode(f func(io.Reader) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkReader => Node
func (s okReader) FoldNode(a Node, f func(io.Reader) Node) Node {
	return f(s.right)
}
func (s okReader) FoldNodeF(a func(error) Node, f func(io.Reader) Node) Node {
	return f(s.right)
}

// map SoneReader => ResultReader
func (s okReader) MapReader(f func(io.Reader) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkReader => io.Reader
func (s okReader) FoldReader(a io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return f(s.right)
}
func (s okReader) FoldReaderF(a func(error) io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneReader => ResultSByte
func (s okReader) MapSByte(f func(io.Reader) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkReader => []byte
func (s okReader) FoldSByte(a []byte, f func(io.Reader) []byte) []byte {
	return f(s.right)
}
func (s okReader) FoldSByteF(a func(error) []byte, f func(io.Reader) []byte) []byte {
	return f(s.right)
}

// map SoneReader => ResultSerializedMessage
func (s okReader) MapSerializedMessage(f func(io.Reader) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkReader => SerializedMessage
func (s okReader) FoldSerializedMessage(a SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okReader) FoldSerializedMessageF(a func(error) SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneReader => ResultStore
func (s okReader) MapStore(f func(io.Reader) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkReader => Store
func (s okReader) FoldStore(a Store, f func(io.Reader) Store) Store {
	return f(s.right)
}
func (s okReader) FoldStoreF(a func(error) Store, f func(io.Reader) Store) Store {
	return f(s.right)
}

// map SoneReader => ResultString
func (s okReader) MapString(f func(io.Reader) string) ResultString {
	return OkString(f(s.right))
}
// fold OkReader => string
func (s okReader) FoldString(a string, f func(io.Reader) string) string {
	return f(s.right)
}
func (s okReader) FoldStringF(a func(error) string, f func(io.Reader) string) string {
	return f(s.right)
}
 // end of oks


// none
type errSByte struct{
	left error
}

func ErrSByte(err interface{}) ResultSByte {
	switch err.(type) {
		case string : return errSByte{errors.New(err.(string))}
		case error : return errSByte{err.(error)}
	} 
	return errSByte{errors.New("ErrSByte called with something else than string or error")}
}

// map ErrSByte
func (e errSByte) Map(f func([]byte)) {}
func (e errSByte) FoldF(l func(e error), r func([]byte)) { l(e.left) }

 // map ErrSByte => ResultBool
func (e errSByte) MapBool(f func(v []byte) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrSByte => Resultbool
func (e errSByte) FoldBool(a bool, f func(v []byte) bool) bool {
	return a
}
func (e errSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return a(e.left)
}

 // map ErrSByte => ResultConnPool
func (e errSByte) MapConnPool(f func(v []byte) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrSByte => Result*pgx.ConnPool
func (e errSByte) FoldConnPool(a *pgx.ConnPool, f func(v []byte) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errSByte) FoldConnPoolF(a func(error) *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrSByte => ResultError
func (e errSByte) MapError(f func(v []byte) error) ResultError {
	return ErrError(e.left)
}
// fold ErrSByte => Resulterror
func (e errSByte) FoldError(a error, f func(v []byte) error) error {
	return a
}
func (e errSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return a(e.left)
}

 // map ErrSByte => ResultInt
func (e errSByte) MapInt(f func(v []byte) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrSByte => Resultint
func (e errSByte) FoldInt(a int, f func(v []byte) int) int {
	return a
}
func (e errSByte) FoldIntF(a func(error) int, f func([]byte) int) int {
	return a(e.left)
}

 // map ErrSByte => ResultMessage
func (e errSByte) MapMessage(f func(v []byte) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrSByte => Result*mail.Message
func (e errSByte) FoldMessage(a *mail.Message, f func(v []byte) *mail.Message) *mail.Message {
	return a
}
func (e errSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrSByte => ResultNode
func (e errSByte) MapNode(f func(v []byte) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrSByte => ResultNode
func (e errSByte) FoldNode(a Node, f func(v []byte) Node) Node {
	return a
}
func (e errSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return a(e.left)
}

 // map ErrSByte => ResultReader
func (e errSByte) MapReader(f func(v []byte) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrSByte => Resultio.Reader
func (e errSByte) FoldReader(a io.Reader, f func(v []byte) io.Reader) io.Reader {
	return a
}
func (e errSByte) FoldReaderF(a func(error) io.Reader, f func([]byte) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrSByte => ResultSByte
func (e errSByte) MapSByte(f func(v []byte) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrSByte => Result[]byte
func (e errSByte) FoldSByte(a []byte, f func(v []byte) []byte) []byte {
	return a
}
func (e errSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return a(e.left)
}

 // map ErrSByte => ResultSerializedMessage
func (e errSByte) MapSerializedMessage(f func(v []byte) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrSByte => ResultSerializedMessage
func (e errSByte) FoldSerializedMessage(a SerializedMessage, f func(v []byte) SerializedMessage) SerializedMessage {
	return a
}
func (e errSByte) FoldSerializedMessageF(a func(error) SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrSByte => ResultStore
func (e errSByte) MapStore(f func(v []byte) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrSByte => ResultStore
func (e errSByte) FoldStore(a Store, f func(v []byte) Store) Store {
	return a
}
func (e errSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return a(e.left)
}

 // map ErrSByte => ResultString
func (e errSByte) MapString(f func(v []byte) string) ResultString {
	return ErrString(e.left)
}
// fold ErrSByte => Resultstring
func (e errSByte) FoldString(a string, f func(v []byte) string) string {
	return a
}
func (e errSByte) FoldStringF(a func(error) string, f func([]byte) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okSByte struct {
	right []byte
}

func OkSByte(v []byte) okSByte {
	return okSByte{v}
}
// map ErrSByte
func (s okSByte) Map(f func([]byte)) { f(s.right) }
func (s okSByte) FoldF(l func(error), r func([]byte)) { r(s.right) }

// map SoneSByte => ResultBool
func (s okSByte) MapBool(f func([]byte) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkSByte => bool
func (s okSByte) FoldBool(a bool, f func([]byte) bool) bool {
	return f(s.right)
}
func (s okSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return f(s.right)
}

// map SoneSByte => ResultConnPool
func (s okSByte) MapConnPool(f func([]byte) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkSByte => *pgx.ConnPool
func (s okSByte) FoldConnPool(a *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okSByte) FoldConnPoolF(a func(error) *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneSByte => ResultError
func (s okSByte) MapError(f func([]byte) error) ResultError {
	return OkError(f(s.right))
}
// fold OkSByte => error
func (s okSByte) FoldError(a error, f func([]byte) error) error {
	return f(s.right)
}
func (s okSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return f(s.right)
}

// map SoneSByte => ResultInt
func (s okSByte) MapInt(f func([]byte) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkSByte => int
func (s okSByte) FoldInt(a int, f func([]byte) int) int {
	return f(s.right)
}
func (s okSByte) FoldIntF(a func(error) int, f func([]byte) int) int {
	return f(s.right)
}

// map SoneSByte => ResultMessage
func (s okSByte) MapMessage(f func([]byte) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkSByte => *mail.Message
func (s okSByte) FoldMessage(a *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneSByte => ResultNode
func (s okSByte) MapNode(f func([]byte) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkSByte => Node
func (s okSByte) FoldNode(a Node, f func([]byte) Node) Node {
	return f(s.right)
}
func (s okSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return f(s.right)
}

// map SoneSByte => ResultReader
func (s okSByte) MapReader(f func([]byte) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkSByte => io.Reader
func (s okSByte) FoldReader(a io.Reader, f func([]byte) io.Reader) io.Reader {
	return f(s.right)
}
func (s okSByte) FoldReaderF(a func(error) io.Reader, f func([]byte) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneSByte => ResultSByte
func (s okSByte) MapSByte(f func([]byte) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkSByte => []byte
func (s okSByte) FoldSByte(a []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}
func (s okSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}

// map SoneSByte => ResultSerializedMessage
func (s okSByte) MapSerializedMessage(f func([]byte) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkSByte => SerializedMessage
func (s okSByte) FoldSerializedMessage(a SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okSByte) FoldSerializedMessageF(a func(error) SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneSByte => ResultStore
func (s okSByte) MapStore(f func([]byte) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkSByte => Store
func (s okSByte) FoldStore(a Store, f func([]byte) Store) Store {
	return f(s.right)
}
func (s okSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return f(s.right)
}

// map SoneSByte => ResultString
func (s okSByte) MapString(f func([]byte) string) ResultString {
	return OkString(f(s.right))
}
// fold OkSByte => string
func (s okSByte) FoldString(a string, f func([]byte) string) string {
	return f(s.right)
}
func (s okSByte) FoldStringF(a func(error) string, f func([]byte) string) string {
	return f(s.right)
}
 // end of oks


// none
type errSerializedMessage struct{
	left error
}

func ErrSerializedMessage(err interface{}) ResultSerializedMessage {
	switch err.(type) {
		case string : return errSerializedMessage{errors.New(err.(string))}
		case error : return errSerializedMessage{err.(error)}
	} 
	return errSerializedMessage{errors.New("ErrSerializedMessage called with something else than string or error")}
}

// map ErrSerializedMessage
func (e errSerializedMessage) Map(f func(SerializedMessage)) {}
func (e errSerializedMessage) FoldF(l func(e error), r func(SerializedMessage)) { l(e.left) }

 // map ErrSerializedMessage => ResultBool
func (e errSerializedMessage) MapBool(f func(v SerializedMessage) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrSerializedMessage => Resultbool
func (e errSerializedMessage) FoldBool(a bool, f func(v SerializedMessage) bool) bool {
	return a
}
func (e errSerializedMessage) FoldBoolF(a func(error) bool, f func(SerializedMessage) bool) bool {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultConnPool
func (e errSerializedMessage) MapConnPool(f func(v SerializedMessage) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrSerializedMessage => Result*pgx.ConnPool
func (e errSerializedMessage) FoldConnPool(a *pgx.ConnPool, f func(v SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errSerializedMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultError
func (e errSerializedMessage) MapError(f func(v SerializedMessage) error) ResultError {
	return ErrError(e.left)
}
// fold ErrSerializedMessage => Resulterror
func (e errSerializedMessage) FoldError(a error, f func(v SerializedMessage) error) error {
	return a
}
func (e errSerializedMessage) FoldErrorF(a func(error) error, f func(SerializedMessage) error) error {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultInt
func (e errSerializedMessage) MapInt(f func(v SerializedMessage) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrSerializedMessage => Resultint
func (e errSerializedMessage) FoldInt(a int, f func(v SerializedMessage) int) int {
	return a
}
func (e errSerializedMessage) FoldIntF(a func(error) int, f func(SerializedMessage) int) int {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultMessage
func (e errSerializedMessage) MapMessage(f func(v SerializedMessage) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrSerializedMessage => Result*mail.Message
func (e errSerializedMessage) FoldMessage(a *mail.Message, f func(v SerializedMessage) *mail.Message) *mail.Message {
	return a
}
func (e errSerializedMessage) FoldMessageF(a func(error) *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultNode
func (e errSerializedMessage) MapNode(f func(v SerializedMessage) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrSerializedMessage => ResultNode
func (e errSerializedMessage) FoldNode(a Node, f func(v SerializedMessage) Node) Node {
	return a
}
func (e errSerializedMessage) FoldNodeF(a func(error) Node, f func(SerializedMessage) Node) Node {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultReader
func (e errSerializedMessage) MapReader(f func(v SerializedMessage) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrSerializedMessage => Resultio.Reader
func (e errSerializedMessage) FoldReader(a io.Reader, f func(v SerializedMessage) io.Reader) io.Reader {
	return a
}
func (e errSerializedMessage) FoldReaderF(a func(error) io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultSByte
func (e errSerializedMessage) MapSByte(f func(v SerializedMessage) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrSerializedMessage => Result[]byte
func (e errSerializedMessage) FoldSByte(a []byte, f func(v SerializedMessage) []byte) []byte {
	return a
}
func (e errSerializedMessage) FoldSByteF(a func(error) []byte, f func(SerializedMessage) []byte) []byte {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultSerializedMessage
func (e errSerializedMessage) MapSerializedMessage(f func(v SerializedMessage) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrSerializedMessage => ResultSerializedMessage
func (e errSerializedMessage) FoldSerializedMessage(a SerializedMessage, f func(v SerializedMessage) SerializedMessage) SerializedMessage {
	return a
}
func (e errSerializedMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultStore
func (e errSerializedMessage) MapStore(f func(v SerializedMessage) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrSerializedMessage => ResultStore
func (e errSerializedMessage) FoldStore(a Store, f func(v SerializedMessage) Store) Store {
	return a
}
func (e errSerializedMessage) FoldStoreF(a func(error) Store, f func(SerializedMessage) Store) Store {
	return a(e.left)
}

 // map ErrSerializedMessage => ResultString
func (e errSerializedMessage) MapString(f func(v SerializedMessage) string) ResultString {
	return ErrString(e.left)
}
// fold ErrSerializedMessage => Resultstring
func (e errSerializedMessage) FoldString(a string, f func(v SerializedMessage) string) string {
	return a
}
func (e errSerializedMessage) FoldStringF(a func(error) string, f func(SerializedMessage) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okSerializedMessage struct {
	right SerializedMessage
}

func OkSerializedMessage(v SerializedMessage) okSerializedMessage {
	return okSerializedMessage{v}
}
// map ErrSerializedMessage
func (s okSerializedMessage) Map(f func(SerializedMessage)) { f(s.right) }
func (s okSerializedMessage) FoldF(l func(error), r func(SerializedMessage)) { r(s.right) }

// map SoneSerializedMessage => ResultBool
func (s okSerializedMessage) MapBool(f func(SerializedMessage) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkSerializedMessage => bool
func (s okSerializedMessage) FoldBool(a bool, f func(SerializedMessage) bool) bool {
	return f(s.right)
}
func (s okSerializedMessage) FoldBoolF(a func(error) bool, f func(SerializedMessage) bool) bool {
	return f(s.right)
}

// map SoneSerializedMessage => ResultConnPool
func (s okSerializedMessage) MapConnPool(f func(SerializedMessage) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkSerializedMessage => *pgx.ConnPool
func (s okSerializedMessage) FoldConnPool(a *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okSerializedMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneSerializedMessage => ResultError
func (s okSerializedMessage) MapError(f func(SerializedMessage) error) ResultError {
	return OkError(f(s.right))
}
// fold OkSerializedMessage => error
func (s okSerializedMessage) FoldError(a error, f func(SerializedMessage) error) error {
	return f(s.right)
}
func (s okSerializedMessage) FoldErrorF(a func(error) error, f func(SerializedMessage) error) error {
	return f(s.right)
}

// map SoneSerializedMessage => ResultInt
func (s okSerializedMessage) MapInt(f func(SerializedMessage) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkSerializedMessage => int
func (s okSerializedMessage) FoldInt(a int, f func(SerializedMessage) int) int {
	return f(s.right)
}
func (s okSerializedMessage) FoldIntF(a func(error) int, f func(SerializedMessage) int) int {
	return f(s.right)
}

// map SoneSerializedMessage => ResultMessage
func (s okSerializedMessage) MapMessage(f func(SerializedMessage) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkSerializedMessage => *mail.Message
func (s okSerializedMessage) FoldMessage(a *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okSerializedMessage) FoldMessageF(a func(error) *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneSerializedMessage => ResultNode
func (s okSerializedMessage) MapNode(f func(SerializedMessage) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkSerializedMessage => Node
func (s okSerializedMessage) FoldNode(a Node, f func(SerializedMessage) Node) Node {
	return f(s.right)
}
func (s okSerializedMessage) FoldNodeF(a func(error) Node, f func(SerializedMessage) Node) Node {
	return f(s.right)
}

// map SoneSerializedMessage => ResultReader
func (s okSerializedMessage) MapReader(f func(SerializedMessage) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkSerializedMessage => io.Reader
func (s okSerializedMessage) FoldReader(a io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return f(s.right)
}
func (s okSerializedMessage) FoldReaderF(a func(error) io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneSerializedMessage => ResultSByte
func (s okSerializedMessage) MapSByte(f func(SerializedMessage) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkSerializedMessage => []byte
func (s okSerializedMessage) FoldSByte(a []byte, f func(SerializedMessage) []byte) []byte {
	return f(s.right)
}
func (s okSerializedMessage) FoldSByteF(a func(error) []byte, f func(SerializedMessage) []byte) []byte {
	return f(s.right)
}

// map SoneSerializedMessage => ResultSerializedMessage
func (s okSerializedMessage) MapSerializedMessage(f func(SerializedMessage) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkSerializedMessage => SerializedMessage
func (s okSerializedMessage) FoldSerializedMessage(a SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okSerializedMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneSerializedMessage => ResultStore
func (s okSerializedMessage) MapStore(f func(SerializedMessage) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkSerializedMessage => Store
func (s okSerializedMessage) FoldStore(a Store, f func(SerializedMessage) Store) Store {
	return f(s.right)
}
func (s okSerializedMessage) FoldStoreF(a func(error) Store, f func(SerializedMessage) Store) Store {
	return f(s.right)
}

// map SoneSerializedMessage => ResultString
func (s okSerializedMessage) MapString(f func(SerializedMessage) string) ResultString {
	return OkString(f(s.right))
}
// fold OkSerializedMessage => string
func (s okSerializedMessage) FoldString(a string, f func(SerializedMessage) string) string {
	return f(s.right)
}
func (s okSerializedMessage) FoldStringF(a func(error) string, f func(SerializedMessage) string) string {
	return f(s.right)
}
 // end of oks


// none
type errStore struct{
	left error
}

func ErrStore(err interface{}) ResultStore {
	switch err.(type) {
		case string : return errStore{errors.New(err.(string))}
		case error : return errStore{err.(error)}
	} 
	return errStore{errors.New("ErrStore called with something else than string or error")}
}

// map ErrStore
func (e errStore) Map(f func(Store)) {}
func (e errStore) FoldF(l func(e error), r func(Store)) { l(e.left) }

 // map ErrStore => ResultBool
func (e errStore) MapBool(f func(v Store) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrStore => Resultbool
func (e errStore) FoldBool(a bool, f func(v Store) bool) bool {
	return a
}
func (e errStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return a(e.left)
}

 // map ErrStore => ResultConnPool
func (e errStore) MapConnPool(f func(v Store) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrStore => Result*pgx.ConnPool
func (e errStore) FoldConnPool(a *pgx.ConnPool, f func(v Store) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errStore) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrStore => ResultError
func (e errStore) MapError(f func(v Store) error) ResultError {
	return ErrError(e.left)
}
// fold ErrStore => Resulterror
func (e errStore) FoldError(a error, f func(v Store) error) error {
	return a
}
func (e errStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return a(e.left)
}

 // map ErrStore => ResultInt
func (e errStore) MapInt(f func(v Store) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrStore => Resultint
func (e errStore) FoldInt(a int, f func(v Store) int) int {
	return a
}
func (e errStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return a(e.left)
}

 // map ErrStore => ResultMessage
func (e errStore) MapMessage(f func(v Store) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrStore => Result*mail.Message
func (e errStore) FoldMessage(a *mail.Message, f func(v Store) *mail.Message) *mail.Message {
	return a
}
func (e errStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrStore => ResultNode
func (e errStore) MapNode(f func(v Store) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrStore => ResultNode
func (e errStore) FoldNode(a Node, f func(v Store) Node) Node {
	return a
}
func (e errStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return a(e.left)
}

 // map ErrStore => ResultReader
func (e errStore) MapReader(f func(v Store) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrStore => Resultio.Reader
func (e errStore) FoldReader(a io.Reader, f func(v Store) io.Reader) io.Reader {
	return a
}
func (e errStore) FoldReaderF(a func(error) io.Reader, f func(Store) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrStore => ResultSByte
func (e errStore) MapSByte(f func(v Store) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrStore => Result[]byte
func (e errStore) FoldSByte(a []byte, f func(v Store) []byte) []byte {
	return a
}
func (e errStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return a(e.left)
}

 // map ErrStore => ResultSerializedMessage
func (e errStore) MapSerializedMessage(f func(v Store) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrStore => ResultSerializedMessage
func (e errStore) FoldSerializedMessage(a SerializedMessage, f func(v Store) SerializedMessage) SerializedMessage {
	return a
}
func (e errStore) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrStore => ResultStore
func (e errStore) MapStore(f func(v Store) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrStore => ResultStore
func (e errStore) FoldStore(a Store, f func(v Store) Store) Store {
	return a
}
func (e errStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return a(e.left)
}

 // map ErrStore => ResultString
func (e errStore) MapString(f func(v Store) string) ResultString {
	return ErrString(e.left)
}
// fold ErrStore => Resultstring
func (e errStore) FoldString(a string, f func(v Store) string) string {
	return a
}
func (e errStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okStore struct {
	right Store
}

func OkStore(v Store) okStore {
	return okStore{v}
}
// map ErrStore
func (s okStore) Map(f func(Store)) { f(s.right) }
func (s okStore) FoldF(l func(error), r func(Store)) { r(s.right) }

// map SoneStore => ResultBool
func (s okStore) MapBool(f func(Store) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkStore => bool
func (s okStore) FoldBool(a bool, f func(Store) bool) bool {
	return f(s.right)
}
func (s okStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return f(s.right)
}

// map SoneStore => ResultConnPool
func (s okStore) MapConnPool(f func(Store) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkStore => *pgx.ConnPool
func (s okStore) FoldConnPool(a *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okStore) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneStore => ResultError
func (s okStore) MapError(f func(Store) error) ResultError {
	return OkError(f(s.right))
}
// fold OkStore => error
func (s okStore) FoldError(a error, f func(Store) error) error {
	return f(s.right)
}
func (s okStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return f(s.right)
}

// map SoneStore => ResultInt
func (s okStore) MapInt(f func(Store) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkStore => int
func (s okStore) FoldInt(a int, f func(Store) int) int {
	return f(s.right)
}
func (s okStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return f(s.right)
}

// map SoneStore => ResultMessage
func (s okStore) MapMessage(f func(Store) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkStore => *mail.Message
func (s okStore) FoldMessage(a *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneStore => ResultNode
func (s okStore) MapNode(f func(Store) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkStore => Node
func (s okStore) FoldNode(a Node, f func(Store) Node) Node {
	return f(s.right)
}
func (s okStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return f(s.right)
}

// map SoneStore => ResultReader
func (s okStore) MapReader(f func(Store) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkStore => io.Reader
func (s okStore) FoldReader(a io.Reader, f func(Store) io.Reader) io.Reader {
	return f(s.right)
}
func (s okStore) FoldReaderF(a func(error) io.Reader, f func(Store) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneStore => ResultSByte
func (s okStore) MapSByte(f func(Store) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkStore => []byte
func (s okStore) FoldSByte(a []byte, f func(Store) []byte) []byte {
	return f(s.right)
}
func (s okStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return f(s.right)
}

// map SoneStore => ResultSerializedMessage
func (s okStore) MapSerializedMessage(f func(Store) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkStore => SerializedMessage
func (s okStore) FoldSerializedMessage(a SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okStore) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneStore => ResultStore
func (s okStore) MapStore(f func(Store) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkStore => Store
func (s okStore) FoldStore(a Store, f func(Store) Store) Store {
	return f(s.right)
}
func (s okStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return f(s.right)
}

// map SoneStore => ResultString
func (s okStore) MapString(f func(Store) string) ResultString {
	return OkString(f(s.right))
}
// fold OkStore => string
func (s okStore) FoldString(a string, f func(Store) string) string {
	return f(s.right)
}
func (s okStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return f(s.right)
}
 // end of oks


// none
type errString struct{
	left error
}

func ErrString(err interface{}) ResultString {
	switch err.(type) {
		case string : return errString{errors.New(err.(string))}
		case error : return errString{err.(error)}
	} 
	return errString{errors.New("ErrString called with something else than string or error")}
}

// map ErrString
func (e errString) Map(f func(string)) {}
func (e errString) FoldF(l func(e error), r func(string)) { l(e.left) }

 // map ErrString => ResultBool
func (e errString) MapBool(f func(v string) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrString => Resultbool
func (e errString) FoldBool(a bool, f func(v string) bool) bool {
	return a
}
func (e errString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return a(e.left)
}

 // map ErrString => ResultConnPool
func (e errString) MapConnPool(f func(v string) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// fold ErrString => Result*pgx.ConnPool
func (e errString) FoldConnPool(a *pgx.ConnPool, f func(v string) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
func (e errString) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

 // map ErrString => ResultError
func (e errString) MapError(f func(v string) error) ResultError {
	return ErrError(e.left)
}
// fold ErrString => Resulterror
func (e errString) FoldError(a error, f func(v string) error) error {
	return a
}
func (e errString) FoldErrorF(a func(error) error, f func(string) error) error {
	return a(e.left)
}

 // map ErrString => ResultInt
func (e errString) MapInt(f func(v string) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrString => Resultint
func (e errString) FoldInt(a int, f func(v string) int) int {
	return a
}
func (e errString) FoldIntF(a func(error) int, f func(string) int) int {
	return a(e.left)
}

 // map ErrString => ResultMessage
func (e errString) MapMessage(f func(v string) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrString => Result*mail.Message
func (e errString) FoldMessage(a *mail.Message, f func(v string) *mail.Message) *mail.Message {
	return a
}
func (e errString) FoldMessageF(a func(error) *mail.Message, f func(string) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrString => ResultNode
func (e errString) MapNode(f func(v string) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrString => ResultNode
func (e errString) FoldNode(a Node, f func(v string) Node) Node {
	return a
}
func (e errString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return a(e.left)
}

 // map ErrString => ResultReader
func (e errString) MapReader(f func(v string) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// fold ErrString => Resultio.Reader
func (e errString) FoldReader(a io.Reader, f func(v string) io.Reader) io.Reader {
	return a
}
func (e errString) FoldReaderF(a func(error) io.Reader, f func(string) io.Reader) io.Reader {
	return a(e.left)
}

 // map ErrString => ResultSByte
func (e errString) MapSByte(f func(v string) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrString => Result[]byte
func (e errString) FoldSByte(a []byte, f func(v string) []byte) []byte {
	return a
}
func (e errString) FoldSByteF(a func(error) []byte, f func(string) []byte) []byte {
	return a(e.left)
}

 // map ErrString => ResultSerializedMessage
func (e errString) MapSerializedMessage(f func(v string) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// fold ErrString => ResultSerializedMessage
func (e errString) FoldSerializedMessage(a SerializedMessage, f func(v string) SerializedMessage) SerializedMessage {
	return a
}
func (e errString) FoldSerializedMessageF(a func(error) SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return a(e.left)
}

 // map ErrString => ResultStore
func (e errString) MapStore(f func(v string) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrString => ResultStore
func (e errString) FoldStore(a Store, f func(v string) Store) Store {
	return a
}
func (e errString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return a(e.left)
}

 // map ErrString => ResultString
func (e errString) MapString(f func(v string) string) ResultString {
	return ErrString(e.left)
}
// fold ErrString => Resultstring
func (e errString) FoldString(a string, f func(v string) string) string {
	return a
}
func (e errString) FoldStringF(a func(error) string, f func(string) string) string {
	return a(e.left)
}
 // end of nones

// ok
type okString struct {
	right string
}

func OkString(v string) okString {
	return okString{v}
}
// map ErrString
func (s okString) Map(f func(string)) { f(s.right) }
func (s okString) FoldF(l func(error), r func(string)) { r(s.right) }

// map SoneString => ResultBool
func (s okString) MapBool(f func(string) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkString => bool
func (s okString) FoldBool(a bool, f func(string) bool) bool {
	return f(s.right)
}
func (s okString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return f(s.right)
}

// map SoneString => ResultConnPool
func (s okString) MapConnPool(f func(string) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}
// fold OkString => *pgx.ConnPool
func (s okString) FoldConnPool(a *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}
func (s okString) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// map SoneString => ResultError
func (s okString) MapError(f func(string) error) ResultError {
	return OkError(f(s.right))
}
// fold OkString => error
func (s okString) FoldError(a error, f func(string) error) error {
	return f(s.right)
}
func (s okString) FoldErrorF(a func(error) error, f func(string) error) error {
	return f(s.right)
}

// map SoneString => ResultInt
func (s okString) MapInt(f func(string) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkString => int
func (s okString) FoldInt(a int, f func(string) int) int {
	return f(s.right)
}
func (s okString) FoldIntF(a func(error) int, f func(string) int) int {
	return f(s.right)
}

// map SoneString => ResultMessage
func (s okString) MapMessage(f func(string) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkString => *mail.Message
func (s okString) FoldMessage(a *mail.Message, f func(string) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okString) FoldMessageF(a func(error) *mail.Message, f func(string) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneString => ResultNode
func (s okString) MapNode(f func(string) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkString => Node
func (s okString) FoldNode(a Node, f func(string) Node) Node {
	return f(s.right)
}
func (s okString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return f(s.right)
}

// map SoneString => ResultReader
func (s okString) MapReader(f func(string) io.Reader) ResultReader {
	return OkReader(f(s.right))
}
// fold OkString => io.Reader
func (s okString) FoldReader(a io.Reader, f func(string) io.Reader) io.Reader {
	return f(s.right)
}
func (s okString) FoldReaderF(a func(error) io.Reader, f func(string) io.Reader) io.Reader {
	return f(s.right)
}

// map SoneString => ResultSByte
func (s okString) MapSByte(f func(string) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkString => []byte
func (s okString) FoldSByte(a []byte, f func(string) []byte) []byte {
	return f(s.right)
}
func (s okString) FoldSByteF(a func(error) []byte, f func(string) []byte) []byte {
	return f(s.right)
}

// map SoneString => ResultSerializedMessage
func (s okString) MapSerializedMessage(f func(string) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}
// fold OkString => SerializedMessage
func (s okString) FoldSerializedMessage(a SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return f(s.right)
}
func (s okString) FoldSerializedMessageF(a func(error) SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// map SoneString => ResultStore
func (s okString) MapStore(f func(string) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkString => Store
func (s okString) FoldStore(a Store, f func(string) Store) Store {
	return f(s.right)
}
func (s okString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return f(s.right)
}

// map SoneString => ResultString
func (s okString) MapString(f func(string) string) ResultString {
	return OkString(f(s.right))
}
// fold OkString => string
func (s okString) FoldString(a string, f func(string) string) string {
	return f(s.right)
}
func (s okString) FoldStringF(a func(error) string, f func(string) string) string {
	return f(s.right)
}
 // end of oks

 // end of everything

