// Code generated by go generate - 2018-03-26 13:58:33.301994048 +0000 UTC
package main

// imports 
import ( 
	"database/sql"

	"net/mail"
 )

// interfaces

// Bool
type ResultBool interface {
	Map(func(bool))
	FoldF(func(error), func(bool))

	MapBool(func(bool) bool) ResultBool
	FoldBool(bool, func(bool) bool) bool
	FoldBoolF(func(error) bool, func(bool) bool) bool

	MapError(func(bool) error) ResultError
	FoldError(error, func(bool) error) error
	FoldErrorF(func(error) error, func(bool) error) error

	MapMessage(func(bool) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(bool) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(bool) *mail.Message) *mail.Message

	MapNode(func(bool) Node) ResultNode
	FoldNode(Node, func(bool) Node) Node
	FoldNodeF(func(error) Node, func(bool) Node) Node

	MapSByte(func(bool) []byte) ResultSByte
	FoldSByte([]byte, func(bool) []byte) []byte
	FoldSByteF(func(error) []byte, func(bool) []byte) []byte

	MapSqlDB(func(bool) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(bool) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(bool) *sql.DB) *sql.DB

	MapStore(func(bool) Store) ResultStore
	FoldStore(Store, func(bool) Store) Store
	FoldStoreF(func(error) Store, func(bool) Store) Store
 
}

// Error
type ResultError interface {
	Map(func(error))
	FoldF(func(error), func(error))

	MapBool(func(error) bool) ResultBool
	FoldBool(bool, func(error) bool) bool
	FoldBoolF(func(error) bool, func(error) bool) bool

	MapError(func(error) error) ResultError
	FoldError(error, func(error) error) error
	FoldErrorF(func(error) error, func(error) error) error

	MapMessage(func(error) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(error) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(error) *mail.Message) *mail.Message

	MapNode(func(error) Node) ResultNode
	FoldNode(Node, func(error) Node) Node
	FoldNodeF(func(error) Node, func(error) Node) Node

	MapSByte(func(error) []byte) ResultSByte
	FoldSByte([]byte, func(error) []byte) []byte
	FoldSByteF(func(error) []byte, func(error) []byte) []byte

	MapSqlDB(func(error) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(error) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(error) *sql.DB) *sql.DB

	MapStore(func(error) Store) ResultStore
	FoldStore(Store, func(error) Store) Store
	FoldStoreF(func(error) Store, func(error) Store) Store
 
}

// Message
type ResultMessage interface {
	Map(func(*mail.Message))
	FoldF(func(error), func(*mail.Message))

	MapBool(func(*mail.Message) bool) ResultBool
	FoldBool(bool, func(*mail.Message) bool) bool
	FoldBoolF(func(error) bool, func(*mail.Message) bool) bool

	MapError(func(*mail.Message) error) ResultError
	FoldError(error, func(*mail.Message) error) error
	FoldErrorF(func(error) error, func(*mail.Message) error) error

	MapMessage(func(*mail.Message) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*mail.Message) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*mail.Message) *mail.Message) *mail.Message

	MapNode(func(*mail.Message) Node) ResultNode
	FoldNode(Node, func(*mail.Message) Node) Node
	FoldNodeF(func(error) Node, func(*mail.Message) Node) Node

	MapSByte(func(*mail.Message) []byte) ResultSByte
	FoldSByte([]byte, func(*mail.Message) []byte) []byte
	FoldSByteF(func(error) []byte, func(*mail.Message) []byte) []byte

	MapSqlDB(func(*mail.Message) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(*mail.Message) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(*mail.Message) *sql.DB) *sql.DB

	MapStore(func(*mail.Message) Store) ResultStore
	FoldStore(Store, func(*mail.Message) Store) Store
	FoldStoreF(func(error) Store, func(*mail.Message) Store) Store
 
}

// Node
type ResultNode interface {
	Map(func(Node))
	FoldF(func(error), func(Node))

	MapBool(func(Node) bool) ResultBool
	FoldBool(bool, func(Node) bool) bool
	FoldBoolF(func(error) bool, func(Node) bool) bool

	MapError(func(Node) error) ResultError
	FoldError(error, func(Node) error) error
	FoldErrorF(func(error) error, func(Node) error) error

	MapMessage(func(Node) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Node) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Node) *mail.Message) *mail.Message

	MapNode(func(Node) Node) ResultNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func(error) Node, func(Node) Node) Node

	MapSByte(func(Node) []byte) ResultSByte
	FoldSByte([]byte, func(Node) []byte) []byte
	FoldSByteF(func(error) []byte, func(Node) []byte) []byte

	MapSqlDB(func(Node) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(Node) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(Node) *sql.DB) *sql.DB

	MapStore(func(Node) Store) ResultStore
	FoldStore(Store, func(Node) Store) Store
	FoldStoreF(func(error) Store, func(Node) Store) Store
 
}

// SByte
type ResultSByte interface {
	Map(func([]byte))
	FoldF(func(error), func([]byte))

	MapBool(func([]byte) bool) ResultBool
	FoldBool(bool, func([]byte) bool) bool
	FoldBoolF(func(error) bool, func([]byte) bool) bool

	MapError(func([]byte) error) ResultError
	FoldError(error, func([]byte) error) error
	FoldErrorF(func(error) error, func([]byte) error) error

	MapMessage(func([]byte) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func([]byte) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func([]byte) *mail.Message) *mail.Message

	MapNode(func([]byte) Node) ResultNode
	FoldNode(Node, func([]byte) Node) Node
	FoldNodeF(func(error) Node, func([]byte) Node) Node

	MapSByte(func([]byte) []byte) ResultSByte
	FoldSByte([]byte, func([]byte) []byte) []byte
	FoldSByteF(func(error) []byte, func([]byte) []byte) []byte

	MapSqlDB(func([]byte) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func([]byte) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func([]byte) *sql.DB) *sql.DB

	MapStore(func([]byte) Store) ResultStore
	FoldStore(Store, func([]byte) Store) Store
	FoldStoreF(func(error) Store, func([]byte) Store) Store
 
}

// SqlDB
type ResultSqlDB interface {
	Map(func(*sql.DB))
	FoldF(func(error), func(*sql.DB))

	MapBool(func(*sql.DB) bool) ResultBool
	FoldBool(bool, func(*sql.DB) bool) bool
	FoldBoolF(func(error) bool, func(*sql.DB) bool) bool

	MapError(func(*sql.DB) error) ResultError
	FoldError(error, func(*sql.DB) error) error
	FoldErrorF(func(error) error, func(*sql.DB) error) error

	MapMessage(func(*sql.DB) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*sql.DB) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*sql.DB) *mail.Message) *mail.Message

	MapNode(func(*sql.DB) Node) ResultNode
	FoldNode(Node, func(*sql.DB) Node) Node
	FoldNodeF(func(error) Node, func(*sql.DB) Node) Node

	MapSByte(func(*sql.DB) []byte) ResultSByte
	FoldSByte([]byte, func(*sql.DB) []byte) []byte
	FoldSByteF(func(error) []byte, func(*sql.DB) []byte) []byte

	MapSqlDB(func(*sql.DB) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(*sql.DB) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(*sql.DB) *sql.DB) *sql.DB

	MapStore(func(*sql.DB) Store) ResultStore
	FoldStore(Store, func(*sql.DB) Store) Store
	FoldStoreF(func(error) Store, func(*sql.DB) Store) Store
 
}

// Store
type ResultStore interface {
	Map(func(Store))
	FoldF(func(error), func(Store))

	MapBool(func(Store) bool) ResultBool
	FoldBool(bool, func(Store) bool) bool
	FoldBoolF(func(error) bool, func(Store) bool) bool

	MapError(func(Store) error) ResultError
	FoldError(error, func(Store) error) error
	FoldErrorF(func(error) error, func(Store) error) error

	MapMessage(func(Store) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Store) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Store) *mail.Message) *mail.Message

	MapNode(func(Store) Node) ResultNode
	FoldNode(Node, func(Store) Node) Node
	FoldNodeF(func(error) Node, func(Store) Node) Node

	MapSByte(func(Store) []byte) ResultSByte
	FoldSByte([]byte, func(Store) []byte) []byte
	FoldSByteF(func(error) []byte, func(Store) []byte) []byte

	MapSqlDB(func(Store) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(Store) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(Store) *sql.DB) *sql.DB

	MapStore(func(Store) Store) ResultStore
	FoldStore(Store, func(Store) Store) Store
	FoldStoreF(func(error) Store, func(Store) Store) Store
 
}


// functions 

func ResultBoolFrom(v bool, err error) ResultBool {
	if err != nil {
		return ErrBool(err)
	}
	return OkBool(v)
}

func ResultErrorFrom(v error, err error) ResultError {
	if err != nil {
		return ErrError(err)
	}
	return OkError(v)
}

func ResultMessageFrom(v *mail.Message, err error) ResultMessage {
	if err != nil {
		return ErrMessage(err)
	}
	return OkMessage(v)
}

func ResultNodeFrom(v Node, err error) ResultNode {
	if err != nil {
		return ErrNode(err)
	}
	return OkNode(v)
}

func ResultSByteFrom(v []byte, err error) ResultSByte {
	if err != nil {
		return ErrSByte(err)
	}
	return OkSByte(v)
}

func ResultSqlDBFrom(v *sql.DB, err error) ResultSqlDB {
	if err != nil {
		return ErrSqlDB(err)
	}
	return OkSqlDB(v)
}

func ResultStoreFrom(v Store, err error) ResultStore {
	if err != nil {
		return ErrStore(err)
	}
	return OkStore(v)
}



// none
type errBool struct{
	left error
}

func ErrBool(err error) ResultBool {
	return errBool{err}
}

// map ErrBool
func (e errBool) Map(f func(bool)) {}
func (e errBool) FoldF(l func(e error), r func(bool)) { l(e.left) }

 // map ErrBool => ResultBool
func (e errBool) MapBool(f func(v bool) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrBool => Resultbool
func (e errBool) FoldBool(a bool, f func(v bool) bool) bool {
	return a
}
func (e errBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return a(e.left)
}

 // map ErrBool => ResultError
func (e errBool) MapError(f func(v bool) error) ResultError {
	return ErrError(e.left)
}
// fold ErrBool => Resulterror
func (e errBool) FoldError(a error, f func(v bool) error) error {
	return a
}
func (e errBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return a(e.left)
}

 // map ErrBool => ResultMessage
func (e errBool) MapMessage(f func(v bool) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrBool => Result*mail.Message
func (e errBool) FoldMessage(a *mail.Message, f func(v bool) *mail.Message) *mail.Message {
	return a
}
func (e errBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrBool => ResultNode
func (e errBool) MapNode(f func(v bool) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrBool => ResultNode
func (e errBool) FoldNode(a Node, f func(v bool) Node) Node {
	return a
}
func (e errBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return a(e.left)
}

 // map ErrBool => ResultSByte
func (e errBool) MapSByte(f func(v bool) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrBool => Result[]byte
func (e errBool) FoldSByte(a []byte, f func(v bool) []byte) []byte {
	return a
}
func (e errBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return a(e.left)
}

 // map ErrBool => ResultSqlDB
func (e errBool) MapSqlDB(f func(v bool) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrBool => Result*sql.DB
func (e errBool) FoldSqlDB(a *sql.DB, f func(v bool) *sql.DB) *sql.DB {
	return a
}
func (e errBool) FoldSqlDBF(a func(error) *sql.DB, f func(bool) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrBool => ResultStore
func (e errBool) MapStore(f func(v bool) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrBool => ResultStore
func (e errBool) FoldStore(a Store, f func(v bool) Store) Store {
	return a
}
func (e errBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okBool struct {
	right bool
}

func OkBool(v bool) okBool {
	return okBool{v}
}
// map ErrBool
func (s okBool) Map(f func(bool)) { f(s.right) }
func (s okBool) FoldF(l func(error), r func(bool)) { r(s.right) }

// map SoneBool => ResultBool
func (s okBool) MapBool(f func(bool) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkBool => bool
func (s okBool) FoldBool(a bool, f func(bool) bool) bool {
	return f(s.right)
}
func (s okBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return f(s.right)
}

// map SoneBool => ResultError
func (s okBool) MapError(f func(bool) error) ResultError {
	return OkError(f(s.right))
}
// fold OkBool => error
func (s okBool) FoldError(a error, f func(bool) error) error {
	return f(s.right)
}
func (s okBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return f(s.right)
}

// map SoneBool => ResultMessage
func (s okBool) MapMessage(f func(bool) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkBool => *mail.Message
func (s okBool) FoldMessage(a *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneBool => ResultNode
func (s okBool) MapNode(f func(bool) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkBool => Node
func (s okBool) FoldNode(a Node, f func(bool) Node) Node {
	return f(s.right)
}
func (s okBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return f(s.right)
}

// map SoneBool => ResultSByte
func (s okBool) MapSByte(f func(bool) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkBool => []byte
func (s okBool) FoldSByte(a []byte, f func(bool) []byte) []byte {
	return f(s.right)
}
func (s okBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return f(s.right)
}

// map SoneBool => ResultSqlDB
func (s okBool) MapSqlDB(f func(bool) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkBool => *sql.DB
func (s okBool) FoldSqlDB(a *sql.DB, f func(bool) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okBool) FoldSqlDBF(a func(error) *sql.DB, f func(bool) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneBool => ResultStore
func (s okBool) MapStore(f func(bool) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkBool => Store
func (s okBool) FoldStore(a Store, f func(bool) Store) Store {
	return f(s.right)
}
func (s okBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errError struct{
	left error
}

func ErrError(err error) ResultError {
	return errError{err}
}

// map ErrError
func (e errError) Map(f func(error)) {}
func (e errError) FoldF(l func(e error), r func(error)) { l(e.left) }

 // map ErrError => ResultBool
func (e errError) MapBool(f func(v error) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrError => Resultbool
func (e errError) FoldBool(a bool, f func(v error) bool) bool {
	return a
}
func (e errError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return a(e.left)
}

 // map ErrError => ResultError
func (e errError) MapError(f func(v error) error) ResultError {
	return ErrError(e.left)
}
// fold ErrError => Resulterror
func (e errError) FoldError(a error, f func(v error) error) error {
	return a
}
func (e errError) FoldErrorF(a func(error) error, f func(error) error) error {
	return a(e.left)
}

 // map ErrError => ResultMessage
func (e errError) MapMessage(f func(v error) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrError => Result*mail.Message
func (e errError) FoldMessage(a *mail.Message, f func(v error) *mail.Message) *mail.Message {
	return a
}
func (e errError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrError => ResultNode
func (e errError) MapNode(f func(v error) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrError => ResultNode
func (e errError) FoldNode(a Node, f func(v error) Node) Node {
	return a
}
func (e errError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return a(e.left)
}

 // map ErrError => ResultSByte
func (e errError) MapSByte(f func(v error) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrError => Result[]byte
func (e errError) FoldSByte(a []byte, f func(v error) []byte) []byte {
	return a
}
func (e errError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return a(e.left)
}

 // map ErrError => ResultSqlDB
func (e errError) MapSqlDB(f func(v error) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrError => Result*sql.DB
func (e errError) FoldSqlDB(a *sql.DB, f func(v error) *sql.DB) *sql.DB {
	return a
}
func (e errError) FoldSqlDBF(a func(error) *sql.DB, f func(error) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrError => ResultStore
func (e errError) MapStore(f func(v error) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrError => ResultStore
func (e errError) FoldStore(a Store, f func(v error) Store) Store {
	return a
}
func (e errError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okError struct {
	right error
}

func OkError(v error) okError {
	return okError{v}
}
// map ErrError
func (s okError) Map(f func(error)) { f(s.right) }
func (s okError) FoldF(l func(error), r func(error)) { r(s.right) }

// map SoneError => ResultBool
func (s okError) MapBool(f func(error) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkError => bool
func (s okError) FoldBool(a bool, f func(error) bool) bool {
	return f(s.right)
}
func (s okError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return f(s.right)
}

// map SoneError => ResultError
func (s okError) MapError(f func(error) error) ResultError {
	return OkError(f(s.right))
}
// fold OkError => error
func (s okError) FoldError(a error, f func(error) error) error {
	return f(s.right)
}
func (s okError) FoldErrorF(a func(error) error, f func(error) error) error {
	return f(s.right)
}

// map SoneError => ResultMessage
func (s okError) MapMessage(f func(error) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkError => *mail.Message
func (s okError) FoldMessage(a *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneError => ResultNode
func (s okError) MapNode(f func(error) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkError => Node
func (s okError) FoldNode(a Node, f func(error) Node) Node {
	return f(s.right)
}
func (s okError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return f(s.right)
}

// map SoneError => ResultSByte
func (s okError) MapSByte(f func(error) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkError => []byte
func (s okError) FoldSByte(a []byte, f func(error) []byte) []byte {
	return f(s.right)
}
func (s okError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return f(s.right)
}

// map SoneError => ResultSqlDB
func (s okError) MapSqlDB(f func(error) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkError => *sql.DB
func (s okError) FoldSqlDB(a *sql.DB, f func(error) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okError) FoldSqlDBF(a func(error) *sql.DB, f func(error) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneError => ResultStore
func (s okError) MapStore(f func(error) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkError => Store
func (s okError) FoldStore(a Store, f func(error) Store) Store {
	return f(s.right)
}
func (s okError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errMessage struct{
	left error
}

func ErrMessage(err error) ResultMessage {
	return errMessage{err}
}

// map ErrMessage
func (e errMessage) Map(f func(*mail.Message)) {}
func (e errMessage) FoldF(l func(e error), r func(*mail.Message)) { l(e.left) }

 // map ErrMessage => ResultBool
func (e errMessage) MapBool(f func(v *mail.Message) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrMessage => Resultbool
func (e errMessage) FoldBool(a bool, f func(v *mail.Message) bool) bool {
	return a
}
func (e errMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return a(e.left)
}

 // map ErrMessage => ResultError
func (e errMessage) MapError(f func(v *mail.Message) error) ResultError {
	return ErrError(e.left)
}
// fold ErrMessage => Resulterror
func (e errMessage) FoldError(a error, f func(v *mail.Message) error) error {
	return a
}
func (e errMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return a(e.left)
}

 // map ErrMessage => ResultMessage
func (e errMessage) MapMessage(f func(v *mail.Message) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrMessage => Result*mail.Message
func (e errMessage) FoldMessage(a *mail.Message, f func(v *mail.Message) *mail.Message) *mail.Message {
	return a
}
func (e errMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrMessage => ResultNode
func (e errMessage) MapNode(f func(v *mail.Message) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrMessage => ResultNode
func (e errMessage) FoldNode(a Node, f func(v *mail.Message) Node) Node {
	return a
}
func (e errMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return a(e.left)
}

 // map ErrMessage => ResultSByte
func (e errMessage) MapSByte(f func(v *mail.Message) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrMessage => Result[]byte
func (e errMessage) FoldSByte(a []byte, f func(v *mail.Message) []byte) []byte {
	return a
}
func (e errMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return a(e.left)
}

 // map ErrMessage => ResultSqlDB
func (e errMessage) MapSqlDB(f func(v *mail.Message) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrMessage => Result*sql.DB
func (e errMessage) FoldSqlDB(a *sql.DB, f func(v *mail.Message) *sql.DB) *sql.DB {
	return a
}
func (e errMessage) FoldSqlDBF(a func(error) *sql.DB, f func(*mail.Message) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrMessage => ResultStore
func (e errMessage) MapStore(f func(v *mail.Message) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrMessage => ResultStore
func (e errMessage) FoldStore(a Store, f func(v *mail.Message) Store) Store {
	return a
}
func (e errMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okMessage struct {
	right *mail.Message
}

func OkMessage(v *mail.Message) okMessage {
	return okMessage{v}
}
// map ErrMessage
func (s okMessage) Map(f func(*mail.Message)) { f(s.right) }
func (s okMessage) FoldF(l func(error), r func(*mail.Message)) { r(s.right) }

// map SoneMessage => ResultBool
func (s okMessage) MapBool(f func(*mail.Message) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkMessage => bool
func (s okMessage) FoldBool(a bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}
func (s okMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}

// map SoneMessage => ResultError
func (s okMessage) MapError(f func(*mail.Message) error) ResultError {
	return OkError(f(s.right))
}
// fold OkMessage => error
func (s okMessage) FoldError(a error, f func(*mail.Message) error) error {
	return f(s.right)
}
func (s okMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return f(s.right)
}

// map SoneMessage => ResultMessage
func (s okMessage) MapMessage(f func(*mail.Message) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkMessage => *mail.Message
func (s okMessage) FoldMessage(a *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneMessage => ResultNode
func (s okMessage) MapNode(f func(*mail.Message) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkMessage => Node
func (s okMessage) FoldNode(a Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}
func (s okMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}

// map SoneMessage => ResultSByte
func (s okMessage) MapSByte(f func(*mail.Message) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkMessage => []byte
func (s okMessage) FoldSByte(a []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}
func (s okMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}

// map SoneMessage => ResultSqlDB
func (s okMessage) MapSqlDB(f func(*mail.Message) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkMessage => *sql.DB
func (s okMessage) FoldSqlDB(a *sql.DB, f func(*mail.Message) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okMessage) FoldSqlDBF(a func(error) *sql.DB, f func(*mail.Message) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneMessage => ResultStore
func (s okMessage) MapStore(f func(*mail.Message) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkMessage => Store
func (s okMessage) FoldStore(a Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}
func (s okMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errNode struct{
	left error
}

func ErrNode(err error) ResultNode {
	return errNode{err}
}

// map ErrNode
func (e errNode) Map(f func(Node)) {}
func (e errNode) FoldF(l func(e error), r func(Node)) { l(e.left) }

 // map ErrNode => ResultBool
func (e errNode) MapBool(f func(v Node) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrNode => Resultbool
func (e errNode) FoldBool(a bool, f func(v Node) bool) bool {
	return a
}
func (e errNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return a(e.left)
}

 // map ErrNode => ResultError
func (e errNode) MapError(f func(v Node) error) ResultError {
	return ErrError(e.left)
}
// fold ErrNode => Resulterror
func (e errNode) FoldError(a error, f func(v Node) error) error {
	return a
}
func (e errNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return a(e.left)
}

 // map ErrNode => ResultMessage
func (e errNode) MapMessage(f func(v Node) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrNode => Result*mail.Message
func (e errNode) FoldMessage(a *mail.Message, f func(v Node) *mail.Message) *mail.Message {
	return a
}
func (e errNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrNode => ResultNode
func (e errNode) MapNode(f func(v Node) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrNode => ResultNode
func (e errNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}
func (e errNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return a(e.left)
}

 // map ErrNode => ResultSByte
func (e errNode) MapSByte(f func(v Node) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrNode => Result[]byte
func (e errNode) FoldSByte(a []byte, f func(v Node) []byte) []byte {
	return a
}
func (e errNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return a(e.left)
}

 // map ErrNode => ResultSqlDB
func (e errNode) MapSqlDB(f func(v Node) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrNode => Result*sql.DB
func (e errNode) FoldSqlDB(a *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return a
}
func (e errNode) FoldSqlDBF(a func(error) *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrNode => ResultStore
func (e errNode) MapStore(f func(v Node) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrNode => ResultStore
func (e errNode) FoldStore(a Store, f func(v Node) Store) Store {
	return a
}
func (e errNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okNode struct {
	right Node
}

func OkNode(v Node) okNode {
	return okNode{v}
}
// map ErrNode
func (s okNode) Map(f func(Node)) { f(s.right) }
func (s okNode) FoldF(l func(error), r func(Node)) { r(s.right) }

// map SoneNode => ResultBool
func (s okNode) MapBool(f func(Node) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkNode => bool
func (s okNode) FoldBool(a bool, f func(Node) bool) bool {
	return f(s.right)
}
func (s okNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return f(s.right)
}

// map SoneNode => ResultError
func (s okNode) MapError(f func(Node) error) ResultError {
	return OkError(f(s.right))
}
// fold OkNode => error
func (s okNode) FoldError(a error, f func(Node) error) error {
	return f(s.right)
}
func (s okNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return f(s.right)
}

// map SoneNode => ResultMessage
func (s okNode) MapMessage(f func(Node) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkNode => *mail.Message
func (s okNode) FoldMessage(a *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneNode => ResultNode
func (s okNode) MapNode(f func(Node) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkNode => Node
func (s okNode) FoldNode(a Node, f func(Node) Node) Node {
	return f(s.right)
}
func (s okNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return f(s.right)
}

// map SoneNode => ResultSByte
func (s okNode) MapSByte(f func(Node) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkNode => []byte
func (s okNode) FoldSByte(a []byte, f func(Node) []byte) []byte {
	return f(s.right)
}
func (s okNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return f(s.right)
}

// map SoneNode => ResultSqlDB
func (s okNode) MapSqlDB(f func(Node) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkNode => *sql.DB
func (s okNode) FoldSqlDB(a *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okNode) FoldSqlDBF(a func(error) *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneNode => ResultStore
func (s okNode) MapStore(f func(Node) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkNode => Store
func (s okNode) FoldStore(a Store, f func(Node) Store) Store {
	return f(s.right)
}
func (s okNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errSByte struct{
	left error
}

func ErrSByte(err error) ResultSByte {
	return errSByte{err}
}

// map ErrSByte
func (e errSByte) Map(f func([]byte)) {}
func (e errSByte) FoldF(l func(e error), r func([]byte)) { l(e.left) }

 // map ErrSByte => ResultBool
func (e errSByte) MapBool(f func(v []byte) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrSByte => Resultbool
func (e errSByte) FoldBool(a bool, f func(v []byte) bool) bool {
	return a
}
func (e errSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return a(e.left)
}

 // map ErrSByte => ResultError
func (e errSByte) MapError(f func(v []byte) error) ResultError {
	return ErrError(e.left)
}
// fold ErrSByte => Resulterror
func (e errSByte) FoldError(a error, f func(v []byte) error) error {
	return a
}
func (e errSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return a(e.left)
}

 // map ErrSByte => ResultMessage
func (e errSByte) MapMessage(f func(v []byte) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrSByte => Result*mail.Message
func (e errSByte) FoldMessage(a *mail.Message, f func(v []byte) *mail.Message) *mail.Message {
	return a
}
func (e errSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrSByte => ResultNode
func (e errSByte) MapNode(f func(v []byte) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrSByte => ResultNode
func (e errSByte) FoldNode(a Node, f func(v []byte) Node) Node {
	return a
}
func (e errSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return a(e.left)
}

 // map ErrSByte => ResultSByte
func (e errSByte) MapSByte(f func(v []byte) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrSByte => Result[]byte
func (e errSByte) FoldSByte(a []byte, f func(v []byte) []byte) []byte {
	return a
}
func (e errSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return a(e.left)
}

 // map ErrSByte => ResultSqlDB
func (e errSByte) MapSqlDB(f func(v []byte) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrSByte => Result*sql.DB
func (e errSByte) FoldSqlDB(a *sql.DB, f func(v []byte) *sql.DB) *sql.DB {
	return a
}
func (e errSByte) FoldSqlDBF(a func(error) *sql.DB, f func([]byte) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrSByte => ResultStore
func (e errSByte) MapStore(f func(v []byte) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrSByte => ResultStore
func (e errSByte) FoldStore(a Store, f func(v []byte) Store) Store {
	return a
}
func (e errSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okSByte struct {
	right []byte
}

func OkSByte(v []byte) okSByte {
	return okSByte{v}
}
// map ErrSByte
func (s okSByte) Map(f func([]byte)) { f(s.right) }
func (s okSByte) FoldF(l func(error), r func([]byte)) { r(s.right) }

// map SoneSByte => ResultBool
func (s okSByte) MapBool(f func([]byte) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkSByte => bool
func (s okSByte) FoldBool(a bool, f func([]byte) bool) bool {
	return f(s.right)
}
func (s okSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return f(s.right)
}

// map SoneSByte => ResultError
func (s okSByte) MapError(f func([]byte) error) ResultError {
	return OkError(f(s.right))
}
// fold OkSByte => error
func (s okSByte) FoldError(a error, f func([]byte) error) error {
	return f(s.right)
}
func (s okSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return f(s.right)
}

// map SoneSByte => ResultMessage
func (s okSByte) MapMessage(f func([]byte) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkSByte => *mail.Message
func (s okSByte) FoldMessage(a *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneSByte => ResultNode
func (s okSByte) MapNode(f func([]byte) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkSByte => Node
func (s okSByte) FoldNode(a Node, f func([]byte) Node) Node {
	return f(s.right)
}
func (s okSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return f(s.right)
}

// map SoneSByte => ResultSByte
func (s okSByte) MapSByte(f func([]byte) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkSByte => []byte
func (s okSByte) FoldSByte(a []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}
func (s okSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}

// map SoneSByte => ResultSqlDB
func (s okSByte) MapSqlDB(f func([]byte) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkSByte => *sql.DB
func (s okSByte) FoldSqlDB(a *sql.DB, f func([]byte) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okSByte) FoldSqlDBF(a func(error) *sql.DB, f func([]byte) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneSByte => ResultStore
func (s okSByte) MapStore(f func([]byte) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkSByte => Store
func (s okSByte) FoldStore(a Store, f func([]byte) Store) Store {
	return f(s.right)
}
func (s okSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errSqlDB struct{
	left error
}

func ErrSqlDB(err error) ResultSqlDB {
	return errSqlDB{err}
}

// map ErrSqlDB
func (e errSqlDB) Map(f func(*sql.DB)) {}
func (e errSqlDB) FoldF(l func(e error), r func(*sql.DB)) { l(e.left) }

 // map ErrSqlDB => ResultBool
func (e errSqlDB) MapBool(f func(v *sql.DB) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrSqlDB => Resultbool
func (e errSqlDB) FoldBool(a bool, f func(v *sql.DB) bool) bool {
	return a
}
func (e errSqlDB) FoldBoolF(a func(error) bool, f func(*sql.DB) bool) bool {
	return a(e.left)
}

 // map ErrSqlDB => ResultError
func (e errSqlDB) MapError(f func(v *sql.DB) error) ResultError {
	return ErrError(e.left)
}
// fold ErrSqlDB => Resulterror
func (e errSqlDB) FoldError(a error, f func(v *sql.DB) error) error {
	return a
}
func (e errSqlDB) FoldErrorF(a func(error) error, f func(*sql.DB) error) error {
	return a(e.left)
}

 // map ErrSqlDB => ResultMessage
func (e errSqlDB) MapMessage(f func(v *sql.DB) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrSqlDB => Result*mail.Message
func (e errSqlDB) FoldMessage(a *mail.Message, f func(v *sql.DB) *mail.Message) *mail.Message {
	return a
}
func (e errSqlDB) FoldMessageF(a func(error) *mail.Message, f func(*sql.DB) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrSqlDB => ResultNode
func (e errSqlDB) MapNode(f func(v *sql.DB) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrSqlDB => ResultNode
func (e errSqlDB) FoldNode(a Node, f func(v *sql.DB) Node) Node {
	return a
}
func (e errSqlDB) FoldNodeF(a func(error) Node, f func(*sql.DB) Node) Node {
	return a(e.left)
}

 // map ErrSqlDB => ResultSByte
func (e errSqlDB) MapSByte(f func(v *sql.DB) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrSqlDB => Result[]byte
func (e errSqlDB) FoldSByte(a []byte, f func(v *sql.DB) []byte) []byte {
	return a
}
func (e errSqlDB) FoldSByteF(a func(error) []byte, f func(*sql.DB) []byte) []byte {
	return a(e.left)
}

 // map ErrSqlDB => ResultSqlDB
func (e errSqlDB) MapSqlDB(f func(v *sql.DB) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrSqlDB => Result*sql.DB
func (e errSqlDB) FoldSqlDB(a *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return a
}
func (e errSqlDB) FoldSqlDBF(a func(error) *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrSqlDB => ResultStore
func (e errSqlDB) MapStore(f func(v *sql.DB) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrSqlDB => ResultStore
func (e errSqlDB) FoldStore(a Store, f func(v *sql.DB) Store) Store {
	return a
}
func (e errSqlDB) FoldStoreF(a func(error) Store, f func(*sql.DB) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okSqlDB struct {
	right *sql.DB
}

func OkSqlDB(v *sql.DB) okSqlDB {
	return okSqlDB{v}
}
// map ErrSqlDB
func (s okSqlDB) Map(f func(*sql.DB)) { f(s.right) }
func (s okSqlDB) FoldF(l func(error), r func(*sql.DB)) { r(s.right) }

// map SoneSqlDB => ResultBool
func (s okSqlDB) MapBool(f func(*sql.DB) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkSqlDB => bool
func (s okSqlDB) FoldBool(a bool, f func(*sql.DB) bool) bool {
	return f(s.right)
}
func (s okSqlDB) FoldBoolF(a func(error) bool, f func(*sql.DB) bool) bool {
	return f(s.right)
}

// map SoneSqlDB => ResultError
func (s okSqlDB) MapError(f func(*sql.DB) error) ResultError {
	return OkError(f(s.right))
}
// fold OkSqlDB => error
func (s okSqlDB) FoldError(a error, f func(*sql.DB) error) error {
	return f(s.right)
}
func (s okSqlDB) FoldErrorF(a func(error) error, f func(*sql.DB) error) error {
	return f(s.right)
}

// map SoneSqlDB => ResultMessage
func (s okSqlDB) MapMessage(f func(*sql.DB) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkSqlDB => *mail.Message
func (s okSqlDB) FoldMessage(a *mail.Message, f func(*sql.DB) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okSqlDB) FoldMessageF(a func(error) *mail.Message, f func(*sql.DB) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneSqlDB => ResultNode
func (s okSqlDB) MapNode(f func(*sql.DB) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkSqlDB => Node
func (s okSqlDB) FoldNode(a Node, f func(*sql.DB) Node) Node {
	return f(s.right)
}
func (s okSqlDB) FoldNodeF(a func(error) Node, f func(*sql.DB) Node) Node {
	return f(s.right)
}

// map SoneSqlDB => ResultSByte
func (s okSqlDB) MapSByte(f func(*sql.DB) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkSqlDB => []byte
func (s okSqlDB) FoldSByte(a []byte, f func(*sql.DB) []byte) []byte {
	return f(s.right)
}
func (s okSqlDB) FoldSByteF(a func(error) []byte, f func(*sql.DB) []byte) []byte {
	return f(s.right)
}

// map SoneSqlDB => ResultSqlDB
func (s okSqlDB) MapSqlDB(f func(*sql.DB) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkSqlDB => *sql.DB
func (s okSqlDB) FoldSqlDB(a *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okSqlDB) FoldSqlDBF(a func(error) *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneSqlDB => ResultStore
func (s okSqlDB) MapStore(f func(*sql.DB) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkSqlDB => Store
func (s okSqlDB) FoldStore(a Store, f func(*sql.DB) Store) Store {
	return f(s.right)
}
func (s okSqlDB) FoldStoreF(a func(error) Store, f func(*sql.DB) Store) Store {
	return f(s.right)
}
 // end of oks


// none
type errStore struct{
	left error
}

func ErrStore(err error) ResultStore {
	return errStore{err}
}

// map ErrStore
func (e errStore) Map(f func(Store)) {}
func (e errStore) FoldF(l func(e error), r func(Store)) { l(e.left) }

 // map ErrStore => ResultBool
func (e errStore) MapBool(f func(v Store) bool) ResultBool {
	return ErrBool(e.left)
}
// fold ErrStore => Resultbool
func (e errStore) FoldBool(a bool, f func(v Store) bool) bool {
	return a
}
func (e errStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return a(e.left)
}

 // map ErrStore => ResultError
func (e errStore) MapError(f func(v Store) error) ResultError {
	return ErrError(e.left)
}
// fold ErrStore => Resulterror
func (e errStore) FoldError(a error, f func(v Store) error) error {
	return a
}
func (e errStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return a(e.left)
}

 // map ErrStore => ResultMessage
func (e errStore) MapMessage(f func(v Store) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// fold ErrStore => Result*mail.Message
func (e errStore) FoldMessage(a *mail.Message, f func(v Store) *mail.Message) *mail.Message {
	return a
}
func (e errStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return a(e.left)
}

 // map ErrStore => ResultNode
func (e errStore) MapNode(f func(v Store) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrStore => ResultNode
func (e errStore) FoldNode(a Node, f func(v Store) Node) Node {
	return a
}
func (e errStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return a(e.left)
}

 // map ErrStore => ResultSByte
func (e errStore) MapSByte(f func(v Store) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// fold ErrStore => Result[]byte
func (e errStore) FoldSByte(a []byte, f func(v Store) []byte) []byte {
	return a
}
func (e errStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return a(e.left)
}

 // map ErrStore => ResultSqlDB
func (e errStore) MapSqlDB(f func(v Store) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrStore => Result*sql.DB
func (e errStore) FoldSqlDB(a *sql.DB, f func(v Store) *sql.DB) *sql.DB {
	return a
}
func (e errStore) FoldSqlDBF(a func(error) *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrStore => ResultStore
func (e errStore) MapStore(f func(v Store) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrStore => ResultStore
func (e errStore) FoldStore(a Store, f func(v Store) Store) Store {
	return a
}
func (e errStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return a(e.left)
}
 // end of nones

// ok
type okStore struct {
	right Store
}

func OkStore(v Store) okStore {
	return okStore{v}
}
// map ErrStore
func (s okStore) Map(f func(Store)) { f(s.right) }
func (s okStore) FoldF(l func(error), r func(Store)) { r(s.right) }

// map SoneStore => ResultBool
func (s okStore) MapBool(f func(Store) bool) ResultBool {
	return OkBool(f(s.right))
}
// fold OkStore => bool
func (s okStore) FoldBool(a bool, f func(Store) bool) bool {
	return f(s.right)
}
func (s okStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return f(s.right)
}

// map SoneStore => ResultError
func (s okStore) MapError(f func(Store) error) ResultError {
	return OkError(f(s.right))
}
// fold OkStore => error
func (s okStore) FoldError(a error, f func(Store) error) error {
	return f(s.right)
}
func (s okStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return f(s.right)
}

// map SoneStore => ResultMessage
func (s okStore) MapMessage(f func(Store) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}
// fold OkStore => *mail.Message
func (s okStore) FoldMessage(a *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}
func (s okStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}

// map SoneStore => ResultNode
func (s okStore) MapNode(f func(Store) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkStore => Node
func (s okStore) FoldNode(a Node, f func(Store) Node) Node {
	return f(s.right)
}
func (s okStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return f(s.right)
}

// map SoneStore => ResultSByte
func (s okStore) MapSByte(f func(Store) []byte) ResultSByte {
	return OkSByte(f(s.right))
}
// fold OkStore => []byte
func (s okStore) FoldSByte(a []byte, f func(Store) []byte) []byte {
	return f(s.right)
}
func (s okStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return f(s.right)
}

// map SoneStore => ResultSqlDB
func (s okStore) MapSqlDB(f func(Store) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkStore => *sql.DB
func (s okStore) FoldSqlDB(a *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okStore) FoldSqlDBF(a func(error) *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneStore => ResultStore
func (s okStore) MapStore(f func(Store) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkStore => Store
func (s okStore) FoldStore(a Store, f func(Store) Store) Store {
	return f(s.right)
}
func (s okStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return f(s.right)
}
 // end of oks

 // end of everything

