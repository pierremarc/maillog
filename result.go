// Code generated by go generate on 2018-04-12 07:19:58.346440396 +0000 UTC
package main


import (
	"errors"

	"io"

	"net/mail"

	"github.com/jackc/pgx"
 )



// ResultBool
type ResultBool interface {
	Map(func(bool))
	FoldF(func(error), func(bool))

	MapBool(func(bool) bool) ResultBool
	FoldBool(bool, func(bool) bool) bool
	FoldBoolF(func(error) bool, func(bool) bool) bool

	MapConnPool(func(bool) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(bool) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(bool) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(bool) error) ResultError
	FoldError(error, func(bool) error) error
	FoldErrorF(func(error) error, func(bool) error) error

	MapInt(func(bool) int) ResultInt
	FoldInt(int, func(bool) int) int
	FoldIntF(func(error) int, func(bool) int) int

	MapMessage(func(bool) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(bool) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(bool) *mail.Message) *mail.Message

	MapNode(func(bool) Node) ResultNode
	FoldNode(Node, func(bool) Node) Node
	FoldNodeF(func(error) Node, func(bool) Node) Node

	MapReader(func(bool) io.Reader) ResultReader
	FoldReader(io.Reader, func(bool) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(bool) io.Reader) io.Reader

	MapSByte(func(bool) []byte) ResultSByte
	FoldSByte([]byte, func(bool) []byte) []byte
	FoldSByteF(func(error) []byte, func(bool) []byte) []byte

	MapSerializedMessage(func(bool) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(bool) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(bool) SerializedMessage) SerializedMessage

	MapStore(func(bool) Store) ResultStore
	FoldStore(Store, func(bool) Store) Store
	FoldStoreF(func(error) Store, func(bool) Store) Store

	MapString(func(bool) string) ResultString
	FoldString(string, func(bool) string) string
	FoldStringF(func(error) string, func(bool) string) string
 
}

// ResultConnPool
type ResultConnPool interface {
	Map(func(*pgx.ConnPool))
	FoldF(func(error), func(*pgx.ConnPool))

	MapBool(func(*pgx.ConnPool) bool) ResultBool
	FoldBool(bool, func(*pgx.ConnPool) bool) bool
	FoldBoolF(func(error) bool, func(*pgx.ConnPool) bool) bool

	MapConnPool(func(*pgx.ConnPool) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(*pgx.ConnPool) error) ResultError
	FoldError(error, func(*pgx.ConnPool) error) error
	FoldErrorF(func(error) error, func(*pgx.ConnPool) error) error

	MapInt(func(*pgx.ConnPool) int) ResultInt
	FoldInt(int, func(*pgx.ConnPool) int) int
	FoldIntF(func(error) int, func(*pgx.ConnPool) int) int

	MapMessage(func(*pgx.ConnPool) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*pgx.ConnPool) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*pgx.ConnPool) *mail.Message) *mail.Message

	MapNode(func(*pgx.ConnPool) Node) ResultNode
	FoldNode(Node, func(*pgx.ConnPool) Node) Node
	FoldNodeF(func(error) Node, func(*pgx.ConnPool) Node) Node

	MapReader(func(*pgx.ConnPool) io.Reader) ResultReader
	FoldReader(io.Reader, func(*pgx.ConnPool) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(*pgx.ConnPool) io.Reader) io.Reader

	MapSByte(func(*pgx.ConnPool) []byte) ResultSByte
	FoldSByte([]byte, func(*pgx.ConnPool) []byte) []byte
	FoldSByteF(func(error) []byte, func(*pgx.ConnPool) []byte) []byte

	MapSerializedMessage(func(*pgx.ConnPool) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(*pgx.ConnPool) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(*pgx.ConnPool) SerializedMessage) SerializedMessage

	MapStore(func(*pgx.ConnPool) Store) ResultStore
	FoldStore(Store, func(*pgx.ConnPool) Store) Store
	FoldStoreF(func(error) Store, func(*pgx.ConnPool) Store) Store

	MapString(func(*pgx.ConnPool) string) ResultString
	FoldString(string, func(*pgx.ConnPool) string) string
	FoldStringF(func(error) string, func(*pgx.ConnPool) string) string
 
}

// ResultError
type ResultError interface {
	Map(func(error))
	FoldF(func(error), func(error))

	MapBool(func(error) bool) ResultBool
	FoldBool(bool, func(error) bool) bool
	FoldBoolF(func(error) bool, func(error) bool) bool

	MapConnPool(func(error) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(error) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(error) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(error) error) ResultError
	FoldError(error, func(error) error) error
	FoldErrorF(func(error) error, func(error) error) error

	MapInt(func(error) int) ResultInt
	FoldInt(int, func(error) int) int
	FoldIntF(func(error) int, func(error) int) int

	MapMessage(func(error) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(error) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(error) *mail.Message) *mail.Message

	MapNode(func(error) Node) ResultNode
	FoldNode(Node, func(error) Node) Node
	FoldNodeF(func(error) Node, func(error) Node) Node

	MapReader(func(error) io.Reader) ResultReader
	FoldReader(io.Reader, func(error) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(error) io.Reader) io.Reader

	MapSByte(func(error) []byte) ResultSByte
	FoldSByte([]byte, func(error) []byte) []byte
	FoldSByteF(func(error) []byte, func(error) []byte) []byte

	MapSerializedMessage(func(error) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(error) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(error) SerializedMessage) SerializedMessage

	MapStore(func(error) Store) ResultStore
	FoldStore(Store, func(error) Store) Store
	FoldStoreF(func(error) Store, func(error) Store) Store

	MapString(func(error) string) ResultString
	FoldString(string, func(error) string) string
	FoldStringF(func(error) string, func(error) string) string
 
}

// ResultInt
type ResultInt interface {
	Map(func(int))
	FoldF(func(error), func(int))

	MapBool(func(int) bool) ResultBool
	FoldBool(bool, func(int) bool) bool
	FoldBoolF(func(error) bool, func(int) bool) bool

	MapConnPool(func(int) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(int) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(int) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(int) error) ResultError
	FoldError(error, func(int) error) error
	FoldErrorF(func(error) error, func(int) error) error

	MapInt(func(int) int) ResultInt
	FoldInt(int, func(int) int) int
	FoldIntF(func(error) int, func(int) int) int

	MapMessage(func(int) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(int) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(int) *mail.Message) *mail.Message

	MapNode(func(int) Node) ResultNode
	FoldNode(Node, func(int) Node) Node
	FoldNodeF(func(error) Node, func(int) Node) Node

	MapReader(func(int) io.Reader) ResultReader
	FoldReader(io.Reader, func(int) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(int) io.Reader) io.Reader

	MapSByte(func(int) []byte) ResultSByte
	FoldSByte([]byte, func(int) []byte) []byte
	FoldSByteF(func(error) []byte, func(int) []byte) []byte

	MapSerializedMessage(func(int) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(int) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(int) SerializedMessage) SerializedMessage

	MapStore(func(int) Store) ResultStore
	FoldStore(Store, func(int) Store) Store
	FoldStoreF(func(error) Store, func(int) Store) Store

	MapString(func(int) string) ResultString
	FoldString(string, func(int) string) string
	FoldStringF(func(error) string, func(int) string) string
 
}

// ResultMessage
type ResultMessage interface {
	Map(func(*mail.Message))
	FoldF(func(error), func(*mail.Message))

	MapBool(func(*mail.Message) bool) ResultBool
	FoldBool(bool, func(*mail.Message) bool) bool
	FoldBoolF(func(error) bool, func(*mail.Message) bool) bool

	MapConnPool(func(*mail.Message) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(*mail.Message) error) ResultError
	FoldError(error, func(*mail.Message) error) error
	FoldErrorF(func(error) error, func(*mail.Message) error) error

	MapInt(func(*mail.Message) int) ResultInt
	FoldInt(int, func(*mail.Message) int) int
	FoldIntF(func(error) int, func(*mail.Message) int) int

	MapMessage(func(*mail.Message) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(*mail.Message) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(*mail.Message) *mail.Message) *mail.Message

	MapNode(func(*mail.Message) Node) ResultNode
	FoldNode(Node, func(*mail.Message) Node) Node
	FoldNodeF(func(error) Node, func(*mail.Message) Node) Node

	MapReader(func(*mail.Message) io.Reader) ResultReader
	FoldReader(io.Reader, func(*mail.Message) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(*mail.Message) io.Reader) io.Reader

	MapSByte(func(*mail.Message) []byte) ResultSByte
	FoldSByte([]byte, func(*mail.Message) []byte) []byte
	FoldSByteF(func(error) []byte, func(*mail.Message) []byte) []byte

	MapSerializedMessage(func(*mail.Message) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(*mail.Message) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(*mail.Message) SerializedMessage) SerializedMessage

	MapStore(func(*mail.Message) Store) ResultStore
	FoldStore(Store, func(*mail.Message) Store) Store
	FoldStoreF(func(error) Store, func(*mail.Message) Store) Store

	MapString(func(*mail.Message) string) ResultString
	FoldString(string, func(*mail.Message) string) string
	FoldStringF(func(error) string, func(*mail.Message) string) string
 
}

// ResultNode
type ResultNode interface {
	Map(func(Node))
	FoldF(func(error), func(Node))

	MapBool(func(Node) bool) ResultBool
	FoldBool(bool, func(Node) bool) bool
	FoldBoolF(func(error) bool, func(Node) bool) bool

	MapConnPool(func(Node) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(Node) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(Node) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(Node) error) ResultError
	FoldError(error, func(Node) error) error
	FoldErrorF(func(error) error, func(Node) error) error

	MapInt(func(Node) int) ResultInt
	FoldInt(int, func(Node) int) int
	FoldIntF(func(error) int, func(Node) int) int

	MapMessage(func(Node) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Node) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Node) *mail.Message) *mail.Message

	MapNode(func(Node) Node) ResultNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func(error) Node, func(Node) Node) Node

	MapReader(func(Node) io.Reader) ResultReader
	FoldReader(io.Reader, func(Node) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(Node) io.Reader) io.Reader

	MapSByte(func(Node) []byte) ResultSByte
	FoldSByte([]byte, func(Node) []byte) []byte
	FoldSByteF(func(error) []byte, func(Node) []byte) []byte

	MapSerializedMessage(func(Node) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(Node) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(Node) SerializedMessage) SerializedMessage

	MapStore(func(Node) Store) ResultStore
	FoldStore(Store, func(Node) Store) Store
	FoldStoreF(func(error) Store, func(Node) Store) Store

	MapString(func(Node) string) ResultString
	FoldString(string, func(Node) string) string
	FoldStringF(func(error) string, func(Node) string) string
 
}

// ResultReader
type ResultReader interface {
	Map(func(io.Reader))
	FoldF(func(error), func(io.Reader))

	MapBool(func(io.Reader) bool) ResultBool
	FoldBool(bool, func(io.Reader) bool) bool
	FoldBoolF(func(error) bool, func(io.Reader) bool) bool

	MapConnPool(func(io.Reader) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(io.Reader) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(io.Reader) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(io.Reader) error) ResultError
	FoldError(error, func(io.Reader) error) error
	FoldErrorF(func(error) error, func(io.Reader) error) error

	MapInt(func(io.Reader) int) ResultInt
	FoldInt(int, func(io.Reader) int) int
	FoldIntF(func(error) int, func(io.Reader) int) int

	MapMessage(func(io.Reader) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(io.Reader) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(io.Reader) *mail.Message) *mail.Message

	MapNode(func(io.Reader) Node) ResultNode
	FoldNode(Node, func(io.Reader) Node) Node
	FoldNodeF(func(error) Node, func(io.Reader) Node) Node

	MapReader(func(io.Reader) io.Reader) ResultReader
	FoldReader(io.Reader, func(io.Reader) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(io.Reader) io.Reader) io.Reader

	MapSByte(func(io.Reader) []byte) ResultSByte
	FoldSByte([]byte, func(io.Reader) []byte) []byte
	FoldSByteF(func(error) []byte, func(io.Reader) []byte) []byte

	MapSerializedMessage(func(io.Reader) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(io.Reader) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(io.Reader) SerializedMessage) SerializedMessage

	MapStore(func(io.Reader) Store) ResultStore
	FoldStore(Store, func(io.Reader) Store) Store
	FoldStoreF(func(error) Store, func(io.Reader) Store) Store

	MapString(func(io.Reader) string) ResultString
	FoldString(string, func(io.Reader) string) string
	FoldStringF(func(error) string, func(io.Reader) string) string
 
}

// ResultSByte
type ResultSByte interface {
	Map(func([]byte))
	FoldF(func(error), func([]byte))

	MapBool(func([]byte) bool) ResultBool
	FoldBool(bool, func([]byte) bool) bool
	FoldBoolF(func(error) bool, func([]byte) bool) bool

	MapConnPool(func([]byte) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func([]byte) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func([]byte) *pgx.ConnPool) *pgx.ConnPool

	MapError(func([]byte) error) ResultError
	FoldError(error, func([]byte) error) error
	FoldErrorF(func(error) error, func([]byte) error) error

	MapInt(func([]byte) int) ResultInt
	FoldInt(int, func([]byte) int) int
	FoldIntF(func(error) int, func([]byte) int) int

	MapMessage(func([]byte) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func([]byte) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func([]byte) *mail.Message) *mail.Message

	MapNode(func([]byte) Node) ResultNode
	FoldNode(Node, func([]byte) Node) Node
	FoldNodeF(func(error) Node, func([]byte) Node) Node

	MapReader(func([]byte) io.Reader) ResultReader
	FoldReader(io.Reader, func([]byte) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func([]byte) io.Reader) io.Reader

	MapSByte(func([]byte) []byte) ResultSByte
	FoldSByte([]byte, func([]byte) []byte) []byte
	FoldSByteF(func(error) []byte, func([]byte) []byte) []byte

	MapSerializedMessage(func([]byte) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func([]byte) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func([]byte) SerializedMessage) SerializedMessage

	MapStore(func([]byte) Store) ResultStore
	FoldStore(Store, func([]byte) Store) Store
	FoldStoreF(func(error) Store, func([]byte) Store) Store

	MapString(func([]byte) string) ResultString
	FoldString(string, func([]byte) string) string
	FoldStringF(func(error) string, func([]byte) string) string
 
}

// ResultSerializedMessage
type ResultSerializedMessage interface {
	Map(func(SerializedMessage))
	FoldF(func(error), func(SerializedMessage))

	MapBool(func(SerializedMessage) bool) ResultBool
	FoldBool(bool, func(SerializedMessage) bool) bool
	FoldBoolF(func(error) bool, func(SerializedMessage) bool) bool

	MapConnPool(func(SerializedMessage) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(SerializedMessage) error) ResultError
	FoldError(error, func(SerializedMessage) error) error
	FoldErrorF(func(error) error, func(SerializedMessage) error) error

	MapInt(func(SerializedMessage) int) ResultInt
	FoldInt(int, func(SerializedMessage) int) int
	FoldIntF(func(error) int, func(SerializedMessage) int) int

	MapMessage(func(SerializedMessage) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(SerializedMessage) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(SerializedMessage) *mail.Message) *mail.Message

	MapNode(func(SerializedMessage) Node) ResultNode
	FoldNode(Node, func(SerializedMessage) Node) Node
	FoldNodeF(func(error) Node, func(SerializedMessage) Node) Node

	MapReader(func(SerializedMessage) io.Reader) ResultReader
	FoldReader(io.Reader, func(SerializedMessage) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(SerializedMessage) io.Reader) io.Reader

	MapSByte(func(SerializedMessage) []byte) ResultSByte
	FoldSByte([]byte, func(SerializedMessage) []byte) []byte
	FoldSByteF(func(error) []byte, func(SerializedMessage) []byte) []byte

	MapSerializedMessage(func(SerializedMessage) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(SerializedMessage) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(SerializedMessage) SerializedMessage) SerializedMessage

	MapStore(func(SerializedMessage) Store) ResultStore
	FoldStore(Store, func(SerializedMessage) Store) Store
	FoldStoreF(func(error) Store, func(SerializedMessage) Store) Store

	MapString(func(SerializedMessage) string) ResultString
	FoldString(string, func(SerializedMessage) string) string
	FoldStringF(func(error) string, func(SerializedMessage) string) string
 
}

// ResultStore
type ResultStore interface {
	Map(func(Store))
	FoldF(func(error), func(Store))

	MapBool(func(Store) bool) ResultBool
	FoldBool(bool, func(Store) bool) bool
	FoldBoolF(func(error) bool, func(Store) bool) bool

	MapConnPool(func(Store) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(Store) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(Store) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(Store) error) ResultError
	FoldError(error, func(Store) error) error
	FoldErrorF(func(error) error, func(Store) error) error

	MapInt(func(Store) int) ResultInt
	FoldInt(int, func(Store) int) int
	FoldIntF(func(error) int, func(Store) int) int

	MapMessage(func(Store) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(Store) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(Store) *mail.Message) *mail.Message

	MapNode(func(Store) Node) ResultNode
	FoldNode(Node, func(Store) Node) Node
	FoldNodeF(func(error) Node, func(Store) Node) Node

	MapReader(func(Store) io.Reader) ResultReader
	FoldReader(io.Reader, func(Store) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(Store) io.Reader) io.Reader

	MapSByte(func(Store) []byte) ResultSByte
	FoldSByte([]byte, func(Store) []byte) []byte
	FoldSByteF(func(error) []byte, func(Store) []byte) []byte

	MapSerializedMessage(func(Store) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(Store) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(Store) SerializedMessage) SerializedMessage

	MapStore(func(Store) Store) ResultStore
	FoldStore(Store, func(Store) Store) Store
	FoldStoreF(func(error) Store, func(Store) Store) Store

	MapString(func(Store) string) ResultString
	FoldString(string, func(Store) string) string
	FoldStringF(func(error) string, func(Store) string) string
 
}

// ResultString
type ResultString interface {
	Map(func(string))
	FoldF(func(error), func(string))

	MapBool(func(string) bool) ResultBool
	FoldBool(bool, func(string) bool) bool
	FoldBoolF(func(error) bool, func(string) bool) bool

	MapConnPool(func(string) *pgx.ConnPool) ResultConnPool
	FoldConnPool(*pgx.ConnPool, func(string) *pgx.ConnPool) *pgx.ConnPool
	FoldConnPoolF(func(error) *pgx.ConnPool, func(string) *pgx.ConnPool) *pgx.ConnPool

	MapError(func(string) error) ResultError
	FoldError(error, func(string) error) error
	FoldErrorF(func(error) error, func(string) error) error

	MapInt(func(string) int) ResultInt
	FoldInt(int, func(string) int) int
	FoldIntF(func(error) int, func(string) int) int

	MapMessage(func(string) *mail.Message) ResultMessage
	FoldMessage(*mail.Message, func(string) *mail.Message) *mail.Message
	FoldMessageF(func(error) *mail.Message, func(string) *mail.Message) *mail.Message

	MapNode(func(string) Node) ResultNode
	FoldNode(Node, func(string) Node) Node
	FoldNodeF(func(error) Node, func(string) Node) Node

	MapReader(func(string) io.Reader) ResultReader
	FoldReader(io.Reader, func(string) io.Reader) io.Reader
	FoldReaderF(func(error) io.Reader, func(string) io.Reader) io.Reader

	MapSByte(func(string) []byte) ResultSByte
	FoldSByte([]byte, func(string) []byte) []byte
	FoldSByteF(func(error) []byte, func(string) []byte) []byte

	MapSerializedMessage(func(string) SerializedMessage) ResultSerializedMessage
	FoldSerializedMessage(SerializedMessage, func(string) SerializedMessage) SerializedMessage
	FoldSerializedMessageF(func(error) SerializedMessage, func(string) SerializedMessage) SerializedMessage

	MapStore(func(string) Store) ResultStore
	FoldStore(Store, func(string) Store) Store
	FoldStoreF(func(error) Store, func(string) Store) Store

	MapString(func(string) string) ResultString
	FoldString(string, func(string) string) string
	FoldStringF(func(error) string, func(string) string) string
 
}




// ResultBoolFrom builds a result type from a function returning
// (bool, err)
// e.g.: r :=  ResultBoolFrom(myfunc(args))
func ResultBoolFrom(v bool, err error) ResultBool {
	if err != nil {
		return ErrBool(err)
	}
	return OkBool(v)
}

// ResultConnPoolFrom builds a result type from a function returning
// (*pgx.ConnPool, err)
// e.g.: r :=  ResultConnPoolFrom(myfunc(args))
func ResultConnPoolFrom(v *pgx.ConnPool, err error) ResultConnPool {
	if err != nil {
		return ErrConnPool(err)
	}
	return OkConnPool(v)
}

// ResultErrorFrom builds a result type from a function returning
// (error, err)
// e.g.: r :=  ResultErrorFrom(myfunc(args))
func ResultErrorFrom(v error, err error) ResultError {
	if err != nil {
		return ErrError(err)
	}
	return OkError(v)
}

// ResultIntFrom builds a result type from a function returning
// (int, err)
// e.g.: r :=  ResultIntFrom(myfunc(args))
func ResultIntFrom(v int, err error) ResultInt {
	if err != nil {
		return ErrInt(err)
	}
	return OkInt(v)
}

// ResultMessageFrom builds a result type from a function returning
// (*mail.Message, err)
// e.g.: r :=  ResultMessageFrom(myfunc(args))
func ResultMessageFrom(v *mail.Message, err error) ResultMessage {
	if err != nil {
		return ErrMessage(err)
	}
	return OkMessage(v)
}

// ResultNodeFrom builds a result type from a function returning
// (Node, err)
// e.g.: r :=  ResultNodeFrom(myfunc(args))
func ResultNodeFrom(v Node, err error) ResultNode {
	if err != nil {
		return ErrNode(err)
	}
	return OkNode(v)
}

// ResultReaderFrom builds a result type from a function returning
// (io.Reader, err)
// e.g.: r :=  ResultReaderFrom(myfunc(args))
func ResultReaderFrom(v io.Reader, err error) ResultReader {
	if err != nil {
		return ErrReader(err)
	}
	return OkReader(v)
}

// ResultSByteFrom builds a result type from a function returning
// ([]byte, err)
// e.g.: r :=  ResultSByteFrom(myfunc(args))
func ResultSByteFrom(v []byte, err error) ResultSByte {
	if err != nil {
		return ErrSByte(err)
	}
	return OkSByte(v)
}

// ResultSerializedMessageFrom builds a result type from a function returning
// (SerializedMessage, err)
// e.g.: r :=  ResultSerializedMessageFrom(myfunc(args))
func ResultSerializedMessageFrom(v SerializedMessage, err error) ResultSerializedMessage {
	if err != nil {
		return ErrSerializedMessage(err)
	}
	return OkSerializedMessage(v)
}

// ResultStoreFrom builds a result type from a function returning
// (Store, err)
// e.g.: r :=  ResultStoreFrom(myfunc(args))
func ResultStoreFrom(v Store, err error) ResultStore {
	if err != nil {
		return ErrStore(err)
	}
	return OkStore(v)
}

// ResultStringFrom builds a result type from a function returning
// (string, err)
// e.g.: r :=  ResultStringFrom(myfunc(args))
func ResultStringFrom(v string, err error) ResultString {
	if err != nil {
		return ErrString(err)
	}
	return OkString(v)
}




// errBool implements ResultBool for a failed result
type errBool struct{
	left error
}

// ErrBool(error  | string) makes a new errBool
// from an error or a string.
func ErrBool(err interface{}) errBool {
	switch err.(type) {
		case string : return errBool{errors.New(err.(string))}
		case error : return errBool{err.(error)}
	} 
	return errBool{errors.New("ErrBool called with something else than string or error")}
}

// Map with errBool receiver is a noop
func (e errBool) Map(f func(bool)) {}

// FoldF with errBool applies it's first argument
// function on its error state
func (e errBool) FoldF(l func(e error), r func(bool)) { l(e.left) }


// MapBool with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapBool(f func(v bool) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errBool receiver
// returns its first argument.
func (e errBool) FoldBool(a bool, f func(v bool) bool) bool {
	return a
}
// FoldBoolF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return a(e.left)
}

// MapConnPool with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapConnPool(f func(v bool) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errBool receiver
// returns its first argument.
func (e errBool) FoldConnPool(a *pgx.ConnPool, f func(v bool) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapError(f func(v bool) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errBool receiver
// returns its first argument.
func (e errBool) FoldError(a error, f func(v bool) error) error {
	return a
}
// FoldErrorF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return a(e.left)
}

// MapInt with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt(f func(v bool) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errBool receiver
// returns its first argument.
func (e errBool) FoldInt(a int, f func(v bool) int) int {
	return a
}
// FoldIntF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return a(e.left)
}

// MapMessage with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapMessage(f func(v bool) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errBool receiver
// returns its first argument.
func (e errBool) FoldMessage(a *mail.Message, f func(v bool) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapNode(f func(v bool) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errBool receiver
// returns its first argument.
func (e errBool) FoldNode(a Node, f func(v bool) Node) Node {
	return a
}
// FoldNodeF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return a(e.left)
}

// MapReader with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapReader(f func(v bool) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errBool receiver
// returns its first argument.
func (e errBool) FoldReader(a io.Reader, f func(v bool) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldReaderF(a func(error) io.Reader, f func(bool) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapSByte(f func(v bool) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errBool receiver
// returns its first argument.
func (e errBool) FoldSByte(a []byte, f func(v bool) []byte) []byte {
	return a
}
// FoldSByteF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapSerializedMessage(f func(v bool) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errBool receiver
// returns its first argument.
func (e errBool) FoldSerializedMessage(a SerializedMessage, f func(v bool) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapStore(f func(v bool) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errBool receiver
// returns its first argument.
func (e errBool) FoldStore(a Store, f func(v bool) Store) Store {
	return a
}
// FoldStoreF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return a(e.left)
}

// MapString with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapString(f func(v bool) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errBool receiver
// returns its first argument.
func (e errBool) FoldString(a string, f func(v bool) string) string {
	return a
}
// FoldStringF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return a(e.left)
}
 // end of nones

// okBool implements ResultBool for a successful result
type okBool struct {
	right bool
}

// OkBool returns a successful result with value v of type bool 
func OkBool(v bool) okBool {
	return okBool{v}
}
// MapBool with okBool receiver
// applies its function argument on hold value 
func (s okBool) Map(f func(bool)) { f(s.right) }

// FoldFBool with okBool receiver
// applies its second function argument on hold value 
func (s okBool) FoldF(l func(error), r func(bool)) { r(s.right) }


// MapBool on okBool receiver
// applies its function arguments on hold value and returns an okBool
func (s okBool) MapBool(f func(bool) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldBool(a bool, f func(bool) bool) bool {
	return f(s.right)
}

// FoldBoolF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return f(s.right)
}

// MapConnPool on okBool receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okBool) MapConnPool(f func(bool) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldConnPool(a *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(bool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okBool receiver
// applies its function arguments on hold value and returns an okError
func (s okBool) MapError(f func(bool) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldError(a error, f func(bool) error) error {
	return f(s.right)
}

// FoldErrorF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldErrorF(a func(error) error, f func(bool) error) error {
	return f(s.right)
}

// MapInt on okBool receiver
// applies its function arguments on hold value and returns an okInt
func (s okBool) MapInt(f func(bool) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt(a int, f func(bool) int) int {
	return f(s.right)
}

// FoldIntF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return f(s.right)
}

// MapMessage on okBool receiver
// applies its function arguments on hold value and returns an okMessage
func (s okBool) MapMessage(f func(bool) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldMessage(a *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldMessageF(a func(error) *mail.Message, f func(bool) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okBool receiver
// applies its function arguments on hold value and returns an okNode
func (s okBool) MapNode(f func(bool) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldNode(a Node, f func(bool) Node) Node {
	return f(s.right)
}

// FoldNodeF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldNodeF(a func(error) Node, f func(bool) Node) Node {
	return f(s.right)
}

// MapReader on okBool receiver
// applies its function arguments on hold value and returns an okReader
func (s okBool) MapReader(f func(bool) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldReader(a io.Reader, f func(bool) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldReaderF(a func(error) io.Reader, f func(bool) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okBool receiver
// applies its function arguments on hold value and returns an okSByte
func (s okBool) MapSByte(f func(bool) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldSByte(a []byte, f func(bool) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldSByteF(a func(error) []byte, f func(bool) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okBool receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okBool) MapSerializedMessage(f func(bool) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldSerializedMessage(a SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(bool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okBool receiver
// applies its function arguments on hold value and returns an okStore
func (s okBool) MapStore(f func(bool) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldStore(a Store, f func(bool) Store) Store {
	return f(s.right)
}

// FoldStoreF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldStoreF(a func(error) Store, f func(bool) Store) Store {
	return f(s.right)
}

// MapString on okBool receiver
// applies its function arguments on hold value and returns an okString
func (s okBool) MapString(f func(bool) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldString(a string, f func(bool) string) string {
	return f(s.right)
}

// FoldStringF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return f(s.right)
}
 // end of oks



// errConnPool implements ResultConnPool for a failed result
type errConnPool struct{
	left error
}

// ErrConnPool(error  | string) makes a new errConnPool
// from an error or a string.
func ErrConnPool(err interface{}) errConnPool {
	switch err.(type) {
		case string : return errConnPool{errors.New(err.(string))}
		case error : return errConnPool{err.(error)}
	} 
	return errConnPool{errors.New("ErrConnPool called with something else than string or error")}
}

// Map with errConnPool receiver is a noop
func (e errConnPool) Map(f func(*pgx.ConnPool)) {}

// FoldF with errConnPool applies it's first argument
// function on its error state
func (e errConnPool) FoldF(l func(e error), r func(*pgx.ConnPool)) { l(e.left) }


// MapBool with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapBool(f func(v *pgx.ConnPool) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldBool(a bool, f func(v *pgx.ConnPool) bool) bool {
	return a
}
// FoldBoolF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldBoolF(a func(error) bool, f func(*pgx.ConnPool) bool) bool {
	return a(e.left)
}

// MapConnPool with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapConnPool(f func(v *pgx.ConnPool) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldConnPool(a *pgx.ConnPool, f func(v *pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapError(f func(v *pgx.ConnPool) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldError(a error, f func(v *pgx.ConnPool) error) error {
	return a
}
// FoldErrorF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldErrorF(a func(error) error, f func(*pgx.ConnPool) error) error {
	return a(e.left)
}

// MapInt with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapInt(f func(v *pgx.ConnPool) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldInt(a int, f func(v *pgx.ConnPool) int) int {
	return a
}
// FoldIntF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldIntF(a func(error) int, f func(*pgx.ConnPool) int) int {
	return a(e.left)
}

// MapMessage with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapMessage(f func(v *pgx.ConnPool) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldMessage(a *mail.Message, f func(v *pgx.ConnPool) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldMessageF(a func(error) *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapNode(f func(v *pgx.ConnPool) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldNode(a Node, f func(v *pgx.ConnPool) Node) Node {
	return a
}
// FoldNodeF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldNodeF(a func(error) Node, f func(*pgx.ConnPool) Node) Node {
	return a(e.left)
}

// MapReader with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapReader(f func(v *pgx.ConnPool) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldReader(a io.Reader, f func(v *pgx.ConnPool) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldReaderF(a func(error) io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapSByte(f func(v *pgx.ConnPool) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldSByte(a []byte, f func(v *pgx.ConnPool) []byte) []byte {
	return a
}
// FoldSByteF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldSByteF(a func(error) []byte, f func(*pgx.ConnPool) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapSerializedMessage(f func(v *pgx.ConnPool) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldSerializedMessage(a SerializedMessage, f func(v *pgx.ConnPool) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapStore(f func(v *pgx.ConnPool) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldStore(a Store, f func(v *pgx.ConnPool) Store) Store {
	return a
}
// FoldStoreF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldStoreF(a func(error) Store, f func(*pgx.ConnPool) Store) Store {
	return a(e.left)
}

// MapString with errConnPool receiver
// returns a newly built errConnPool with same error.
func (e errConnPool) MapString(f func(v *pgx.ConnPool) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errConnPool receiver
// returns its first argument.
func (e errConnPool) FoldString(a string, f func(v *pgx.ConnPool) string) string {
	return a
}
// FoldStringF with errConnPool receiver
// returns the result of its first argument applied to the result error state.
func (e errConnPool) FoldStringF(a func(error) string, f func(*pgx.ConnPool) string) string {
	return a(e.left)
}
 // end of nones

// okConnPool implements ResultConnPool for a successful result
type okConnPool struct {
	right *pgx.ConnPool
}

// OkConnPool returns a successful result with value v of type *pgx.ConnPool 
func OkConnPool(v *pgx.ConnPool) okConnPool {
	return okConnPool{v}
}
// MapConnPool with okConnPool receiver
// applies its function argument on hold value 
func (s okConnPool) Map(f func(*pgx.ConnPool)) { f(s.right) }

// FoldFConnPool with okConnPool receiver
// applies its second function argument on hold value 
func (s okConnPool) FoldF(l func(error), r func(*pgx.ConnPool)) { r(s.right) }


// MapBool on okConnPool receiver
// applies its function arguments on hold value and returns an okBool
func (s okConnPool) MapBool(f func(*pgx.ConnPool) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldBool(a bool, f func(*pgx.ConnPool) bool) bool {
	return f(s.right)
}

// FoldBoolF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldBoolF(a func(error) bool, f func(*pgx.ConnPool) bool) bool {
	return f(s.right)
}

// MapConnPool on okConnPool receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okConnPool) MapConnPool(f func(*pgx.ConnPool) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldConnPool(a *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*pgx.ConnPool) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okConnPool receiver
// applies its function arguments on hold value and returns an okError
func (s okConnPool) MapError(f func(*pgx.ConnPool) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldError(a error, f func(*pgx.ConnPool) error) error {
	return f(s.right)
}

// FoldErrorF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldErrorF(a func(error) error, f func(*pgx.ConnPool) error) error {
	return f(s.right)
}

// MapInt on okConnPool receiver
// applies its function arguments on hold value and returns an okInt
func (s okConnPool) MapInt(f func(*pgx.ConnPool) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldInt(a int, f func(*pgx.ConnPool) int) int {
	return f(s.right)
}

// FoldIntF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldIntF(a func(error) int, f func(*pgx.ConnPool) int) int {
	return f(s.right)
}

// MapMessage on okConnPool receiver
// applies its function arguments on hold value and returns an okMessage
func (s okConnPool) MapMessage(f func(*pgx.ConnPool) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldMessage(a *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldMessageF(a func(error) *mail.Message, f func(*pgx.ConnPool) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okConnPool receiver
// applies its function arguments on hold value and returns an okNode
func (s okConnPool) MapNode(f func(*pgx.ConnPool) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldNode(a Node, f func(*pgx.ConnPool) Node) Node {
	return f(s.right)
}

// FoldNodeF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldNodeF(a func(error) Node, f func(*pgx.ConnPool) Node) Node {
	return f(s.right)
}

// MapReader on okConnPool receiver
// applies its function arguments on hold value and returns an okReader
func (s okConnPool) MapReader(f func(*pgx.ConnPool) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldReader(a io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldReaderF(a func(error) io.Reader, f func(*pgx.ConnPool) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okConnPool receiver
// applies its function arguments on hold value and returns an okSByte
func (s okConnPool) MapSByte(f func(*pgx.ConnPool) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldSByte(a []byte, f func(*pgx.ConnPool) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldSByteF(a func(error) []byte, f func(*pgx.ConnPool) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okConnPool receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okConnPool) MapSerializedMessage(f func(*pgx.ConnPool) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldSerializedMessage(a SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*pgx.ConnPool) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okConnPool receiver
// applies its function arguments on hold value and returns an okStore
func (s okConnPool) MapStore(f func(*pgx.ConnPool) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldStore(a Store, f func(*pgx.ConnPool) Store) Store {
	return f(s.right)
}

// FoldStoreF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldStoreF(a func(error) Store, f func(*pgx.ConnPool) Store) Store {
	return f(s.right)
}

// MapString on okConnPool receiver
// applies its function arguments on hold value and returns an okString
func (s okConnPool) MapString(f func(*pgx.ConnPool) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldString(a string, f func(*pgx.ConnPool) string) string {
	return f(s.right)
}

// FoldStringF on okConnPool receiver
// applies its second function arguments on hold value and returns an *pgx.ConnPool
func (s okConnPool) FoldStringF(a func(error) string, f func(*pgx.ConnPool) string) string {
	return f(s.right)
}
 // end of oks



// errError implements ResultError for a failed result
type errError struct{
	left error
}

// ErrError(error  | string) makes a new errError
// from an error or a string.
func ErrError(err interface{}) errError {
	switch err.(type) {
		case string : return errError{errors.New(err.(string))}
		case error : return errError{err.(error)}
	} 
	return errError{errors.New("ErrError called with something else than string or error")}
}

// Map with errError receiver is a noop
func (e errError) Map(f func(error)) {}

// FoldF with errError applies it's first argument
// function on its error state
func (e errError) FoldF(l func(e error), r func(error)) { l(e.left) }


// MapBool with errError receiver
// returns a newly built errError with same error.
func (e errError) MapBool(f func(v error) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errError receiver
// returns its first argument.
func (e errError) FoldBool(a bool, f func(v error) bool) bool {
	return a
}
// FoldBoolF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return a(e.left)
}

// MapConnPool with errError receiver
// returns a newly built errError with same error.
func (e errError) MapConnPool(f func(v error) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errError receiver
// returns its first argument.
func (e errError) FoldConnPool(a *pgx.ConnPool, f func(v error) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errError receiver
// returns a newly built errError with same error.
func (e errError) MapError(f func(v error) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errError receiver
// returns its first argument.
func (e errError) FoldError(a error, f func(v error) error) error {
	return a
}
// FoldErrorF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldErrorF(a func(error) error, f func(error) error) error {
	return a(e.left)
}

// MapInt with errError receiver
// returns a newly built errError with same error.
func (e errError) MapInt(f func(v error) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errError receiver
// returns its first argument.
func (e errError) FoldInt(a int, f func(v error) int) int {
	return a
}
// FoldIntF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldIntF(a func(error) int, f func(error) int) int {
	return a(e.left)
}

// MapMessage with errError receiver
// returns a newly built errError with same error.
func (e errError) MapMessage(f func(v error) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errError receiver
// returns its first argument.
func (e errError) FoldMessage(a *mail.Message, f func(v error) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errError receiver
// returns a newly built errError with same error.
func (e errError) MapNode(f func(v error) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errError receiver
// returns its first argument.
func (e errError) FoldNode(a Node, f func(v error) Node) Node {
	return a
}
// FoldNodeF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return a(e.left)
}

// MapReader with errError receiver
// returns a newly built errError with same error.
func (e errError) MapReader(f func(v error) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errError receiver
// returns its first argument.
func (e errError) FoldReader(a io.Reader, f func(v error) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldReaderF(a func(error) io.Reader, f func(error) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errError receiver
// returns a newly built errError with same error.
func (e errError) MapSByte(f func(v error) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errError receiver
// returns its first argument.
func (e errError) FoldSByte(a []byte, f func(v error) []byte) []byte {
	return a
}
// FoldSByteF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errError receiver
// returns a newly built errError with same error.
func (e errError) MapSerializedMessage(f func(v error) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errError receiver
// returns its first argument.
func (e errError) FoldSerializedMessage(a SerializedMessage, f func(v error) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldSerializedMessageF(a func(error) SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errError receiver
// returns a newly built errError with same error.
func (e errError) MapStore(f func(v error) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errError receiver
// returns its first argument.
func (e errError) FoldStore(a Store, f func(v error) Store) Store {
	return a
}
// FoldStoreF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return a(e.left)
}

// MapString with errError receiver
// returns a newly built errError with same error.
func (e errError) MapString(f func(v error) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errError receiver
// returns its first argument.
func (e errError) FoldString(a string, f func(v error) string) string {
	return a
}
// FoldStringF with errError receiver
// returns the result of its first argument applied to the result error state.
func (e errError) FoldStringF(a func(error) string, f func(error) string) string {
	return a(e.left)
}
 // end of nones

// okError implements ResultError for a successful result
type okError struct {
	right error
}

// OkError returns a successful result with value v of type error 
func OkError(v error) okError {
	return okError{v}
}
// MapError with okError receiver
// applies its function argument on hold value 
func (s okError) Map(f func(error)) { f(s.right) }

// FoldFError with okError receiver
// applies its second function argument on hold value 
func (s okError) FoldF(l func(error), r func(error)) { r(s.right) }


// MapBool on okError receiver
// applies its function arguments on hold value and returns an okBool
func (s okError) MapBool(f func(error) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldBool(a bool, f func(error) bool) bool {
	return f(s.right)
}

// FoldBoolF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldBoolF(a func(error) bool, f func(error) bool) bool {
	return f(s.right)
}

// MapConnPool on okError receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okError) MapConnPool(f func(error) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldConnPool(a *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(error) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okError receiver
// applies its function arguments on hold value and returns an okError
func (s okError) MapError(f func(error) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldError(a error, f func(error) error) error {
	return f(s.right)
}

// FoldErrorF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldErrorF(a func(error) error, f func(error) error) error {
	return f(s.right)
}

// MapInt on okError receiver
// applies its function arguments on hold value and returns an okInt
func (s okError) MapInt(f func(error) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldInt(a int, f func(error) int) int {
	return f(s.right)
}

// FoldIntF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldIntF(a func(error) int, f func(error) int) int {
	return f(s.right)
}

// MapMessage on okError receiver
// applies its function arguments on hold value and returns an okMessage
func (s okError) MapMessage(f func(error) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldMessage(a *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldMessageF(a func(error) *mail.Message, f func(error) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okError receiver
// applies its function arguments on hold value and returns an okNode
func (s okError) MapNode(f func(error) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldNode(a Node, f func(error) Node) Node {
	return f(s.right)
}

// FoldNodeF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldNodeF(a func(error) Node, f func(error) Node) Node {
	return f(s.right)
}

// MapReader on okError receiver
// applies its function arguments on hold value and returns an okReader
func (s okError) MapReader(f func(error) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldReader(a io.Reader, f func(error) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldReaderF(a func(error) io.Reader, f func(error) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okError receiver
// applies its function arguments on hold value and returns an okSByte
func (s okError) MapSByte(f func(error) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldSByte(a []byte, f func(error) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldSByteF(a func(error) []byte, f func(error) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okError receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okError) MapSerializedMessage(f func(error) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldSerializedMessage(a SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldSerializedMessageF(a func(error) SerializedMessage, f func(error) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okError receiver
// applies its function arguments on hold value and returns an okStore
func (s okError) MapStore(f func(error) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldStore(a Store, f func(error) Store) Store {
	return f(s.right)
}

// FoldStoreF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldStoreF(a func(error) Store, f func(error) Store) Store {
	return f(s.right)
}

// MapString on okError receiver
// applies its function arguments on hold value and returns an okString
func (s okError) MapString(f func(error) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldString(a string, f func(error) string) string {
	return f(s.right)
}

// FoldStringF on okError receiver
// applies its second function arguments on hold value and returns an error
func (s okError) FoldStringF(a func(error) string, f func(error) string) string {
	return f(s.right)
}
 // end of oks



// errInt implements ResultInt for a failed result
type errInt struct{
	left error
}

// ErrInt(error  | string) makes a new errInt
// from an error or a string.
func ErrInt(err interface{}) errInt {
	switch err.(type) {
		case string : return errInt{errors.New(err.(string))}
		case error : return errInt{err.(error)}
	} 
	return errInt{errors.New("ErrInt called with something else than string or error")}
}

// Map with errInt receiver is a noop
func (e errInt) Map(f func(int)) {}

// FoldF with errInt applies it's first argument
// function on its error state
func (e errInt) FoldF(l func(e error), r func(int)) { l(e.left) }


// MapBool with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapBool(f func(v int) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt receiver
// returns its first argument.
func (e errInt) FoldBool(a bool, f func(v int) bool) bool {
	return a
}
// FoldBoolF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return a(e.left)
}

// MapConnPool with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapConnPool(f func(v int) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errInt receiver
// returns its first argument.
func (e errInt) FoldConnPool(a *pgx.ConnPool, f func(v int) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapError(f func(v int) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errInt receiver
// returns its first argument.
func (e errInt) FoldError(a error, f func(v int) error) error {
	return a
}
// FoldErrorF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldErrorF(a func(error) error, f func(int) error) error {
	return a(e.left)
}

// MapInt with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt(f func(v int) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt receiver
// returns its first argument.
func (e errInt) FoldInt(a int, f func(v int) int) int {
	return a
}
// FoldIntF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldIntF(a func(error) int, f func(int) int) int {
	return a(e.left)
}

// MapMessage with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapMessage(f func(v int) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errInt receiver
// returns its first argument.
func (e errInt) FoldMessage(a *mail.Message, f func(v int) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldMessageF(a func(error) *mail.Message, f func(int) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapNode(f func(v int) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errInt receiver
// returns its first argument.
func (e errInt) FoldNode(a Node, f func(v int) Node) Node {
	return a
}
// FoldNodeF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return a(e.left)
}

// MapReader with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapReader(f func(v int) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errInt receiver
// returns its first argument.
func (e errInt) FoldReader(a io.Reader, f func(v int) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldReaderF(a func(error) io.Reader, f func(int) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapSByte(f func(v int) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errInt receiver
// returns its first argument.
func (e errInt) FoldSByte(a []byte, f func(v int) []byte) []byte {
	return a
}
// FoldSByteF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldSByteF(a func(error) []byte, f func(int) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapSerializedMessage(f func(v int) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errInt receiver
// returns its first argument.
func (e errInt) FoldSerializedMessage(a SerializedMessage, f func(v int) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldSerializedMessageF(a func(error) SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapStore(f func(v int) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errInt receiver
// returns its first argument.
func (e errInt) FoldStore(a Store, f func(v int) Store) Store {
	return a
}
// FoldStoreF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return a(e.left)
}

// MapString with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapString(f func(v int) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt receiver
// returns its first argument.
func (e errInt) FoldString(a string, f func(v int) string) string {
	return a
}
// FoldStringF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldStringF(a func(error) string, f func(int) string) string {
	return a(e.left)
}
 // end of nones

// okInt implements ResultInt for a successful result
type okInt struct {
	right int
}

// OkInt returns a successful result with value v of type int 
func OkInt(v int) okInt {
	return okInt{v}
}
// MapInt with okInt receiver
// applies its function argument on hold value 
func (s okInt) Map(f func(int)) { f(s.right) }

// FoldFInt with okInt receiver
// applies its second function argument on hold value 
func (s okInt) FoldF(l func(error), r func(int)) { r(s.right) }


// MapBool on okInt receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt) MapBool(f func(int) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldBool(a bool, f func(int) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return f(s.right)
}

// MapConnPool on okInt receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okInt) MapConnPool(f func(int) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldConnPool(a *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(int) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okInt receiver
// applies its function arguments on hold value and returns an okError
func (s okInt) MapError(f func(int) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldError(a error, f func(int) error) error {
	return f(s.right)
}

// FoldErrorF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldErrorF(a func(error) error, f func(int) error) error {
	return f(s.right)
}

// MapInt on okInt receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt) MapInt(f func(int) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt(a int, f func(int) int) int {
	return f(s.right)
}

// FoldIntF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldIntF(a func(error) int, f func(int) int) int {
	return f(s.right)
}

// MapMessage on okInt receiver
// applies its function arguments on hold value and returns an okMessage
func (s okInt) MapMessage(f func(int) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldMessage(a *mail.Message, f func(int) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldMessageF(a func(error) *mail.Message, f func(int) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okInt receiver
// applies its function arguments on hold value and returns an okNode
func (s okInt) MapNode(f func(int) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldNode(a Node, f func(int) Node) Node {
	return f(s.right)
}

// FoldNodeF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return f(s.right)
}

// MapReader on okInt receiver
// applies its function arguments on hold value and returns an okReader
func (s okInt) MapReader(f func(int) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldReader(a io.Reader, f func(int) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldReaderF(a func(error) io.Reader, f func(int) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okInt receiver
// applies its function arguments on hold value and returns an okSByte
func (s okInt) MapSByte(f func(int) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldSByte(a []byte, f func(int) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldSByteF(a func(error) []byte, f func(int) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okInt receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okInt) MapSerializedMessage(f func(int) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldSerializedMessage(a SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldSerializedMessageF(a func(error) SerializedMessage, f func(int) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okInt receiver
// applies its function arguments on hold value and returns an okStore
func (s okInt) MapStore(f func(int) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldStore(a Store, f func(int) Store) Store {
	return f(s.right)
}

// FoldStoreF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return f(s.right)
}

// MapString on okInt receiver
// applies its function arguments on hold value and returns an okString
func (s okInt) MapString(f func(int) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldString(a string, f func(int) string) string {
	return f(s.right)
}

// FoldStringF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldStringF(a func(error) string, f func(int) string) string {
	return f(s.right)
}
 // end of oks



// errMessage implements ResultMessage for a failed result
type errMessage struct{
	left error
}

// ErrMessage(error  | string) makes a new errMessage
// from an error or a string.
func ErrMessage(err interface{}) errMessage {
	switch err.(type) {
		case string : return errMessage{errors.New(err.(string))}
		case error : return errMessage{err.(error)}
	} 
	return errMessage{errors.New("ErrMessage called with something else than string or error")}
}

// Map with errMessage receiver is a noop
func (e errMessage) Map(f func(*mail.Message)) {}

// FoldF with errMessage applies it's first argument
// function on its error state
func (e errMessage) FoldF(l func(e error), r func(*mail.Message)) { l(e.left) }


// MapBool with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapBool(f func(v *mail.Message) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errMessage receiver
// returns its first argument.
func (e errMessage) FoldBool(a bool, f func(v *mail.Message) bool) bool {
	return a
}
// FoldBoolF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return a(e.left)
}

// MapConnPool with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapConnPool(f func(v *mail.Message) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errMessage receiver
// returns its first argument.
func (e errMessage) FoldConnPool(a *pgx.ConnPool, f func(v *mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapError(f func(v *mail.Message) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errMessage receiver
// returns its first argument.
func (e errMessage) FoldError(a error, f func(v *mail.Message) error) error {
	return a
}
// FoldErrorF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return a(e.left)
}

// MapInt with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapInt(f func(v *mail.Message) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errMessage receiver
// returns its first argument.
func (e errMessage) FoldInt(a int, f func(v *mail.Message) int) int {
	return a
}
// FoldIntF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldIntF(a func(error) int, f func(*mail.Message) int) int {
	return a(e.left)
}

// MapMessage with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapMessage(f func(v *mail.Message) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errMessage receiver
// returns its first argument.
func (e errMessage) FoldMessage(a *mail.Message, f func(v *mail.Message) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapNode(f func(v *mail.Message) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errMessage receiver
// returns its first argument.
func (e errMessage) FoldNode(a Node, f func(v *mail.Message) Node) Node {
	return a
}
// FoldNodeF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return a(e.left)
}

// MapReader with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapReader(f func(v *mail.Message) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errMessage receiver
// returns its first argument.
func (e errMessage) FoldReader(a io.Reader, f func(v *mail.Message) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldReaderF(a func(error) io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapSByte(f func(v *mail.Message) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errMessage receiver
// returns its first argument.
func (e errMessage) FoldSByte(a []byte, f func(v *mail.Message) []byte) []byte {
	return a
}
// FoldSByteF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapSerializedMessage(f func(v *mail.Message) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errMessage receiver
// returns its first argument.
func (e errMessage) FoldSerializedMessage(a SerializedMessage, f func(v *mail.Message) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapStore(f func(v *mail.Message) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errMessage receiver
// returns its first argument.
func (e errMessage) FoldStore(a Store, f func(v *mail.Message) Store) Store {
	return a
}
// FoldStoreF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return a(e.left)
}

// MapString with errMessage receiver
// returns a newly built errMessage with same error.
func (e errMessage) MapString(f func(v *mail.Message) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errMessage receiver
// returns its first argument.
func (e errMessage) FoldString(a string, f func(v *mail.Message) string) string {
	return a
}
// FoldStringF with errMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errMessage) FoldStringF(a func(error) string, f func(*mail.Message) string) string {
	return a(e.left)
}
 // end of nones

// okMessage implements ResultMessage for a successful result
type okMessage struct {
	right *mail.Message
}

// OkMessage returns a successful result with value v of type *mail.Message 
func OkMessage(v *mail.Message) okMessage {
	return okMessage{v}
}
// MapMessage with okMessage receiver
// applies its function argument on hold value 
func (s okMessage) Map(f func(*mail.Message)) { f(s.right) }

// FoldFMessage with okMessage receiver
// applies its second function argument on hold value 
func (s okMessage) FoldF(l func(error), r func(*mail.Message)) { r(s.right) }


// MapBool on okMessage receiver
// applies its function arguments on hold value and returns an okBool
func (s okMessage) MapBool(f func(*mail.Message) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldBool(a bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}

// FoldBoolF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldBoolF(a func(error) bool, f func(*mail.Message) bool) bool {
	return f(s.right)
}

// MapConnPool on okMessage receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okMessage) MapConnPool(f func(*mail.Message) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldConnPool(a *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(*mail.Message) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okMessage receiver
// applies its function arguments on hold value and returns an okError
func (s okMessage) MapError(f func(*mail.Message) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldError(a error, f func(*mail.Message) error) error {
	return f(s.right)
}

// FoldErrorF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldErrorF(a func(error) error, f func(*mail.Message) error) error {
	return f(s.right)
}

// MapInt on okMessage receiver
// applies its function arguments on hold value and returns an okInt
func (s okMessage) MapInt(f func(*mail.Message) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldInt(a int, f func(*mail.Message) int) int {
	return f(s.right)
}

// FoldIntF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldIntF(a func(error) int, f func(*mail.Message) int) int {
	return f(s.right)
}

// MapMessage on okMessage receiver
// applies its function arguments on hold value and returns an okMessage
func (s okMessage) MapMessage(f func(*mail.Message) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldMessage(a *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldMessageF(a func(error) *mail.Message, f func(*mail.Message) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okMessage receiver
// applies its function arguments on hold value and returns an okNode
func (s okMessage) MapNode(f func(*mail.Message) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldNode(a Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}

// FoldNodeF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldNodeF(a func(error) Node, f func(*mail.Message) Node) Node {
	return f(s.right)
}

// MapReader on okMessage receiver
// applies its function arguments on hold value and returns an okReader
func (s okMessage) MapReader(f func(*mail.Message) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldReader(a io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldReaderF(a func(error) io.Reader, f func(*mail.Message) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okMessage receiver
// applies its function arguments on hold value and returns an okSByte
func (s okMessage) MapSByte(f func(*mail.Message) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldSByte(a []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldSByteF(a func(error) []byte, f func(*mail.Message) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okMessage receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okMessage) MapSerializedMessage(f func(*mail.Message) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldSerializedMessage(a SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(*mail.Message) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okMessage receiver
// applies its function arguments on hold value and returns an okStore
func (s okMessage) MapStore(f func(*mail.Message) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldStore(a Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}

// FoldStoreF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldStoreF(a func(error) Store, f func(*mail.Message) Store) Store {
	return f(s.right)
}

// MapString on okMessage receiver
// applies its function arguments on hold value and returns an okString
func (s okMessage) MapString(f func(*mail.Message) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldString(a string, f func(*mail.Message) string) string {
	return f(s.right)
}

// FoldStringF on okMessage receiver
// applies its second function arguments on hold value and returns an *mail.Message
func (s okMessage) FoldStringF(a func(error) string, f func(*mail.Message) string) string {
	return f(s.right)
}
 // end of oks



// errNode implements ResultNode for a failed result
type errNode struct{
	left error
}

// ErrNode(error  | string) makes a new errNode
// from an error or a string.
func ErrNode(err interface{}) errNode {
	switch err.(type) {
		case string : return errNode{errors.New(err.(string))}
		case error : return errNode{err.(error)}
	} 
	return errNode{errors.New("ErrNode called with something else than string or error")}
}

// Map with errNode receiver is a noop
func (e errNode) Map(f func(Node)) {}

// FoldF with errNode applies it's first argument
// function on its error state
func (e errNode) FoldF(l func(e error), r func(Node)) { l(e.left) }


// MapBool with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapBool(f func(v Node) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errNode receiver
// returns its first argument.
func (e errNode) FoldBool(a bool, f func(v Node) bool) bool {
	return a
}
// FoldBoolF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return a(e.left)
}

// MapConnPool with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapConnPool(f func(v Node) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errNode receiver
// returns its first argument.
func (e errNode) FoldConnPool(a *pgx.ConnPool, f func(v Node) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapError(f func(v Node) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errNode receiver
// returns its first argument.
func (e errNode) FoldError(a error, f func(v Node) error) error {
	return a
}
// FoldErrorF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return a(e.left)
}

// MapInt with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapInt(f func(v Node) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errNode receiver
// returns its first argument.
func (e errNode) FoldInt(a int, f func(v Node) int) int {
	return a
}
// FoldIntF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return a(e.left)
}

// MapMessage with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapMessage(f func(v Node) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errNode receiver
// returns its first argument.
func (e errNode) FoldMessage(a *mail.Message, f func(v Node) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapNode(f func(v Node) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errNode receiver
// returns its first argument.
func (e errNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}
// FoldNodeF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return a(e.left)
}

// MapReader with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapReader(f func(v Node) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errNode receiver
// returns its first argument.
func (e errNode) FoldReader(a io.Reader, f func(v Node) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldReaderF(a func(error) io.Reader, f func(Node) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapSByte(f func(v Node) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errNode receiver
// returns its first argument.
func (e errNode) FoldSByte(a []byte, f func(v Node) []byte) []byte {
	return a
}
// FoldSByteF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapSerializedMessage(f func(v Node) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errNode receiver
// returns its first argument.
func (e errNode) FoldSerializedMessage(a SerializedMessage, f func(v Node) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapStore(f func(v Node) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errNode receiver
// returns its first argument.
func (e errNode) FoldStore(a Store, f func(v Node) Store) Store {
	return a
}
// FoldStoreF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return a(e.left)
}

// MapString with errNode receiver
// returns a newly built errNode with same error.
func (e errNode) MapString(f func(v Node) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errNode receiver
// returns its first argument.
func (e errNode) FoldString(a string, f func(v Node) string) string {
	return a
}
// FoldStringF with errNode receiver
// returns the result of its first argument applied to the result error state.
func (e errNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return a(e.left)
}
 // end of nones

// okNode implements ResultNode for a successful result
type okNode struct {
	right Node
}

// OkNode returns a successful result with value v of type Node 
func OkNode(v Node) okNode {
	return okNode{v}
}
// MapNode with okNode receiver
// applies its function argument on hold value 
func (s okNode) Map(f func(Node)) { f(s.right) }

// FoldFNode with okNode receiver
// applies its second function argument on hold value 
func (s okNode) FoldF(l func(error), r func(Node)) { r(s.right) }


// MapBool on okNode receiver
// applies its function arguments on hold value and returns an okBool
func (s okNode) MapBool(f func(Node) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldBool(a bool, f func(Node) bool) bool {
	return f(s.right)
}

// FoldBoolF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldBoolF(a func(error) bool, f func(Node) bool) bool {
	return f(s.right)
}

// MapConnPool on okNode receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okNode) MapConnPool(f func(Node) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldConnPool(a *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Node) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okNode receiver
// applies its function arguments on hold value and returns an okError
func (s okNode) MapError(f func(Node) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldError(a error, f func(Node) error) error {
	return f(s.right)
}

// FoldErrorF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldErrorF(a func(error) error, f func(Node) error) error {
	return f(s.right)
}

// MapInt on okNode receiver
// applies its function arguments on hold value and returns an okInt
func (s okNode) MapInt(f func(Node) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldInt(a int, f func(Node) int) int {
	return f(s.right)
}

// FoldIntF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return f(s.right)
}

// MapMessage on okNode receiver
// applies its function arguments on hold value and returns an okMessage
func (s okNode) MapMessage(f func(Node) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldMessage(a *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldMessageF(a func(error) *mail.Message, f func(Node) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okNode receiver
// applies its function arguments on hold value and returns an okNode
func (s okNode) MapNode(f func(Node) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldNode(a Node, f func(Node) Node) Node {
	return f(s.right)
}

// FoldNodeF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return f(s.right)
}

// MapReader on okNode receiver
// applies its function arguments on hold value and returns an okReader
func (s okNode) MapReader(f func(Node) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldReader(a io.Reader, f func(Node) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldReaderF(a func(error) io.Reader, f func(Node) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okNode receiver
// applies its function arguments on hold value and returns an okSByte
func (s okNode) MapSByte(f func(Node) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldSByte(a []byte, f func(Node) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldSByteF(a func(error) []byte, f func(Node) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okNode receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okNode) MapSerializedMessage(f func(Node) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldSerializedMessage(a SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Node) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okNode receiver
// applies its function arguments on hold value and returns an okStore
func (s okNode) MapStore(f func(Node) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldStore(a Store, f func(Node) Store) Store {
	return f(s.right)
}

// FoldStoreF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return f(s.right)
}

// MapString on okNode receiver
// applies its function arguments on hold value and returns an okString
func (s okNode) MapString(f func(Node) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldString(a string, f func(Node) string) string {
	return f(s.right)
}

// FoldStringF on okNode receiver
// applies its second function arguments on hold value and returns an Node
func (s okNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return f(s.right)
}
 // end of oks



// errReader implements ResultReader for a failed result
type errReader struct{
	left error
}

// ErrReader(error  | string) makes a new errReader
// from an error or a string.
func ErrReader(err interface{}) errReader {
	switch err.(type) {
		case string : return errReader{errors.New(err.(string))}
		case error : return errReader{err.(error)}
	} 
	return errReader{errors.New("ErrReader called with something else than string or error")}
}

// Map with errReader receiver is a noop
func (e errReader) Map(f func(io.Reader)) {}

// FoldF with errReader applies it's first argument
// function on its error state
func (e errReader) FoldF(l func(e error), r func(io.Reader)) { l(e.left) }


// MapBool with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapBool(f func(v io.Reader) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errReader receiver
// returns its first argument.
func (e errReader) FoldBool(a bool, f func(v io.Reader) bool) bool {
	return a
}
// FoldBoolF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldBoolF(a func(error) bool, f func(io.Reader) bool) bool {
	return a(e.left)
}

// MapConnPool with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapConnPool(f func(v io.Reader) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errReader receiver
// returns its first argument.
func (e errReader) FoldConnPool(a *pgx.ConnPool, f func(v io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapError(f func(v io.Reader) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errReader receiver
// returns its first argument.
func (e errReader) FoldError(a error, f func(v io.Reader) error) error {
	return a
}
// FoldErrorF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldErrorF(a func(error) error, f func(io.Reader) error) error {
	return a(e.left)
}

// MapInt with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapInt(f func(v io.Reader) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errReader receiver
// returns its first argument.
func (e errReader) FoldInt(a int, f func(v io.Reader) int) int {
	return a
}
// FoldIntF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldIntF(a func(error) int, f func(io.Reader) int) int {
	return a(e.left)
}

// MapMessage with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapMessage(f func(v io.Reader) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errReader receiver
// returns its first argument.
func (e errReader) FoldMessage(a *mail.Message, f func(v io.Reader) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldMessageF(a func(error) *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapNode(f func(v io.Reader) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errReader receiver
// returns its first argument.
func (e errReader) FoldNode(a Node, f func(v io.Reader) Node) Node {
	return a
}
// FoldNodeF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldNodeF(a func(error) Node, f func(io.Reader) Node) Node {
	return a(e.left)
}

// MapReader with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapReader(f func(v io.Reader) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errReader receiver
// returns its first argument.
func (e errReader) FoldReader(a io.Reader, f func(v io.Reader) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldReaderF(a func(error) io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapSByte(f func(v io.Reader) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errReader receiver
// returns its first argument.
func (e errReader) FoldSByte(a []byte, f func(v io.Reader) []byte) []byte {
	return a
}
// FoldSByteF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldSByteF(a func(error) []byte, f func(io.Reader) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapSerializedMessage(f func(v io.Reader) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errReader receiver
// returns its first argument.
func (e errReader) FoldSerializedMessage(a SerializedMessage, f func(v io.Reader) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldSerializedMessageF(a func(error) SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapStore(f func(v io.Reader) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errReader receiver
// returns its first argument.
func (e errReader) FoldStore(a Store, f func(v io.Reader) Store) Store {
	return a
}
// FoldStoreF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldStoreF(a func(error) Store, f func(io.Reader) Store) Store {
	return a(e.left)
}

// MapString with errReader receiver
// returns a newly built errReader with same error.
func (e errReader) MapString(f func(v io.Reader) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errReader receiver
// returns its first argument.
func (e errReader) FoldString(a string, f func(v io.Reader) string) string {
	return a
}
// FoldStringF with errReader receiver
// returns the result of its first argument applied to the result error state.
func (e errReader) FoldStringF(a func(error) string, f func(io.Reader) string) string {
	return a(e.left)
}
 // end of nones

// okReader implements ResultReader for a successful result
type okReader struct {
	right io.Reader
}

// OkReader returns a successful result with value v of type io.Reader 
func OkReader(v io.Reader) okReader {
	return okReader{v}
}
// MapReader with okReader receiver
// applies its function argument on hold value 
func (s okReader) Map(f func(io.Reader)) { f(s.right) }

// FoldFReader with okReader receiver
// applies its second function argument on hold value 
func (s okReader) FoldF(l func(error), r func(io.Reader)) { r(s.right) }


// MapBool on okReader receiver
// applies its function arguments on hold value and returns an okBool
func (s okReader) MapBool(f func(io.Reader) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldBool(a bool, f func(io.Reader) bool) bool {
	return f(s.right)
}

// FoldBoolF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldBoolF(a func(error) bool, f func(io.Reader) bool) bool {
	return f(s.right)
}

// MapConnPool on okReader receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okReader) MapConnPool(f func(io.Reader) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldConnPool(a *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(io.Reader) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okReader receiver
// applies its function arguments on hold value and returns an okError
func (s okReader) MapError(f func(io.Reader) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldError(a error, f func(io.Reader) error) error {
	return f(s.right)
}

// FoldErrorF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldErrorF(a func(error) error, f func(io.Reader) error) error {
	return f(s.right)
}

// MapInt on okReader receiver
// applies its function arguments on hold value and returns an okInt
func (s okReader) MapInt(f func(io.Reader) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldInt(a int, f func(io.Reader) int) int {
	return f(s.right)
}

// FoldIntF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldIntF(a func(error) int, f func(io.Reader) int) int {
	return f(s.right)
}

// MapMessage on okReader receiver
// applies its function arguments on hold value and returns an okMessage
func (s okReader) MapMessage(f func(io.Reader) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldMessage(a *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldMessageF(a func(error) *mail.Message, f func(io.Reader) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okReader receiver
// applies its function arguments on hold value and returns an okNode
func (s okReader) MapNode(f func(io.Reader) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldNode(a Node, f func(io.Reader) Node) Node {
	return f(s.right)
}

// FoldNodeF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldNodeF(a func(error) Node, f func(io.Reader) Node) Node {
	return f(s.right)
}

// MapReader on okReader receiver
// applies its function arguments on hold value and returns an okReader
func (s okReader) MapReader(f func(io.Reader) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldReader(a io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldReaderF(a func(error) io.Reader, f func(io.Reader) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okReader receiver
// applies its function arguments on hold value and returns an okSByte
func (s okReader) MapSByte(f func(io.Reader) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldSByte(a []byte, f func(io.Reader) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldSByteF(a func(error) []byte, f func(io.Reader) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okReader receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okReader) MapSerializedMessage(f func(io.Reader) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldSerializedMessage(a SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldSerializedMessageF(a func(error) SerializedMessage, f func(io.Reader) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okReader receiver
// applies its function arguments on hold value and returns an okStore
func (s okReader) MapStore(f func(io.Reader) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldStore(a Store, f func(io.Reader) Store) Store {
	return f(s.right)
}

// FoldStoreF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldStoreF(a func(error) Store, f func(io.Reader) Store) Store {
	return f(s.right)
}

// MapString on okReader receiver
// applies its function arguments on hold value and returns an okString
func (s okReader) MapString(f func(io.Reader) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldString(a string, f func(io.Reader) string) string {
	return f(s.right)
}

// FoldStringF on okReader receiver
// applies its second function arguments on hold value and returns an io.Reader
func (s okReader) FoldStringF(a func(error) string, f func(io.Reader) string) string {
	return f(s.right)
}
 // end of oks



// errSByte implements ResultSByte for a failed result
type errSByte struct{
	left error
}

// ErrSByte(error  | string) makes a new errSByte
// from an error or a string.
func ErrSByte(err interface{}) errSByte {
	switch err.(type) {
		case string : return errSByte{errors.New(err.(string))}
		case error : return errSByte{err.(error)}
	} 
	return errSByte{errors.New("ErrSByte called with something else than string or error")}
}

// Map with errSByte receiver is a noop
func (e errSByte) Map(f func([]byte)) {}

// FoldF with errSByte applies it's first argument
// function on its error state
func (e errSByte) FoldF(l func(e error), r func([]byte)) { l(e.left) }


// MapBool with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapBool(f func(v []byte) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errSByte receiver
// returns its first argument.
func (e errSByte) FoldBool(a bool, f func(v []byte) bool) bool {
	return a
}
// FoldBoolF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return a(e.left)
}

// MapConnPool with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapConnPool(f func(v []byte) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errSByte receiver
// returns its first argument.
func (e errSByte) FoldConnPool(a *pgx.ConnPool, f func(v []byte) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldConnPoolF(a func(error) *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapError(f func(v []byte) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errSByte receiver
// returns its first argument.
func (e errSByte) FoldError(a error, f func(v []byte) error) error {
	return a
}
// FoldErrorF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return a(e.left)
}

// MapInt with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapInt(f func(v []byte) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errSByte receiver
// returns its first argument.
func (e errSByte) FoldInt(a int, f func(v []byte) int) int {
	return a
}
// FoldIntF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldIntF(a func(error) int, f func([]byte) int) int {
	return a(e.left)
}

// MapMessage with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapMessage(f func(v []byte) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errSByte receiver
// returns its first argument.
func (e errSByte) FoldMessage(a *mail.Message, f func(v []byte) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapNode(f func(v []byte) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errSByte receiver
// returns its first argument.
func (e errSByte) FoldNode(a Node, f func(v []byte) Node) Node {
	return a
}
// FoldNodeF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return a(e.left)
}

// MapReader with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapReader(f func(v []byte) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errSByte receiver
// returns its first argument.
func (e errSByte) FoldReader(a io.Reader, f func(v []byte) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldReaderF(a func(error) io.Reader, f func([]byte) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapSByte(f func(v []byte) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errSByte receiver
// returns its first argument.
func (e errSByte) FoldSByte(a []byte, f func(v []byte) []byte) []byte {
	return a
}
// FoldSByteF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapSerializedMessage(f func(v []byte) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errSByte receiver
// returns its first argument.
func (e errSByte) FoldSerializedMessage(a SerializedMessage, f func(v []byte) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldSerializedMessageF(a func(error) SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapStore(f func(v []byte) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errSByte receiver
// returns its first argument.
func (e errSByte) FoldStore(a Store, f func(v []byte) Store) Store {
	return a
}
// FoldStoreF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return a(e.left)
}

// MapString with errSByte receiver
// returns a newly built errSByte with same error.
func (e errSByte) MapString(f func(v []byte) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errSByte receiver
// returns its first argument.
func (e errSByte) FoldString(a string, f func(v []byte) string) string {
	return a
}
// FoldStringF with errSByte receiver
// returns the result of its first argument applied to the result error state.
func (e errSByte) FoldStringF(a func(error) string, f func([]byte) string) string {
	return a(e.left)
}
 // end of nones

// okSByte implements ResultSByte for a successful result
type okSByte struct {
	right []byte
}

// OkSByte returns a successful result with value v of type []byte 
func OkSByte(v []byte) okSByte {
	return okSByte{v}
}
// MapSByte with okSByte receiver
// applies its function argument on hold value 
func (s okSByte) Map(f func([]byte)) { f(s.right) }

// FoldFSByte with okSByte receiver
// applies its second function argument on hold value 
func (s okSByte) FoldF(l func(error), r func([]byte)) { r(s.right) }


// MapBool on okSByte receiver
// applies its function arguments on hold value and returns an okBool
func (s okSByte) MapBool(f func([]byte) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldBool(a bool, f func([]byte) bool) bool {
	return f(s.right)
}

// FoldBoolF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldBoolF(a func(error) bool, f func([]byte) bool) bool {
	return f(s.right)
}

// MapConnPool on okSByte receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okSByte) MapConnPool(f func([]byte) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldConnPool(a *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldConnPoolF(a func(error) *pgx.ConnPool, f func([]byte) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okSByte receiver
// applies its function arguments on hold value and returns an okError
func (s okSByte) MapError(f func([]byte) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldError(a error, f func([]byte) error) error {
	return f(s.right)
}

// FoldErrorF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldErrorF(a func(error) error, f func([]byte) error) error {
	return f(s.right)
}

// MapInt on okSByte receiver
// applies its function arguments on hold value and returns an okInt
func (s okSByte) MapInt(f func([]byte) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldInt(a int, f func([]byte) int) int {
	return f(s.right)
}

// FoldIntF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldIntF(a func(error) int, f func([]byte) int) int {
	return f(s.right)
}

// MapMessage on okSByte receiver
// applies its function arguments on hold value and returns an okMessage
func (s okSByte) MapMessage(f func([]byte) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldMessage(a *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldMessageF(a func(error) *mail.Message, f func([]byte) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okSByte receiver
// applies its function arguments on hold value and returns an okNode
func (s okSByte) MapNode(f func([]byte) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldNode(a Node, f func([]byte) Node) Node {
	return f(s.right)
}

// FoldNodeF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldNodeF(a func(error) Node, f func([]byte) Node) Node {
	return f(s.right)
}

// MapReader on okSByte receiver
// applies its function arguments on hold value and returns an okReader
func (s okSByte) MapReader(f func([]byte) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldReader(a io.Reader, f func([]byte) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldReaderF(a func(error) io.Reader, f func([]byte) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okSByte receiver
// applies its function arguments on hold value and returns an okSByte
func (s okSByte) MapSByte(f func([]byte) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldSByte(a []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldSByteF(a func(error) []byte, f func([]byte) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okSByte receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okSByte) MapSerializedMessage(f func([]byte) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldSerializedMessage(a SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldSerializedMessageF(a func(error) SerializedMessage, f func([]byte) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okSByte receiver
// applies its function arguments on hold value and returns an okStore
func (s okSByte) MapStore(f func([]byte) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldStore(a Store, f func([]byte) Store) Store {
	return f(s.right)
}

// FoldStoreF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldStoreF(a func(error) Store, f func([]byte) Store) Store {
	return f(s.right)
}

// MapString on okSByte receiver
// applies its function arguments on hold value and returns an okString
func (s okSByte) MapString(f func([]byte) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldString(a string, f func([]byte) string) string {
	return f(s.right)
}

// FoldStringF on okSByte receiver
// applies its second function arguments on hold value and returns an []byte
func (s okSByte) FoldStringF(a func(error) string, f func([]byte) string) string {
	return f(s.right)
}
 // end of oks



// errSerializedMessage implements ResultSerializedMessage for a failed result
type errSerializedMessage struct{
	left error
}

// ErrSerializedMessage(error  | string) makes a new errSerializedMessage
// from an error or a string.
func ErrSerializedMessage(err interface{}) errSerializedMessage {
	switch err.(type) {
		case string : return errSerializedMessage{errors.New(err.(string))}
		case error : return errSerializedMessage{err.(error)}
	} 
	return errSerializedMessage{errors.New("ErrSerializedMessage called with something else than string or error")}
}

// Map with errSerializedMessage receiver is a noop
func (e errSerializedMessage) Map(f func(SerializedMessage)) {}

// FoldF with errSerializedMessage applies it's first argument
// function on its error state
func (e errSerializedMessage) FoldF(l func(e error), r func(SerializedMessage)) { l(e.left) }


// MapBool with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapBool(f func(v SerializedMessage) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldBool(a bool, f func(v SerializedMessage) bool) bool {
	return a
}
// FoldBoolF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldBoolF(a func(error) bool, f func(SerializedMessage) bool) bool {
	return a(e.left)
}

// MapConnPool with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapConnPool(f func(v SerializedMessage) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldConnPool(a *pgx.ConnPool, f func(v SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapError(f func(v SerializedMessage) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldError(a error, f func(v SerializedMessage) error) error {
	return a
}
// FoldErrorF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldErrorF(a func(error) error, f func(SerializedMessage) error) error {
	return a(e.left)
}

// MapInt with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapInt(f func(v SerializedMessage) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldInt(a int, f func(v SerializedMessage) int) int {
	return a
}
// FoldIntF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldIntF(a func(error) int, f func(SerializedMessage) int) int {
	return a(e.left)
}

// MapMessage with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapMessage(f func(v SerializedMessage) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldMessage(a *mail.Message, f func(v SerializedMessage) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldMessageF(a func(error) *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapNode(f func(v SerializedMessage) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldNode(a Node, f func(v SerializedMessage) Node) Node {
	return a
}
// FoldNodeF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldNodeF(a func(error) Node, f func(SerializedMessage) Node) Node {
	return a(e.left)
}

// MapReader with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapReader(f func(v SerializedMessage) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldReader(a io.Reader, f func(v SerializedMessage) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldReaderF(a func(error) io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapSByte(f func(v SerializedMessage) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldSByte(a []byte, f func(v SerializedMessage) []byte) []byte {
	return a
}
// FoldSByteF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldSByteF(a func(error) []byte, f func(SerializedMessage) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapSerializedMessage(f func(v SerializedMessage) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldSerializedMessage(a SerializedMessage, f func(v SerializedMessage) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapStore(f func(v SerializedMessage) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldStore(a Store, f func(v SerializedMessage) Store) Store {
	return a
}
// FoldStoreF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldStoreF(a func(error) Store, f func(SerializedMessage) Store) Store {
	return a(e.left)
}

// MapString with errSerializedMessage receiver
// returns a newly built errSerializedMessage with same error.
func (e errSerializedMessage) MapString(f func(v SerializedMessage) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errSerializedMessage receiver
// returns its first argument.
func (e errSerializedMessage) FoldString(a string, f func(v SerializedMessage) string) string {
	return a
}
// FoldStringF with errSerializedMessage receiver
// returns the result of its first argument applied to the result error state.
func (e errSerializedMessage) FoldStringF(a func(error) string, f func(SerializedMessage) string) string {
	return a(e.left)
}
 // end of nones

// okSerializedMessage implements ResultSerializedMessage for a successful result
type okSerializedMessage struct {
	right SerializedMessage
}

// OkSerializedMessage returns a successful result with value v of type SerializedMessage 
func OkSerializedMessage(v SerializedMessage) okSerializedMessage {
	return okSerializedMessage{v}
}
// MapSerializedMessage with okSerializedMessage receiver
// applies its function argument on hold value 
func (s okSerializedMessage) Map(f func(SerializedMessage)) { f(s.right) }

// FoldFSerializedMessage with okSerializedMessage receiver
// applies its second function argument on hold value 
func (s okSerializedMessage) FoldF(l func(error), r func(SerializedMessage)) { r(s.right) }


// MapBool on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okBool
func (s okSerializedMessage) MapBool(f func(SerializedMessage) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldBool(a bool, f func(SerializedMessage) bool) bool {
	return f(s.right)
}

// FoldBoolF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldBoolF(a func(error) bool, f func(SerializedMessage) bool) bool {
	return f(s.right)
}

// MapConnPool on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okSerializedMessage) MapConnPool(f func(SerializedMessage) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldConnPool(a *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(SerializedMessage) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okError
func (s okSerializedMessage) MapError(f func(SerializedMessage) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldError(a error, f func(SerializedMessage) error) error {
	return f(s.right)
}

// FoldErrorF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldErrorF(a func(error) error, f func(SerializedMessage) error) error {
	return f(s.right)
}

// MapInt on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okInt
func (s okSerializedMessage) MapInt(f func(SerializedMessage) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldInt(a int, f func(SerializedMessage) int) int {
	return f(s.right)
}

// FoldIntF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldIntF(a func(error) int, f func(SerializedMessage) int) int {
	return f(s.right)
}

// MapMessage on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okMessage
func (s okSerializedMessage) MapMessage(f func(SerializedMessage) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldMessage(a *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldMessageF(a func(error) *mail.Message, f func(SerializedMessage) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okNode
func (s okSerializedMessage) MapNode(f func(SerializedMessage) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldNode(a Node, f func(SerializedMessage) Node) Node {
	return f(s.right)
}

// FoldNodeF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldNodeF(a func(error) Node, f func(SerializedMessage) Node) Node {
	return f(s.right)
}

// MapReader on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okReader
func (s okSerializedMessage) MapReader(f func(SerializedMessage) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldReader(a io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldReaderF(a func(error) io.Reader, f func(SerializedMessage) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okSByte
func (s okSerializedMessage) MapSByte(f func(SerializedMessage) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldSByte(a []byte, f func(SerializedMessage) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldSByteF(a func(error) []byte, f func(SerializedMessage) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okSerializedMessage) MapSerializedMessage(f func(SerializedMessage) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldSerializedMessage(a SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldSerializedMessageF(a func(error) SerializedMessage, f func(SerializedMessage) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okStore
func (s okSerializedMessage) MapStore(f func(SerializedMessage) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldStore(a Store, f func(SerializedMessage) Store) Store {
	return f(s.right)
}

// FoldStoreF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldStoreF(a func(error) Store, f func(SerializedMessage) Store) Store {
	return f(s.right)
}

// MapString on okSerializedMessage receiver
// applies its function arguments on hold value and returns an okString
func (s okSerializedMessage) MapString(f func(SerializedMessage) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldString(a string, f func(SerializedMessage) string) string {
	return f(s.right)
}

// FoldStringF on okSerializedMessage receiver
// applies its second function arguments on hold value and returns an SerializedMessage
func (s okSerializedMessage) FoldStringF(a func(error) string, f func(SerializedMessage) string) string {
	return f(s.right)
}
 // end of oks



// errStore implements ResultStore for a failed result
type errStore struct{
	left error
}

// ErrStore(error  | string) makes a new errStore
// from an error or a string.
func ErrStore(err interface{}) errStore {
	switch err.(type) {
		case string : return errStore{errors.New(err.(string))}
		case error : return errStore{err.(error)}
	} 
	return errStore{errors.New("ErrStore called with something else than string or error")}
}

// Map with errStore receiver is a noop
func (e errStore) Map(f func(Store)) {}

// FoldF with errStore applies it's first argument
// function on its error state
func (e errStore) FoldF(l func(e error), r func(Store)) { l(e.left) }


// MapBool with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapBool(f func(v Store) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errStore receiver
// returns its first argument.
func (e errStore) FoldBool(a bool, f func(v Store) bool) bool {
	return a
}
// FoldBoolF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return a(e.left)
}

// MapConnPool with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapConnPool(f func(v Store) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errStore receiver
// returns its first argument.
func (e errStore) FoldConnPool(a *pgx.ConnPool, f func(v Store) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapError(f func(v Store) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errStore receiver
// returns its first argument.
func (e errStore) FoldError(a error, f func(v Store) error) error {
	return a
}
// FoldErrorF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return a(e.left)
}

// MapInt with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapInt(f func(v Store) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errStore receiver
// returns its first argument.
func (e errStore) FoldInt(a int, f func(v Store) int) int {
	return a
}
// FoldIntF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return a(e.left)
}

// MapMessage with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapMessage(f func(v Store) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errStore receiver
// returns its first argument.
func (e errStore) FoldMessage(a *mail.Message, f func(v Store) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapNode(f func(v Store) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errStore receiver
// returns its first argument.
func (e errStore) FoldNode(a Node, f func(v Store) Node) Node {
	return a
}
// FoldNodeF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return a(e.left)
}

// MapReader with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapReader(f func(v Store) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errStore receiver
// returns its first argument.
func (e errStore) FoldReader(a io.Reader, f func(v Store) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldReaderF(a func(error) io.Reader, f func(Store) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapSByte(f func(v Store) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errStore receiver
// returns its first argument.
func (e errStore) FoldSByte(a []byte, f func(v Store) []byte) []byte {
	return a
}
// FoldSByteF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapSerializedMessage(f func(v Store) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errStore receiver
// returns its first argument.
func (e errStore) FoldSerializedMessage(a SerializedMessage, f func(v Store) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapStore(f func(v Store) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errStore receiver
// returns its first argument.
func (e errStore) FoldStore(a Store, f func(v Store) Store) Store {
	return a
}
// FoldStoreF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return a(e.left)
}

// MapString with errStore receiver
// returns a newly built errStore with same error.
func (e errStore) MapString(f func(v Store) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errStore receiver
// returns its first argument.
func (e errStore) FoldString(a string, f func(v Store) string) string {
	return a
}
// FoldStringF with errStore receiver
// returns the result of its first argument applied to the result error state.
func (e errStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return a(e.left)
}
 // end of nones

// okStore implements ResultStore for a successful result
type okStore struct {
	right Store
}

// OkStore returns a successful result with value v of type Store 
func OkStore(v Store) okStore {
	return okStore{v}
}
// MapStore with okStore receiver
// applies its function argument on hold value 
func (s okStore) Map(f func(Store)) { f(s.right) }

// FoldFStore with okStore receiver
// applies its second function argument on hold value 
func (s okStore) FoldF(l func(error), r func(Store)) { r(s.right) }


// MapBool on okStore receiver
// applies its function arguments on hold value and returns an okBool
func (s okStore) MapBool(f func(Store) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldBool(a bool, f func(Store) bool) bool {
	return f(s.right)
}

// FoldBoolF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldBoolF(a func(error) bool, f func(Store) bool) bool {
	return f(s.right)
}

// MapConnPool on okStore receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okStore) MapConnPool(f func(Store) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldConnPool(a *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(Store) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okStore receiver
// applies its function arguments on hold value and returns an okError
func (s okStore) MapError(f func(Store) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldError(a error, f func(Store) error) error {
	return f(s.right)
}

// FoldErrorF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldErrorF(a func(error) error, f func(Store) error) error {
	return f(s.right)
}

// MapInt on okStore receiver
// applies its function arguments on hold value and returns an okInt
func (s okStore) MapInt(f func(Store) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldInt(a int, f func(Store) int) int {
	return f(s.right)
}

// FoldIntF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return f(s.right)
}

// MapMessage on okStore receiver
// applies its function arguments on hold value and returns an okMessage
func (s okStore) MapMessage(f func(Store) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldMessage(a *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldMessageF(a func(error) *mail.Message, f func(Store) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okStore receiver
// applies its function arguments on hold value and returns an okNode
func (s okStore) MapNode(f func(Store) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldNode(a Node, f func(Store) Node) Node {
	return f(s.right)
}

// FoldNodeF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return f(s.right)
}

// MapReader on okStore receiver
// applies its function arguments on hold value and returns an okReader
func (s okStore) MapReader(f func(Store) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldReader(a io.Reader, f func(Store) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldReaderF(a func(error) io.Reader, f func(Store) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okStore receiver
// applies its function arguments on hold value and returns an okSByte
func (s okStore) MapSByte(f func(Store) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldSByte(a []byte, f func(Store) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldSByteF(a func(error) []byte, f func(Store) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okStore receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okStore) MapSerializedMessage(f func(Store) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldSerializedMessage(a SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldSerializedMessageF(a func(error) SerializedMessage, f func(Store) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okStore receiver
// applies its function arguments on hold value and returns an okStore
func (s okStore) MapStore(f func(Store) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldStore(a Store, f func(Store) Store) Store {
	return f(s.right)
}

// FoldStoreF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return f(s.right)
}

// MapString on okStore receiver
// applies its function arguments on hold value and returns an okString
func (s okStore) MapString(f func(Store) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldString(a string, f func(Store) string) string {
	return f(s.right)
}

// FoldStringF on okStore receiver
// applies its second function arguments on hold value and returns an Store
func (s okStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return f(s.right)
}
 // end of oks



// errString implements ResultString for a failed result
type errString struct{
	left error
}

// ErrString(error  | string) makes a new errString
// from an error or a string.
func ErrString(err interface{}) errString {
	switch err.(type) {
		case string : return errString{errors.New(err.(string))}
		case error : return errString{err.(error)}
	} 
	return errString{errors.New("ErrString called with something else than string or error")}
}

// Map with errString receiver is a noop
func (e errString) Map(f func(string)) {}

// FoldF with errString applies it's first argument
// function on its error state
func (e errString) FoldF(l func(e error), r func(string)) { l(e.left) }


// MapBool with errString receiver
// returns a newly built errString with same error.
func (e errString) MapBool(f func(v string) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errString receiver
// returns its first argument.
func (e errString) FoldBool(a bool, f func(v string) bool) bool {
	return a
}
// FoldBoolF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return a(e.left)
}

// MapConnPool with errString receiver
// returns a newly built errString with same error.
func (e errString) MapConnPool(f func(v string) *pgx.ConnPool) ResultConnPool {
	return ErrConnPool(e.left)
}
// FoldConnPool with errString receiver
// returns its first argument.
func (e errString) FoldConnPool(a *pgx.ConnPool, f func(v string) *pgx.ConnPool) *pgx.ConnPool {
	return a
}
// FoldConnPoolF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return a(e.left)
}

// MapError with errString receiver
// returns a newly built errString with same error.
func (e errString) MapError(f func(v string) error) ResultError {
	return ErrError(e.left)
}
// FoldError with errString receiver
// returns its first argument.
func (e errString) FoldError(a error, f func(v string) error) error {
	return a
}
// FoldErrorF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldErrorF(a func(error) error, f func(string) error) error {
	return a(e.left)
}

// MapInt with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt(f func(v string) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errString receiver
// returns its first argument.
func (e errString) FoldInt(a int, f func(v string) int) int {
	return a
}
// FoldIntF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldIntF(a func(error) int, f func(string) int) int {
	return a(e.left)
}

// MapMessage with errString receiver
// returns a newly built errString with same error.
func (e errString) MapMessage(f func(v string) *mail.Message) ResultMessage {
	return ErrMessage(e.left)
}
// FoldMessage with errString receiver
// returns its first argument.
func (e errString) FoldMessage(a *mail.Message, f func(v string) *mail.Message) *mail.Message {
	return a
}
// FoldMessageF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldMessageF(a func(error) *mail.Message, f func(string) *mail.Message) *mail.Message {
	return a(e.left)
}

// MapNode with errString receiver
// returns a newly built errString with same error.
func (e errString) MapNode(f func(v string) Node) ResultNode {
	return ErrNode(e.left)
}
// FoldNode with errString receiver
// returns its first argument.
func (e errString) FoldNode(a Node, f func(v string) Node) Node {
	return a
}
// FoldNodeF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return a(e.left)
}

// MapReader with errString receiver
// returns a newly built errString with same error.
func (e errString) MapReader(f func(v string) io.Reader) ResultReader {
	return ErrReader(e.left)
}
// FoldReader with errString receiver
// returns its first argument.
func (e errString) FoldReader(a io.Reader, f func(v string) io.Reader) io.Reader {
	return a
}
// FoldReaderF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldReaderF(a func(error) io.Reader, f func(string) io.Reader) io.Reader {
	return a(e.left)
}

// MapSByte with errString receiver
// returns a newly built errString with same error.
func (e errString) MapSByte(f func(v string) []byte) ResultSByte {
	return ErrSByte(e.left)
}
// FoldSByte with errString receiver
// returns its first argument.
func (e errString) FoldSByte(a []byte, f func(v string) []byte) []byte {
	return a
}
// FoldSByteF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldSByteF(a func(error) []byte, f func(string) []byte) []byte {
	return a(e.left)
}

// MapSerializedMessage with errString receiver
// returns a newly built errString with same error.
func (e errString) MapSerializedMessage(f func(v string) SerializedMessage) ResultSerializedMessage {
	return ErrSerializedMessage(e.left)
}
// FoldSerializedMessage with errString receiver
// returns its first argument.
func (e errString) FoldSerializedMessage(a SerializedMessage, f func(v string) SerializedMessage) SerializedMessage {
	return a
}
// FoldSerializedMessageF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldSerializedMessageF(a func(error) SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return a(e.left)
}

// MapStore with errString receiver
// returns a newly built errString with same error.
func (e errString) MapStore(f func(v string) Store) ResultStore {
	return ErrStore(e.left)
}
// FoldStore with errString receiver
// returns its first argument.
func (e errString) FoldStore(a Store, f func(v string) Store) Store {
	return a
}
// FoldStoreF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return a(e.left)
}

// MapString with errString receiver
// returns a newly built errString with same error.
func (e errString) MapString(f func(v string) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errString receiver
// returns its first argument.
func (e errString) FoldString(a string, f func(v string) string) string {
	return a
}
// FoldStringF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldStringF(a func(error) string, f func(string) string) string {
	return a(e.left)
}
 // end of nones

// okString implements ResultString for a successful result
type okString struct {
	right string
}

// OkString returns a successful result with value v of type string 
func OkString(v string) okString {
	return okString{v}
}
// MapString with okString receiver
// applies its function argument on hold value 
func (s okString) Map(f func(string)) { f(s.right) }

// FoldFString with okString receiver
// applies its second function argument on hold value 
func (s okString) FoldF(l func(error), r func(string)) { r(s.right) }


// MapBool on okString receiver
// applies its function arguments on hold value and returns an okBool
func (s okString) MapBool(f func(string) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldBool(a bool, f func(string) bool) bool {
	return f(s.right)
}

// FoldBoolF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return f(s.right)
}

// MapConnPool on okString receiver
// applies its function arguments on hold value and returns an okConnPool
func (s okString) MapConnPool(f func(string) *pgx.ConnPool) ResultConnPool {
	return OkConnPool(f(s.right))
}

// FoldConnPool on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldConnPool(a *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// FoldConnPoolF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldConnPoolF(a func(error) *pgx.ConnPool, f func(string) *pgx.ConnPool) *pgx.ConnPool {
	return f(s.right)
}

// MapError on okString receiver
// applies its function arguments on hold value and returns an okError
func (s okString) MapError(f func(string) error) ResultError {
	return OkError(f(s.right))
}

// FoldError on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldError(a error, f func(string) error) error {
	return f(s.right)
}

// FoldErrorF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldErrorF(a func(error) error, f func(string) error) error {
	return f(s.right)
}

// MapInt on okString receiver
// applies its function arguments on hold value and returns an okInt
func (s okString) MapInt(f func(string) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt(a int, f func(string) int) int {
	return f(s.right)
}

// FoldIntF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldIntF(a func(error) int, f func(string) int) int {
	return f(s.right)
}

// MapMessage on okString receiver
// applies its function arguments on hold value and returns an okMessage
func (s okString) MapMessage(f func(string) *mail.Message) ResultMessage {
	return OkMessage(f(s.right))
}

// FoldMessage on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldMessage(a *mail.Message, f func(string) *mail.Message) *mail.Message {
	return f(s.right)
}

// FoldMessageF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldMessageF(a func(error) *mail.Message, f func(string) *mail.Message) *mail.Message {
	return f(s.right)
}

// MapNode on okString receiver
// applies its function arguments on hold value and returns an okNode
func (s okString) MapNode(f func(string) Node) ResultNode {
	return OkNode(f(s.right))
}

// FoldNode on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldNode(a Node, f func(string) Node) Node {
	return f(s.right)
}

// FoldNodeF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return f(s.right)
}

// MapReader on okString receiver
// applies its function arguments on hold value and returns an okReader
func (s okString) MapReader(f func(string) io.Reader) ResultReader {
	return OkReader(f(s.right))
}

// FoldReader on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldReader(a io.Reader, f func(string) io.Reader) io.Reader {
	return f(s.right)
}

// FoldReaderF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldReaderF(a func(error) io.Reader, f func(string) io.Reader) io.Reader {
	return f(s.right)
}

// MapSByte on okString receiver
// applies its function arguments on hold value and returns an okSByte
func (s okString) MapSByte(f func(string) []byte) ResultSByte {
	return OkSByte(f(s.right))
}

// FoldSByte on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldSByte(a []byte, f func(string) []byte) []byte {
	return f(s.right)
}

// FoldSByteF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldSByteF(a func(error) []byte, f func(string) []byte) []byte {
	return f(s.right)
}

// MapSerializedMessage on okString receiver
// applies its function arguments on hold value and returns an okSerializedMessage
func (s okString) MapSerializedMessage(f func(string) SerializedMessage) ResultSerializedMessage {
	return OkSerializedMessage(f(s.right))
}

// FoldSerializedMessage on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldSerializedMessage(a SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// FoldSerializedMessageF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldSerializedMessageF(a func(error) SerializedMessage, f func(string) SerializedMessage) SerializedMessage {
	return f(s.right)
}

// MapStore on okString receiver
// applies its function arguments on hold value and returns an okStore
func (s okString) MapStore(f func(string) Store) ResultStore {
	return OkStore(f(s.right))
}

// FoldStore on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldStore(a Store, f func(string) Store) Store {
	return f(s.right)
}

// FoldStoreF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return f(s.right)
}

// MapString on okString receiver
// applies its function arguments on hold value and returns an okString
func (s okString) MapString(f func(string) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldString(a string, f func(string) string) string {
	return f(s.right)
}

// FoldStringF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldStringF(a func(error) string, f func(string) string) string {
	return f(s.right)
}
 // end of oks

 // end of everything

