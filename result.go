// Code generated by go generate - 2018-03-24 07:53:23.949323128 +0000 UTC
package main
import ( 
	"database/sql"
 )

// interfaces

// Int
type ResultInt interface {
	Map(func(int))
	FoldF(func(error), func(int))

	MapInt(func(int) int) ResultInt
	FoldInt(int, func(int) int) int
	FoldIntF(func(error) int, func(int) int) int

	MapNode(func(int) Node) ResultNode
	FoldNode(Node, func(int) Node) Node
	FoldNodeF(func(error) Node, func(int) Node) Node

	MapSqlDB(func(int) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(int) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(int) *sql.DB) *sql.DB

	MapStore(func(int) Store) ResultStore
	FoldStore(Store, func(int) Store) Store
	FoldStoreF(func(error) Store, func(int) Store) Store

	MapString(func(int) string) ResultString
	FoldString(string, func(int) string) string
	FoldStringF(func(error) string, func(int) string) string

	MapUint64(func(int) uint64) ResultUint64
	FoldUint64(uint64, func(int) uint64) uint64
	FoldUint64F(func(error) uint64, func(int) uint64) uint64
 
}

// Node
type ResultNode interface {
	Map(func(Node))
	FoldF(func(error), func(Node))

	MapInt(func(Node) int) ResultInt
	FoldInt(int, func(Node) int) int
	FoldIntF(func(error) int, func(Node) int) int

	MapNode(func(Node) Node) ResultNode
	FoldNode(Node, func(Node) Node) Node
	FoldNodeF(func(error) Node, func(Node) Node) Node

	MapSqlDB(func(Node) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(Node) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(Node) *sql.DB) *sql.DB

	MapStore(func(Node) Store) ResultStore
	FoldStore(Store, func(Node) Store) Store
	FoldStoreF(func(error) Store, func(Node) Store) Store

	MapString(func(Node) string) ResultString
	FoldString(string, func(Node) string) string
	FoldStringF(func(error) string, func(Node) string) string

	MapUint64(func(Node) uint64) ResultUint64
	FoldUint64(uint64, func(Node) uint64) uint64
	FoldUint64F(func(error) uint64, func(Node) uint64) uint64
 
}

// SqlDB
type ResultSqlDB interface {
	Map(func(*sql.DB))
	FoldF(func(error), func(*sql.DB))

	MapInt(func(*sql.DB) int) ResultInt
	FoldInt(int, func(*sql.DB) int) int
	FoldIntF(func(error) int, func(*sql.DB) int) int

	MapNode(func(*sql.DB) Node) ResultNode
	FoldNode(Node, func(*sql.DB) Node) Node
	FoldNodeF(func(error) Node, func(*sql.DB) Node) Node

	MapSqlDB(func(*sql.DB) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(*sql.DB) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(*sql.DB) *sql.DB) *sql.DB

	MapStore(func(*sql.DB) Store) ResultStore
	FoldStore(Store, func(*sql.DB) Store) Store
	FoldStoreF(func(error) Store, func(*sql.DB) Store) Store

	MapString(func(*sql.DB) string) ResultString
	FoldString(string, func(*sql.DB) string) string
	FoldStringF(func(error) string, func(*sql.DB) string) string

	MapUint64(func(*sql.DB) uint64) ResultUint64
	FoldUint64(uint64, func(*sql.DB) uint64) uint64
	FoldUint64F(func(error) uint64, func(*sql.DB) uint64) uint64
 
}

// Store
type ResultStore interface {
	Map(func(Store))
	FoldF(func(error), func(Store))

	MapInt(func(Store) int) ResultInt
	FoldInt(int, func(Store) int) int
	FoldIntF(func(error) int, func(Store) int) int

	MapNode(func(Store) Node) ResultNode
	FoldNode(Node, func(Store) Node) Node
	FoldNodeF(func(error) Node, func(Store) Node) Node

	MapSqlDB(func(Store) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(Store) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(Store) *sql.DB) *sql.DB

	MapStore(func(Store) Store) ResultStore
	FoldStore(Store, func(Store) Store) Store
	FoldStoreF(func(error) Store, func(Store) Store) Store

	MapString(func(Store) string) ResultString
	FoldString(string, func(Store) string) string
	FoldStringF(func(error) string, func(Store) string) string

	MapUint64(func(Store) uint64) ResultUint64
	FoldUint64(uint64, func(Store) uint64) uint64
	FoldUint64F(func(error) uint64, func(Store) uint64) uint64
 
}

// String
type ResultString interface {
	Map(func(string))
	FoldF(func(error), func(string))

	MapInt(func(string) int) ResultInt
	FoldInt(int, func(string) int) int
	FoldIntF(func(error) int, func(string) int) int

	MapNode(func(string) Node) ResultNode
	FoldNode(Node, func(string) Node) Node
	FoldNodeF(func(error) Node, func(string) Node) Node

	MapSqlDB(func(string) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(string) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(string) *sql.DB) *sql.DB

	MapStore(func(string) Store) ResultStore
	FoldStore(Store, func(string) Store) Store
	FoldStoreF(func(error) Store, func(string) Store) Store

	MapString(func(string) string) ResultString
	FoldString(string, func(string) string) string
	FoldStringF(func(error) string, func(string) string) string

	MapUint64(func(string) uint64) ResultUint64
	FoldUint64(uint64, func(string) uint64) uint64
	FoldUint64F(func(error) uint64, func(string) uint64) uint64
 
}

// Uint64
type ResultUint64 interface {
	Map(func(uint64))
	FoldF(func(error), func(uint64))

	MapInt(func(uint64) int) ResultInt
	FoldInt(int, func(uint64) int) int
	FoldIntF(func(error) int, func(uint64) int) int

	MapNode(func(uint64) Node) ResultNode
	FoldNode(Node, func(uint64) Node) Node
	FoldNodeF(func(error) Node, func(uint64) Node) Node

	MapSqlDB(func(uint64) *sql.DB) ResultSqlDB
	FoldSqlDB(*sql.DB, func(uint64) *sql.DB) *sql.DB
	FoldSqlDBF(func(error) *sql.DB, func(uint64) *sql.DB) *sql.DB

	MapStore(func(uint64) Store) ResultStore
	FoldStore(Store, func(uint64) Store) Store
	FoldStoreF(func(error) Store, func(uint64) Store) Store

	MapString(func(uint64) string) ResultString
	FoldString(string, func(uint64) string) string
	FoldStringF(func(error) string, func(uint64) string) string

	MapUint64(func(uint64) uint64) ResultUint64
	FoldUint64(uint64, func(uint64) uint64) uint64
	FoldUint64F(func(error) uint64, func(uint64) uint64) uint64
 
}


// functions 

func ResultIntFrom(v int, err error) ResultInt {
	if err != nil {
		return ErrInt(err)
	}
	return OkInt(v)
}

func ResultNodeFrom(v Node, err error) ResultNode {
	if err != nil {
		return ErrNode(err)
	}
	return OkNode(v)
}

func ResultSqlDBFrom(v *sql.DB, err error) ResultSqlDB {
	if err != nil {
		return ErrSqlDB(err)
	}
	return OkSqlDB(v)
}

func ResultStoreFrom(v Store, err error) ResultStore {
	if err != nil {
		return ErrStore(err)
	}
	return OkStore(v)
}

func ResultStringFrom(v string, err error) ResultString {
	if err != nil {
		return ErrString(err)
	}
	return OkString(v)
}

func ResultUint64From(v uint64, err error) ResultUint64 {
	if err != nil {
		return ErrUint64(err)
	}
	return OkUint64(v)
}



// none
type errInt struct{
	left error
}

func ErrInt(err error) ResultInt {
	return errInt{err}
}

// map ErrInt
func (e errInt) Map(f func(int)) {}
func (e errInt) FoldF(l func(e error), r func(int)) { l(e.left) }

 // map ErrInt => ResultInt
func (e errInt) MapInt(f func(v int) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrInt => Resultint
func (e errInt) FoldInt(a int, f func(v int) int) int {
	return a
}
func (e errInt) FoldIntF(a func(error) int, f func(int) int) int {
	return a(e.left)
}

 // map ErrInt => ResultNode
func (e errInt) MapNode(f func(v int) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrInt => ResultNode
func (e errInt) FoldNode(a Node, f func(v int) Node) Node {
	return a
}
func (e errInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return a(e.left)
}

 // map ErrInt => ResultSqlDB
func (e errInt) MapSqlDB(f func(v int) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrInt => Result*sql.DB
func (e errInt) FoldSqlDB(a *sql.DB, f func(v int) *sql.DB) *sql.DB {
	return a
}
func (e errInt) FoldSqlDBF(a func(error) *sql.DB, f func(int) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrInt => ResultStore
func (e errInt) MapStore(f func(v int) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrInt => ResultStore
func (e errInt) FoldStore(a Store, f func(v int) Store) Store {
	return a
}
func (e errInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return a(e.left)
}

 // map ErrInt => ResultString
func (e errInt) MapString(f func(v int) string) ResultString {
	return ErrString(e.left)
}
// fold ErrInt => Resultstring
func (e errInt) FoldString(a string, f func(v int) string) string {
	return a
}
func (e errInt) FoldStringF(a func(error) string, f func(int) string) string {
	return a(e.left)
}

 // map ErrInt => ResultUint64
func (e errInt) MapUint64(f func(v int) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrInt => Resultuint64
func (e errInt) FoldUint64(a uint64, f func(v int) uint64) uint64 {
	return a
}
func (e errInt) FoldUint64F(a func(error) uint64, f func(int) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okInt struct {
	right int
}

func OkInt(v int) okInt {
	return okInt{v}
}
// map ErrInt
func (s okInt) Map(f func(int)) { f(s.right) }
func (s okInt) FoldF(l func(error), r func(int)) { r(s.right) }

// map SoneInt => ResultInt
func (s okInt) MapInt(f func(int) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkInt => int
func (s okInt) FoldInt(a int, f func(int) int) int {
	return f(s.right)
}
func (s okInt) FoldIntF(a func(error) int, f func(int) int) int {
	return f(s.right)
}

// map SoneInt => ResultNode
func (s okInt) MapNode(f func(int) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkInt => Node
func (s okInt) FoldNode(a Node, f func(int) Node) Node {
	return f(s.right)
}
func (s okInt) FoldNodeF(a func(error) Node, f func(int) Node) Node {
	return f(s.right)
}

// map SoneInt => ResultSqlDB
func (s okInt) MapSqlDB(f func(int) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkInt => *sql.DB
func (s okInt) FoldSqlDB(a *sql.DB, f func(int) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okInt) FoldSqlDBF(a func(error) *sql.DB, f func(int) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneInt => ResultStore
func (s okInt) MapStore(f func(int) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkInt => Store
func (s okInt) FoldStore(a Store, f func(int) Store) Store {
	return f(s.right)
}
func (s okInt) FoldStoreF(a func(error) Store, f func(int) Store) Store {
	return f(s.right)
}

// map SoneInt => ResultString
func (s okInt) MapString(f func(int) string) ResultString {
	return OkString(f(s.right))
}
// fold OkInt => string
func (s okInt) FoldString(a string, f func(int) string) string {
	return f(s.right)
}
func (s okInt) FoldStringF(a func(error) string, f func(int) string) string {
	return f(s.right)
}

// map SoneInt => ResultUint64
func (s okInt) MapUint64(f func(int) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkInt => uint64
func (s okInt) FoldUint64(a uint64, f func(int) uint64) uint64 {
	return f(s.right)
}
func (s okInt) FoldUint64F(a func(error) uint64, f func(int) uint64) uint64 {
	return f(s.right)
}
 // end of oks


// none
type errNode struct{
	left error
}

func ErrNode(err error) ResultNode {
	return errNode{err}
}

// map ErrNode
func (e errNode) Map(f func(Node)) {}
func (e errNode) FoldF(l func(e error), r func(Node)) { l(e.left) }

 // map ErrNode => ResultInt
func (e errNode) MapInt(f func(v Node) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrNode => Resultint
func (e errNode) FoldInt(a int, f func(v Node) int) int {
	return a
}
func (e errNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return a(e.left)
}

 // map ErrNode => ResultNode
func (e errNode) MapNode(f func(v Node) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrNode => ResultNode
func (e errNode) FoldNode(a Node, f func(v Node) Node) Node {
	return a
}
func (e errNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return a(e.left)
}

 // map ErrNode => ResultSqlDB
func (e errNode) MapSqlDB(f func(v Node) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrNode => Result*sql.DB
func (e errNode) FoldSqlDB(a *sql.DB, f func(v Node) *sql.DB) *sql.DB {
	return a
}
func (e errNode) FoldSqlDBF(a func(error) *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrNode => ResultStore
func (e errNode) MapStore(f func(v Node) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrNode => ResultStore
func (e errNode) FoldStore(a Store, f func(v Node) Store) Store {
	return a
}
func (e errNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return a(e.left)
}

 // map ErrNode => ResultString
func (e errNode) MapString(f func(v Node) string) ResultString {
	return ErrString(e.left)
}
// fold ErrNode => Resultstring
func (e errNode) FoldString(a string, f func(v Node) string) string {
	return a
}
func (e errNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return a(e.left)
}

 // map ErrNode => ResultUint64
func (e errNode) MapUint64(f func(v Node) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrNode => Resultuint64
func (e errNode) FoldUint64(a uint64, f func(v Node) uint64) uint64 {
	return a
}
func (e errNode) FoldUint64F(a func(error) uint64, f func(Node) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okNode struct {
	right Node
}

func OkNode(v Node) okNode {
	return okNode{v}
}
// map ErrNode
func (s okNode) Map(f func(Node)) { f(s.right) }
func (s okNode) FoldF(l func(error), r func(Node)) { r(s.right) }

// map SoneNode => ResultInt
func (s okNode) MapInt(f func(Node) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkNode => int
func (s okNode) FoldInt(a int, f func(Node) int) int {
	return f(s.right)
}
func (s okNode) FoldIntF(a func(error) int, f func(Node) int) int {
	return f(s.right)
}

// map SoneNode => ResultNode
func (s okNode) MapNode(f func(Node) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkNode => Node
func (s okNode) FoldNode(a Node, f func(Node) Node) Node {
	return f(s.right)
}
func (s okNode) FoldNodeF(a func(error) Node, f func(Node) Node) Node {
	return f(s.right)
}

// map SoneNode => ResultSqlDB
func (s okNode) MapSqlDB(f func(Node) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkNode => *sql.DB
func (s okNode) FoldSqlDB(a *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okNode) FoldSqlDBF(a func(error) *sql.DB, f func(Node) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneNode => ResultStore
func (s okNode) MapStore(f func(Node) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkNode => Store
func (s okNode) FoldStore(a Store, f func(Node) Store) Store {
	return f(s.right)
}
func (s okNode) FoldStoreF(a func(error) Store, f func(Node) Store) Store {
	return f(s.right)
}

// map SoneNode => ResultString
func (s okNode) MapString(f func(Node) string) ResultString {
	return OkString(f(s.right))
}
// fold OkNode => string
func (s okNode) FoldString(a string, f func(Node) string) string {
	return f(s.right)
}
func (s okNode) FoldStringF(a func(error) string, f func(Node) string) string {
	return f(s.right)
}

// map SoneNode => ResultUint64
func (s okNode) MapUint64(f func(Node) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkNode => uint64
func (s okNode) FoldUint64(a uint64, f func(Node) uint64) uint64 {
	return f(s.right)
}
func (s okNode) FoldUint64F(a func(error) uint64, f func(Node) uint64) uint64 {
	return f(s.right)
}
 // end of oks


// none
type errSqlDB struct{
	left error
}

func ErrSqlDB(err error) ResultSqlDB {
	return errSqlDB{err}
}

// map ErrSqlDB
func (e errSqlDB) Map(f func(*sql.DB)) {}
func (e errSqlDB) FoldF(l func(e error), r func(*sql.DB)) { l(e.left) }

 // map ErrSqlDB => ResultInt
func (e errSqlDB) MapInt(f func(v *sql.DB) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrSqlDB => Resultint
func (e errSqlDB) FoldInt(a int, f func(v *sql.DB) int) int {
	return a
}
func (e errSqlDB) FoldIntF(a func(error) int, f func(*sql.DB) int) int {
	return a(e.left)
}

 // map ErrSqlDB => ResultNode
func (e errSqlDB) MapNode(f func(v *sql.DB) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrSqlDB => ResultNode
func (e errSqlDB) FoldNode(a Node, f func(v *sql.DB) Node) Node {
	return a
}
func (e errSqlDB) FoldNodeF(a func(error) Node, f func(*sql.DB) Node) Node {
	return a(e.left)
}

 // map ErrSqlDB => ResultSqlDB
func (e errSqlDB) MapSqlDB(f func(v *sql.DB) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrSqlDB => Result*sql.DB
func (e errSqlDB) FoldSqlDB(a *sql.DB, f func(v *sql.DB) *sql.DB) *sql.DB {
	return a
}
func (e errSqlDB) FoldSqlDBF(a func(error) *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrSqlDB => ResultStore
func (e errSqlDB) MapStore(f func(v *sql.DB) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrSqlDB => ResultStore
func (e errSqlDB) FoldStore(a Store, f func(v *sql.DB) Store) Store {
	return a
}
func (e errSqlDB) FoldStoreF(a func(error) Store, f func(*sql.DB) Store) Store {
	return a(e.left)
}

 // map ErrSqlDB => ResultString
func (e errSqlDB) MapString(f func(v *sql.DB) string) ResultString {
	return ErrString(e.left)
}
// fold ErrSqlDB => Resultstring
func (e errSqlDB) FoldString(a string, f func(v *sql.DB) string) string {
	return a
}
func (e errSqlDB) FoldStringF(a func(error) string, f func(*sql.DB) string) string {
	return a(e.left)
}

 // map ErrSqlDB => ResultUint64
func (e errSqlDB) MapUint64(f func(v *sql.DB) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrSqlDB => Resultuint64
func (e errSqlDB) FoldUint64(a uint64, f func(v *sql.DB) uint64) uint64 {
	return a
}
func (e errSqlDB) FoldUint64F(a func(error) uint64, f func(*sql.DB) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okSqlDB struct {
	right *sql.DB
}

func OkSqlDB(v *sql.DB) okSqlDB {
	return okSqlDB{v}
}
// map ErrSqlDB
func (s okSqlDB) Map(f func(*sql.DB)) { f(s.right) }
func (s okSqlDB) FoldF(l func(error), r func(*sql.DB)) { r(s.right) }

// map SoneSqlDB => ResultInt
func (s okSqlDB) MapInt(f func(*sql.DB) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkSqlDB => int
func (s okSqlDB) FoldInt(a int, f func(*sql.DB) int) int {
	return f(s.right)
}
func (s okSqlDB) FoldIntF(a func(error) int, f func(*sql.DB) int) int {
	return f(s.right)
}

// map SoneSqlDB => ResultNode
func (s okSqlDB) MapNode(f func(*sql.DB) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkSqlDB => Node
func (s okSqlDB) FoldNode(a Node, f func(*sql.DB) Node) Node {
	return f(s.right)
}
func (s okSqlDB) FoldNodeF(a func(error) Node, f func(*sql.DB) Node) Node {
	return f(s.right)
}

// map SoneSqlDB => ResultSqlDB
func (s okSqlDB) MapSqlDB(f func(*sql.DB) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkSqlDB => *sql.DB
func (s okSqlDB) FoldSqlDB(a *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okSqlDB) FoldSqlDBF(a func(error) *sql.DB, f func(*sql.DB) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneSqlDB => ResultStore
func (s okSqlDB) MapStore(f func(*sql.DB) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkSqlDB => Store
func (s okSqlDB) FoldStore(a Store, f func(*sql.DB) Store) Store {
	return f(s.right)
}
func (s okSqlDB) FoldStoreF(a func(error) Store, f func(*sql.DB) Store) Store {
	return f(s.right)
}

// map SoneSqlDB => ResultString
func (s okSqlDB) MapString(f func(*sql.DB) string) ResultString {
	return OkString(f(s.right))
}
// fold OkSqlDB => string
func (s okSqlDB) FoldString(a string, f func(*sql.DB) string) string {
	return f(s.right)
}
func (s okSqlDB) FoldStringF(a func(error) string, f func(*sql.DB) string) string {
	return f(s.right)
}

// map SoneSqlDB => ResultUint64
func (s okSqlDB) MapUint64(f func(*sql.DB) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkSqlDB => uint64
func (s okSqlDB) FoldUint64(a uint64, f func(*sql.DB) uint64) uint64 {
	return f(s.right)
}
func (s okSqlDB) FoldUint64F(a func(error) uint64, f func(*sql.DB) uint64) uint64 {
	return f(s.right)
}
 // end of oks


// none
type errStore struct{
	left error
}

func ErrStore(err error) ResultStore {
	return errStore{err}
}

// map ErrStore
func (e errStore) Map(f func(Store)) {}
func (e errStore) FoldF(l func(e error), r func(Store)) { l(e.left) }

 // map ErrStore => ResultInt
func (e errStore) MapInt(f func(v Store) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrStore => Resultint
func (e errStore) FoldInt(a int, f func(v Store) int) int {
	return a
}
func (e errStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return a(e.left)
}

 // map ErrStore => ResultNode
func (e errStore) MapNode(f func(v Store) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrStore => ResultNode
func (e errStore) FoldNode(a Node, f func(v Store) Node) Node {
	return a
}
func (e errStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return a(e.left)
}

 // map ErrStore => ResultSqlDB
func (e errStore) MapSqlDB(f func(v Store) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrStore => Result*sql.DB
func (e errStore) FoldSqlDB(a *sql.DB, f func(v Store) *sql.DB) *sql.DB {
	return a
}
func (e errStore) FoldSqlDBF(a func(error) *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrStore => ResultStore
func (e errStore) MapStore(f func(v Store) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrStore => ResultStore
func (e errStore) FoldStore(a Store, f func(v Store) Store) Store {
	return a
}
func (e errStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return a(e.left)
}

 // map ErrStore => ResultString
func (e errStore) MapString(f func(v Store) string) ResultString {
	return ErrString(e.left)
}
// fold ErrStore => Resultstring
func (e errStore) FoldString(a string, f func(v Store) string) string {
	return a
}
func (e errStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return a(e.left)
}

 // map ErrStore => ResultUint64
func (e errStore) MapUint64(f func(v Store) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrStore => Resultuint64
func (e errStore) FoldUint64(a uint64, f func(v Store) uint64) uint64 {
	return a
}
func (e errStore) FoldUint64F(a func(error) uint64, f func(Store) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okStore struct {
	right Store
}

func OkStore(v Store) okStore {
	return okStore{v}
}
// map ErrStore
func (s okStore) Map(f func(Store)) { f(s.right) }
func (s okStore) FoldF(l func(error), r func(Store)) { r(s.right) }

// map SoneStore => ResultInt
func (s okStore) MapInt(f func(Store) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkStore => int
func (s okStore) FoldInt(a int, f func(Store) int) int {
	return f(s.right)
}
func (s okStore) FoldIntF(a func(error) int, f func(Store) int) int {
	return f(s.right)
}

// map SoneStore => ResultNode
func (s okStore) MapNode(f func(Store) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkStore => Node
func (s okStore) FoldNode(a Node, f func(Store) Node) Node {
	return f(s.right)
}
func (s okStore) FoldNodeF(a func(error) Node, f func(Store) Node) Node {
	return f(s.right)
}

// map SoneStore => ResultSqlDB
func (s okStore) MapSqlDB(f func(Store) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkStore => *sql.DB
func (s okStore) FoldSqlDB(a *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okStore) FoldSqlDBF(a func(error) *sql.DB, f func(Store) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneStore => ResultStore
func (s okStore) MapStore(f func(Store) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkStore => Store
func (s okStore) FoldStore(a Store, f func(Store) Store) Store {
	return f(s.right)
}
func (s okStore) FoldStoreF(a func(error) Store, f func(Store) Store) Store {
	return f(s.right)
}

// map SoneStore => ResultString
func (s okStore) MapString(f func(Store) string) ResultString {
	return OkString(f(s.right))
}
// fold OkStore => string
func (s okStore) FoldString(a string, f func(Store) string) string {
	return f(s.right)
}
func (s okStore) FoldStringF(a func(error) string, f func(Store) string) string {
	return f(s.right)
}

// map SoneStore => ResultUint64
func (s okStore) MapUint64(f func(Store) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkStore => uint64
func (s okStore) FoldUint64(a uint64, f func(Store) uint64) uint64 {
	return f(s.right)
}
func (s okStore) FoldUint64F(a func(error) uint64, f func(Store) uint64) uint64 {
	return f(s.right)
}
 // end of oks


// none
type errString struct{
	left error
}

func ErrString(err error) ResultString {
	return errString{err}
}

// map ErrString
func (e errString) Map(f func(string)) {}
func (e errString) FoldF(l func(e error), r func(string)) { l(e.left) }

 // map ErrString => ResultInt
func (e errString) MapInt(f func(v string) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrString => Resultint
func (e errString) FoldInt(a int, f func(v string) int) int {
	return a
}
func (e errString) FoldIntF(a func(error) int, f func(string) int) int {
	return a(e.left)
}

 // map ErrString => ResultNode
func (e errString) MapNode(f func(v string) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrString => ResultNode
func (e errString) FoldNode(a Node, f func(v string) Node) Node {
	return a
}
func (e errString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return a(e.left)
}

 // map ErrString => ResultSqlDB
func (e errString) MapSqlDB(f func(v string) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrString => Result*sql.DB
func (e errString) FoldSqlDB(a *sql.DB, f func(v string) *sql.DB) *sql.DB {
	return a
}
func (e errString) FoldSqlDBF(a func(error) *sql.DB, f func(string) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrString => ResultStore
func (e errString) MapStore(f func(v string) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrString => ResultStore
func (e errString) FoldStore(a Store, f func(v string) Store) Store {
	return a
}
func (e errString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return a(e.left)
}

 // map ErrString => ResultString
func (e errString) MapString(f func(v string) string) ResultString {
	return ErrString(e.left)
}
// fold ErrString => Resultstring
func (e errString) FoldString(a string, f func(v string) string) string {
	return a
}
func (e errString) FoldStringF(a func(error) string, f func(string) string) string {
	return a(e.left)
}

 // map ErrString => ResultUint64
func (e errString) MapUint64(f func(v string) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrString => Resultuint64
func (e errString) FoldUint64(a uint64, f func(v string) uint64) uint64 {
	return a
}
func (e errString) FoldUint64F(a func(error) uint64, f func(string) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okString struct {
	right string
}

func OkString(v string) okString {
	return okString{v}
}
// map ErrString
func (s okString) Map(f func(string)) { f(s.right) }
func (s okString) FoldF(l func(error), r func(string)) { r(s.right) }

// map SoneString => ResultInt
func (s okString) MapInt(f func(string) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkString => int
func (s okString) FoldInt(a int, f func(string) int) int {
	return f(s.right)
}
func (s okString) FoldIntF(a func(error) int, f func(string) int) int {
	return f(s.right)
}

// map SoneString => ResultNode
func (s okString) MapNode(f func(string) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkString => Node
func (s okString) FoldNode(a Node, f func(string) Node) Node {
	return f(s.right)
}
func (s okString) FoldNodeF(a func(error) Node, f func(string) Node) Node {
	return f(s.right)
}

// map SoneString => ResultSqlDB
func (s okString) MapSqlDB(f func(string) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkString => *sql.DB
func (s okString) FoldSqlDB(a *sql.DB, f func(string) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okString) FoldSqlDBF(a func(error) *sql.DB, f func(string) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneString => ResultStore
func (s okString) MapStore(f func(string) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkString => Store
func (s okString) FoldStore(a Store, f func(string) Store) Store {
	return f(s.right)
}
func (s okString) FoldStoreF(a func(error) Store, f func(string) Store) Store {
	return f(s.right)
}

// map SoneString => ResultString
func (s okString) MapString(f func(string) string) ResultString {
	return OkString(f(s.right))
}
// fold OkString => string
func (s okString) FoldString(a string, f func(string) string) string {
	return f(s.right)
}
func (s okString) FoldStringF(a func(error) string, f func(string) string) string {
	return f(s.right)
}

// map SoneString => ResultUint64
func (s okString) MapUint64(f func(string) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkString => uint64
func (s okString) FoldUint64(a uint64, f func(string) uint64) uint64 {
	return f(s.right)
}
func (s okString) FoldUint64F(a func(error) uint64, f func(string) uint64) uint64 {
	return f(s.right)
}
 // end of oks


// none
type errUint64 struct{
	left error
}

func ErrUint64(err error) ResultUint64 {
	return errUint64{err}
}

// map ErrUint64
func (e errUint64) Map(f func(uint64)) {}
func (e errUint64) FoldF(l func(e error), r func(uint64)) { l(e.left) }

 // map ErrUint64 => ResultInt
func (e errUint64) MapInt(f func(v uint64) int) ResultInt {
	return ErrInt(e.left)
}
// fold ErrUint64 => Resultint
func (e errUint64) FoldInt(a int, f func(v uint64) int) int {
	return a
}
func (e errUint64) FoldIntF(a func(error) int, f func(uint64) int) int {
	return a(e.left)
}

 // map ErrUint64 => ResultNode
func (e errUint64) MapNode(f func(v uint64) Node) ResultNode {
	return ErrNode(e.left)
}
// fold ErrUint64 => ResultNode
func (e errUint64) FoldNode(a Node, f func(v uint64) Node) Node {
	return a
}
func (e errUint64) FoldNodeF(a func(error) Node, f func(uint64) Node) Node {
	return a(e.left)
}

 // map ErrUint64 => ResultSqlDB
func (e errUint64) MapSqlDB(f func(v uint64) *sql.DB) ResultSqlDB {
	return ErrSqlDB(e.left)
}
// fold ErrUint64 => Result*sql.DB
func (e errUint64) FoldSqlDB(a *sql.DB, f func(v uint64) *sql.DB) *sql.DB {
	return a
}
func (e errUint64) FoldSqlDBF(a func(error) *sql.DB, f func(uint64) *sql.DB) *sql.DB {
	return a(e.left)
}

 // map ErrUint64 => ResultStore
func (e errUint64) MapStore(f func(v uint64) Store) ResultStore {
	return ErrStore(e.left)
}
// fold ErrUint64 => ResultStore
func (e errUint64) FoldStore(a Store, f func(v uint64) Store) Store {
	return a
}
func (e errUint64) FoldStoreF(a func(error) Store, f func(uint64) Store) Store {
	return a(e.left)
}

 // map ErrUint64 => ResultString
func (e errUint64) MapString(f func(v uint64) string) ResultString {
	return ErrString(e.left)
}
// fold ErrUint64 => Resultstring
func (e errUint64) FoldString(a string, f func(v uint64) string) string {
	return a
}
func (e errUint64) FoldStringF(a func(error) string, f func(uint64) string) string {
	return a(e.left)
}

 // map ErrUint64 => ResultUint64
func (e errUint64) MapUint64(f func(v uint64) uint64) ResultUint64 {
	return ErrUint64(e.left)
}
// fold ErrUint64 => Resultuint64
func (e errUint64) FoldUint64(a uint64, f func(v uint64) uint64) uint64 {
	return a
}
func (e errUint64) FoldUint64F(a func(error) uint64, f func(uint64) uint64) uint64 {
	return a(e.left)
}
 // end of nones

// ok
type okUint64 struct {
	right uint64
}

func OkUint64(v uint64) okUint64 {
	return okUint64{v}
}
// map ErrUint64
func (s okUint64) Map(f func(uint64)) { f(s.right) }
func (s okUint64) FoldF(l func(error), r func(uint64)) { r(s.right) }

// map SoneUint64 => ResultInt
func (s okUint64) MapInt(f func(uint64) int) ResultInt {
	return OkInt(f(s.right))
}
// fold OkUint64 => int
func (s okUint64) FoldInt(a int, f func(uint64) int) int {
	return f(s.right)
}
func (s okUint64) FoldIntF(a func(error) int, f func(uint64) int) int {
	return f(s.right)
}

// map SoneUint64 => ResultNode
func (s okUint64) MapNode(f func(uint64) Node) ResultNode {
	return OkNode(f(s.right))
}
// fold OkUint64 => Node
func (s okUint64) FoldNode(a Node, f func(uint64) Node) Node {
	return f(s.right)
}
func (s okUint64) FoldNodeF(a func(error) Node, f func(uint64) Node) Node {
	return f(s.right)
}

// map SoneUint64 => ResultSqlDB
func (s okUint64) MapSqlDB(f func(uint64) *sql.DB) ResultSqlDB {
	return OkSqlDB(f(s.right))
}
// fold OkUint64 => *sql.DB
func (s okUint64) FoldSqlDB(a *sql.DB, f func(uint64) *sql.DB) *sql.DB {
	return f(s.right)
}
func (s okUint64) FoldSqlDBF(a func(error) *sql.DB, f func(uint64) *sql.DB) *sql.DB {
	return f(s.right)
}

// map SoneUint64 => ResultStore
func (s okUint64) MapStore(f func(uint64) Store) ResultStore {
	return OkStore(f(s.right))
}
// fold OkUint64 => Store
func (s okUint64) FoldStore(a Store, f func(uint64) Store) Store {
	return f(s.right)
}
func (s okUint64) FoldStoreF(a func(error) Store, f func(uint64) Store) Store {
	return f(s.right)
}

// map SoneUint64 => ResultString
func (s okUint64) MapString(f func(uint64) string) ResultString {
	return OkString(f(s.right))
}
// fold OkUint64 => string
func (s okUint64) FoldString(a string, f func(uint64) string) string {
	return f(s.right)
}
func (s okUint64) FoldStringF(a func(error) string, f func(uint64) string) string {
	return f(s.right)
}

// map SoneUint64 => ResultUint64
func (s okUint64) MapUint64(f func(uint64) uint64) ResultUint64 {
	return OkUint64(f(s.right))
}
// fold OkUint64 => uint64
func (s okUint64) FoldUint64(a uint64, f func(uint64) uint64) uint64 {
	return f(s.right)
}
func (s okUint64) FoldUint64F(a func(error) uint64, f func(uint64) uint64) uint64 {
	return f(s.right)
}
 // end of oks

 // end of everything

